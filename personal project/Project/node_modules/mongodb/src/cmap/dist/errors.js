"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;
var error_1 = require("../error");
/**
 * An error indicating a connection pool is closed
 * @category Error
 */
var PoolClosedError = /** @class */ (function (_super) {
    __extends(PoolClosedError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function PoolClosedError(pool) {
        var _this = _super.call(this, 'Attempted to check out a connection from closed connection pool') || this;
        _this.address = pool.address;
        return _this;
    }
    Object.defineProperty(PoolClosedError.prototype, "name", {
        get: function () {
            return 'MongoPoolClosedError';
        },
        enumerable: false,
        configurable: true
    });
    return PoolClosedError;
}(error_1.MongoDriverError));
exports.PoolClosedError = PoolClosedError;
/**
 * An error indicating a connection pool is currently paused
 * @category Error
 */
var PoolClearedError = /** @class */ (function (_super) {
    __extends(PoolClearedError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function PoolClearedError(pool, message) {
        var _a;
        var _this = this;
        var errorMessage = message
            ? message
            : "Connection pool for " + pool.address + " was cleared because another operation failed with: \"" + ((_a = pool.serverError) === null || _a === void 0 ? void 0 : _a.message) + "\"";
        _this = _super.call(this, errorMessage, pool.serverError ? { cause: pool.serverError } : undefined) || this;
        _this.address = pool.address;
        _this.addErrorLabel(error_1.MongoErrorLabel.PoolRequstedRetry);
        return _this;
    }
    Object.defineProperty(PoolClearedError.prototype, "name", {
        get: function () {
            return 'MongoPoolClearedError';
        },
        enumerable: false,
        configurable: true
    });
    return PoolClearedError;
}(error_1.MongoNetworkError));
exports.PoolClearedError = PoolClearedError;
/**
 * An error indicating that a connection pool has been cleared after the monitor for that server timed out.
 * @category Error
 */
var PoolClearedOnNetworkError = /** @class */ (function (_super) {
    __extends(PoolClearedOnNetworkError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function PoolClearedOnNetworkError(pool) {
        return _super.call(this, pool, "Connection to " + pool.address + " interrupted due to server monitor timeout") || this;
    }
    Object.defineProperty(PoolClearedOnNetworkError.prototype, "name", {
        get: function () {
            return 'PoolClearedOnNetworkError';
        },
        enumerable: false,
        configurable: true
    });
    return PoolClearedOnNetworkError;
}(PoolClearedError));
exports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;
/**
 * An error thrown when a request to check out a connection times out
 * @category Error
 */
var WaitQueueTimeoutError = /** @class */ (function (_super) {
    __extends(WaitQueueTimeoutError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function WaitQueueTimeoutError(message, address) {
        var _this = _super.call(this, message) || this;
        _this.address = address;
        return _this;
    }
    Object.defineProperty(WaitQueueTimeoutError.prototype, "name", {
        get: function () {
            return 'MongoWaitQueueTimeoutError';
        },
        enumerable: false,
        configurable: true
    });
    return WaitQueueTimeoutError;
}(error_1.MongoDriverError));
exports.WaitQueueTimeoutError = WaitQueueTimeoutError;

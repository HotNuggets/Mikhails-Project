"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.FindCursor = exports.FLAGS = void 0;
var responses_1 = require("../cmap/wire_protocol/responses");
var error_1 = require("../error");
var count_1 = require("../operations/count");
var execute_operation_1 = require("../operations/execute_operation");
var find_1 = require("../operations/find");
var sort_1 = require("../sort");
var utils_1 = require("../utils");
var abstract_cursor_1 = require("./abstract_cursor");
/** @public Flags allowed for cursor */
exports.FLAGS = [
    'tailable',
    'oplogReplay',
    'noCursorTimeout',
    'awaitData',
    'exhaust',
    'partial'
];
/** @public */
var FindCursor = /** @class */ (function (_super) {
    __extends(FindCursor, _super);
    /** @internal */
    function FindCursor(client, namespace, filter, options) {
        if (filter === void 0) { filter = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, client, namespace, options) || this;
        /** @internal */
        _this.numReturned = 0;
        _this.cursorFilter = filter;
        _this.findOptions = options;
        if (options.sort != null) {
            _this.findOptions.sort = sort_1.formatSort(options.sort);
        }
        return _this;
    }
    FindCursor.prototype.clone = function () {
        var clonedOptions = utils_1.mergeOptions({}, this.findOptions);
        delete clonedOptions.session;
        return new FindCursor(this.client, this.namespace, this.cursorFilter, __assign({}, clonedOptions));
    };
    FindCursor.prototype.map = function (transform) {
        return _super.prototype.map.call(this, transform);
    };
    /** @internal */
    FindCursor.prototype._initialize = function (session) {
        return __awaiter(this, void 0, Promise, function () {
            var findOperation, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        findOperation = new find_1.FindOperation(this.namespace, this.cursorFilter, __assign(__assign(__assign({}, this.findOptions), this.cursorOptions), { session: session }));
                        return [4 /*yield*/, execute_operation_1.executeOperation(this.client, findOperation)];
                    case 1:
                        response = _a.sent();
                        // the response is not a cursor when `explain` is enabled
                        this.numReturned = response.batchSize;
                        return [2 /*return*/, { server: findOperation.server, session: session, response: response }];
                }
            });
        });
    };
    FindCursor.prototype.getMore = function (batchSize) {
        return __awaiter(this, void 0, Promise, function () {
            var numReturned, limit, error_2, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        numReturned = this.numReturned;
                        if (!numReturned) return [3 /*break*/, 5];
                        limit = this.findOptions.limit;
                        batchSize =
                            limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;
                        if (!(batchSize <= 0)) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.close()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        utils_1.squashError(error_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, responses_1.CursorResponse.emptyGetMore];
                    case 5: return [4 /*yield*/, _super.prototype.getMore.call(this, batchSize)];
                    case 6:
                        response = _a.sent();
                        // TODO: wrap this in some logic to prevent it from happening if we don't need this support
                        this.numReturned = this.numReturned + response.batchSize;
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Get the count of documents for this cursor
     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead
     */
    FindCursor.prototype.count = function (options) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        utils_1.emitWarningOnce('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');
                        if (typeof options === 'boolean') {
                            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');
                        }
                        return [4 /*yield*/, execute_operation_1.executeOperation(this.client, new count_1.CountOperation(this.namespace, this.cursorFilter, __assign(__assign(__assign({}, this.findOptions), this.cursorOptions), options)))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Execute the explain for the cursor */
    FindCursor.prototype.explain = function (verbosity) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, execute_operation_1.executeOperation(this.client, new find_1.FindOperation(this.namespace, this.cursorFilter, __assign(__assign(__assign({}, this.findOptions), this.cursorOptions), { explain: verbosity !== null && verbosity !== void 0 ? verbosity : true })))];
                    case 1: return [2 /*return*/, (_a.sent()).shift(this.deserializationOptions)];
                }
            });
        });
    };
    /** Set the cursor query */
    FindCursor.prototype.filter = function (filter) {
        this.throwIfInitialized();
        this.cursorFilter = filter;
        return this;
    };
    /**
     * Set the cursor hint
     *
     * @param hint - If specified, then the query system will only consider plans using the hinted index.
     */
    FindCursor.prototype.hint = function (hint) {
        this.throwIfInitialized();
        this.findOptions.hint = hint;
        return this;
    };
    /**
     * Set the cursor min
     *
     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.
     */
    FindCursor.prototype.min = function (min) {
        this.throwIfInitialized();
        this.findOptions.min = min;
        return this;
    };
    /**
     * Set the cursor max
     *
     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.
     */
    FindCursor.prototype.max = function (max) {
        this.throwIfInitialized();
        this.findOptions.max = max;
        return this;
    };
    /**
     * Set the cursor returnKey.
     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.
     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.
     *
     * @param value - the returnKey value.
     */
    FindCursor.prototype.returnKey = function (value) {
        this.throwIfInitialized();
        this.findOptions.returnKey = value;
        return this;
    };
    /**
     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.
     *
     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.
     */
    FindCursor.prototype.showRecordId = function (value) {
        this.throwIfInitialized();
        this.findOptions.showRecordId = value;
        return this;
    };
    /**
     * Add a query modifier to the cursor query
     *
     * @param name - The query modifier (must start with $, such as $orderby etc)
     * @param value - The modifier value.
     */
    FindCursor.prototype.addQueryModifier = function (name, value) {
        this.throwIfInitialized();
        if (name[0] !== '$') {
            throw new error_1.MongoInvalidArgumentError(name + " is not a valid query modifier");
        }
        // Strip of the $
        var field = name.substr(1);
        // NOTE: consider some TS magic for this
        switch (field) {
            case 'comment':
                this.findOptions.comment = value;
                break;
            case 'explain':
                this.findOptions.explain = value;
                break;
            case 'hint':
                this.findOptions.hint = value;
                break;
            case 'max':
                this.findOptions.max = value;
                break;
            case 'maxTimeMS':
                this.findOptions.maxTimeMS = value;
                break;
            case 'min':
                this.findOptions.min = value;
                break;
            case 'orderby':
                this.findOptions.sort = sort_1.formatSort(value);
                break;
            case 'query':
                this.cursorFilter = value;
                break;
            case 'returnKey':
                this.findOptions.returnKey = value;
                break;
            case 'showDiskLoc':
                this.findOptions.showRecordId = value;
                break;
            default:
                throw new error_1.MongoInvalidArgumentError("Invalid query modifier: " + name);
        }
        return this;
    };
    /**
     * Add a comment to the cursor query allowing for tracking the comment in the log.
     *
     * @param value - The comment attached to this query.
     */
    FindCursor.prototype.comment = function (value) {
        this.throwIfInitialized();
        this.findOptions.comment = value;
        return this;
    };
    /**
     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)
     *
     * @param value - Number of milliseconds to wait before aborting the tailed query.
     */
    FindCursor.prototype.maxAwaitTimeMS = function (value) {
        this.throwIfInitialized();
        if (typeof value !== 'number') {
            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');
        }
        this.findOptions.maxAwaitTimeMS = value;
        return this;
    };
    FindCursor.prototype.maxTimeMS = function (value) {
        this.throwIfInitialized();
        if (typeof value !== 'number') {
            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');
        }
        this.findOptions.maxTimeMS = value;
        return this;
    };
    /**
     * Add a project stage to the aggregation pipeline
     *
     * @remarks
     * In order to strictly type this function you must provide an interface
     * that represents the effect of your projection on the result documents.
     *
     * By default chaining a projection to your cursor changes the returned type to the generic
     * {@link Document} type.
     * You should specify a parameterized type to have assertions on your final results.
     *
     * @example
     * ```typescript
     * // Best way
     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });
     * // Flexible way
     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });
     * ```
     *
     * @remarks
     *
     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,
     * it **does not** return a new instance of a cursor. This means when calling project,
     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.
     * Take note of the following example:
     *
     * @example
     * ```typescript
     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();
     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });
     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();
     *
     * // or always use chaining and save the final cursor
     *
     * const cursor = coll.find().project<{ a: string }>({
     *   _id: 0,
     *   a: { $convert: { input: '$a', to: 'string' }
     * }});
     * ```
     */
    FindCursor.prototype.project = function (value) {
        this.throwIfInitialized();
        this.findOptions.projection = value;
        return this;
    };
    /**
     * Sets the sort order of the cursor query.
     *
     * @param sort - The key or keys set for the sort.
     * @param direction - The direction of the sorting (1 or -1).
     */
    FindCursor.prototype.sort = function (sort, direction) {
        this.throwIfInitialized();
        if (this.findOptions.tailable) {
            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');
        }
        this.findOptions.sort = sort_1.formatSort(sort, direction);
        return this;
    };
    /**
     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)
     *
     * @remarks
     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}
     */
    FindCursor.prototype.allowDiskUse = function (allow) {
        if (allow === void 0) { allow = true; }
        this.throwIfInitialized();
        if (!this.findOptions.sort) {
            throw new error_1.MongoInvalidArgumentError('Option "allowDiskUse" requires a sort specification');
        }
        // As of 6.0 the default is true. This allows users to get back to the old behavior.
        if (!allow) {
            this.findOptions.allowDiskUse = false;
            return this;
        }
        this.findOptions.allowDiskUse = true;
        return this;
    };
    /**
     * Set the collation options for the cursor.
     *
     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
     */
    FindCursor.prototype.collation = function (value) {
        this.throwIfInitialized();
        this.findOptions.collation = value;
        return this;
    };
    /**
     * Set the limit for the cursor.
     *
     * @param value - The limit for the cursor query.
     */
    FindCursor.prototype.limit = function (value) {
        this.throwIfInitialized();
        if (this.findOptions.tailable) {
            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');
        }
        if (typeof value !== 'number') {
            throw new error_1.MongoInvalidArgumentError('Operation "limit" requires an integer');
        }
        this.findOptions.limit = value;
        return this;
    };
    /**
     * Set the skip for the cursor.
     *
     * @param value - The skip for the cursor query.
     */
    FindCursor.prototype.skip = function (value) {
        this.throwIfInitialized();
        if (this.findOptions.tailable) {
            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');
        }
        if (typeof value !== 'number') {
            throw new error_1.MongoInvalidArgumentError('Operation "skip" requires an integer');
        }
        this.findOptions.skip = value;
        return this;
    };
    return FindCursor;
}(abstract_cursor_1.AbstractCursor));
exports.FindCursor = FindCursor;

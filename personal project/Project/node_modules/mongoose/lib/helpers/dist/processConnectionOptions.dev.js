'use strict';

var clone = require('./clone');

var MongooseError = require('../error/index');

function processConnectionOptions(uri, options) {
  var opts = options ? options : {};
  var readPreference = opts.readPreference ? opts.readPreference : getUriReadPreference(uri);
  var clonedOpts = clone(opts);
  var resolvedOpts = readPreference && readPreference !== 'primary' && readPreference !== 'primaryPreferred' ? resolveOptsConflicts(readPreference, clonedOpts) : clonedOpts;
  return resolvedOpts;
}

function resolveOptsConflicts(pref, opts) {
  // don't silently override user-provided indexing options
  if (setsIndexOptions(opts) && setsSecondaryRead(pref)) {
    throwReadPreferenceError();
  } // if user has not explicitly set any auto-indexing options,
  // we can silently default them all to false
  else {
      return defaultIndexOptsToFalse(opts);
    }
}

function setsIndexOptions(opts) {
  var configIdx = opts.config && opts.config.autoIndex;
  var autoCreate = opts.autoCreate,
      autoIndex = opts.autoIndex;
  return !!(configIdx || autoCreate || autoIndex);
}

function setsSecondaryRead(prefString) {
  return !!(prefString === 'secondary' || prefString === 'secondaryPreferred');
}

function getUriReadPreference(connectionString) {
  var exp = /(?:&|\?)readPreference=(\w+)(?:&|$)/;
  var match = exp.exec(connectionString);
  return match ? match[1] : null;
}

function defaultIndexOptsToFalse(opts) {
  opts.config = {
    autoIndex: false
  };
  opts.autoCreate = false;
  opts.autoIndex = false;
  return opts;
}

function throwReadPreferenceError() {
  throw new MongooseError('MongoDB prohibits index creation on connections that read from ' + 'non-primary replicas.  Connections that set "readPreference" to "secondary" or ' + '"secondaryPreferred" may not opt-in to the following connection options: ' + 'autoCreate, autoIndex');
}

module.exports = processConnectionOptions;
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a, _b, _c, _d, _e, _f;
exports.__esModule = true;
exports.ClientBulkWriteCursorResponse = exports.ExplainedCursorResponse = exports.CursorResponse = exports.MongoDBResponse = exports.isErrorResponse = void 0;
var bson_1 = require("../../bson");
var error_1 = require("../../error");
var utils_1 = require("../../utils");
var document_1 = require("./on_demand/document");
/**
 * Accepts a BSON payload and checks for na "ok: 0" element.
 * This utility is intended to prevent calling response class constructors
 * that expect the result to be a success and demand certain properties to exist.
 *
 * For example, a cursor response always expects a cursor embedded document.
 * In order to write the class such that the properties reflect that assertion (non-null)
 * we cannot invoke the subclass constructor if the BSON represents an error.
 *
 * @param bytes - BSON document returned from the server
 */
function isErrorResponse(bson, elements) {
    for (var eIdx = 0; eIdx < elements.length; eIdx++) {
        var element = elements[eIdx];
        if (element[2 /* nameLength */] === 2) {
            var nameOffset = element[1 /* nameOffset */];
            // 111 == "o", 107 == "k"
            if (bson[nameOffset] === 111 && bson[nameOffset + 1] === 107) {
                var valueOffset = element[3 /* offset */];
                var valueLength = element[4 /* length */];
                // If any byte in the length of the ok number (works for any type) is non zero,
                // then it is considered "ok: 1"
                for (var i = valueOffset; i < valueOffset + valueLength; i++) {
                    if (bson[i] !== 0x00)
                        return false;
                }
                return true;
            }
        }
    }
    return true;
}
exports.isErrorResponse = isErrorResponse;
/** @internal */
var MongoDBResponse = /** @class */ (function (_super) {
    __extends(MongoDBResponse, _super);
    function MongoDBResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MongoDBResponse;
}(document_1.OnDemandDocument));
exports.MongoDBResponse = MongoDBResponse;
keyof;
JSTypeOf > (name);
string | number,
    as;
T,
    required ?  : false | undefined;
JSTypeOf[T] | null;
override;
get < ;
var T, keyof, JSTypeOf;
 > (name);
string | number,
    as;
T,
    required;
true;
JSTypeOf[T];
override;
get < ;
var T, keyof, JSTypeOf;
 > (name);
string | number,
    as;
T,
    required ?  : boolean | undefined;
JSTypeOf[T] | null;
{
    try {
        return _super.get.call(this, name, as, required);
    }
    catch (cause) {
        throw new error_1.MongoUnexpectedServerResponseError(cause.message, { cause: cause });
    }
}
is(value, unknown);
value;
is;
MongoDBResponse;
{
    return value instanceof MongoDBResponse;
}
make(bson, Uint8Array);
{
    var elements = bson_1.parseToElementsToArray(bson, 0);
    var isError = isErrorResponse(bson, elements);
    return isError
        ? new MongoDBResponse(bson, 0, false, elements)
        : new this(bson, 0, false, elements);
}
empty = new MongoDBResponse(new Uint8Array([13, 0, 0, 0, 16, 111, 107, 0, 1, 0, 0, 0, 0]));
/**
 * Drivers can safely assume that the `recoveryToken` field is always a BSON document but drivers MUST NOT modify the
 * contents of the document.
 */
get;
recoveryToken();
Document | null;
{
    return ((_b = (_a = this.get('recoveryToken', bson_1.BSONType.object)) === null || _a === void 0 ? void 0 : _a.toObject({
        promoteValues: false,
        promoteLongs: false,
        promoteBuffers: false,
        validation: { utf8: true }
    })) !== null && _b !== void 0 ? _b : null);
}
get;
atClusterTime();
bson_1.Timestamp | null;
{
    return ((_d = (_c = this.get('cursor', bson_1.BSONType.object)) === null || _c === void 0 ? void 0 : _c.get('atClusterTime', bson_1.BSONType.timestamp)) !== null && _d !== void 0 ? _d : this.get('atClusterTime', bson_1.BSONType.timestamp));
}
get;
operationTime();
bson_1.Timestamp | null;
{
    return this.get('operationTime', bson_1.BSONType.timestamp);
}
get;
ok();
0 | 1;
{
    return this.getNumber('ok') ? 1 : 0;
}
get;
$err();
string | null;
{
    return this.get('$err', bson_1.BSONType.string);
}
get;
errmsg();
string | null;
{
    return this.get('errmsg', bson_1.BSONType.string);
}
get;
code();
number | null;
{
    return this.getNumber('code');
}
clusterTime ?  : ClusterTime | null;
get;
$clusterTime();
ClusterTime | null;
{
    if (!('clusterTime' in this)) {
        var clusterTimeDoc = this.get('$clusterTime', bson_1.BSONType.object);
        if (clusterTimeDoc == null) {
            this.clusterTime = null;
            return null;
        }
        var clusterTime = clusterTimeDoc.get('clusterTime', bson_1.BSONType.timestamp, true);
        var signature = (_e = clusterTimeDoc.get('signature', bson_1.BSONType.object)) === null || _e === void 0 ? void 0 : _e.toObject();
        // @ts-expect-error: `signature` is incorrectly typed. It is public API.
        this.clusterTime = { clusterTime: clusterTime, signature: signature };
    }
    return (_f = this.clusterTime) !== null && _f !== void 0 ? _f : null;
}
override;
toObject(options ?  : BSONSerializeOptions);
Record < string, any > {
    "const": exactBSONOptions = __assign(__assign({}, bson_1.pluckBSONSerializeOptions(options !== null && options !== void 0 ? options : {})), { validation: bson_1.parseUtf8ValidationOption(options) }),
    "return": _super.toObject.call(this, exactBSONOptions)
};
/** @internal */
var CursorResponse = /** @class */ (function (_super) {
    __extends(CursorResponse, _super);
    function CursorResponse() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._batch = null;
        _this.iterated = 0;
        _this._encryptedBatch = null;
        return _this;
    }
    CursorResponse.prototype.is = function (value) {
        return value instanceof CursorResponse || value === CursorResponse.emptyGetMore;
    };
    Object.defineProperty(CursorResponse.prototype, "cursor", {
        get: function () {
            return this.get('cursor', bson_1.BSONType.object, true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CursorResponse.prototype, "id", {
        get: function () {
            try {
                return bson_1.Long.fromBigInt(this.cursor.get('id', bson_1.BSONType.long, true));
            }
            catch (cause) {
                throw new error_1.MongoUnexpectedServerResponseError(cause.message, { cause: cause });
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CursorResponse.prototype, "ns", {
        get: function () {
            var namespace = this.cursor.get('ns', bson_1.BSONType.string);
            if (namespace != null)
                return utils_1.ns(namespace);
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CursorResponse.prototype, "length", {
        get: function () {
            return Math.max(this.batchSize - this.iterated, 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CursorResponse.prototype, "encryptedBatch", {
        get: function () {
            var _a;
            if (this.encryptedResponse == null)
                return null;
            if (this._encryptedBatch != null)
                return this._encryptedBatch;
            var cursor = (_a = this.encryptedResponse) === null || _a === void 0 ? void 0 : _a.get('cursor', bson_1.BSONType.object);
            if (cursor === null || cursor === void 0 ? void 0 : cursor.has('firstBatch'))
                this._encryptedBatch = cursor.get('firstBatch', bson_1.BSONType.array, true);
            else if (cursor === null || cursor === void 0 ? void 0 : cursor.has('nextBatch'))
                this._encryptedBatch = cursor.get('nextBatch', bson_1.BSONType.array, true);
            else
                throw new error_1.MongoUnexpectedServerResponseError('Cursor document did not contain a batch');
            return this._encryptedBatch;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CursorResponse.prototype, "batch", {
        get: function () {
            if (this._batch != null)
                return this._batch;
            var cursor = this.cursor;
            if (cursor.has('firstBatch'))
                this._batch = cursor.get('firstBatch', bson_1.BSONType.array, true);
            else if (cursor.has('nextBatch'))
                this._batch = cursor.get('nextBatch', bson_1.BSONType.array, true);
            else
                throw new error_1.MongoUnexpectedServerResponseError('Cursor document did not contain a batch');
            return this._batch;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CursorResponse.prototype, "batchSize", {
        get: function () {
            var _a;
            return (_a = this.batch) === null || _a === void 0 ? void 0 : _a.size();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CursorResponse.prototype, "postBatchResumeToken", {
        get: function () {
            var _a, _b;
            return ((_b = (_a = this.cursor.get('postBatchResumeToken', bson_1.BSONType.object)) === null || _a === void 0 ? void 0 : _a.toObject({
                promoteValues: false,
                promoteLongs: false,
                promoteBuffers: false,
                validation: { utf8: true }
            })) !== null && _b !== void 0 ? _b : null);
        },
        enumerable: false,
        configurable: true
    });
    CursorResponse.prototype.shift = function (options) {
        var _a, _b, _c;
        if (this.iterated >= this.batchSize) {
            return null;
        }
        var result = (_a = this.batch.get(this.iterated, bson_1.BSONType.object, true)) !== null && _a !== void 0 ? _a : null;
        var encryptedResult = (_c = (_b = this.encryptedBatch) === null || _b === void 0 ? void 0 : _b.get(this.iterated, bson_1.BSONType.object, true)) !== null && _c !== void 0 ? _c : null;
        this.iterated += 1;
        if (options === null || options === void 0 ? void 0 : options.raw) {
            return result.toBytes();
        }
        else {
            var object = result.toObject(options);
            if (encryptedResult) {
                utils_1.decorateDecryptionResult(object, encryptedResult.toObject(options), true);
            }
            return object;
        }
    };
    CursorResponse.prototype.clear = function () {
        this.iterated = this.batchSize;
    };
    /**
     * This supports a feature of the FindCursor.
     * It is an optimization to avoid an extra getMore when the limit has been reached
     */
    CursorResponse.emptyGetMore = {
        id: new bson_1.Long(0),
        length: 0,
        shift: function () { return null; }
    };
    return CursorResponse;
}(MongoDBResponse));
exports.CursorResponse = CursorResponse;
/**
 * Explain responses have nothing to do with cursor responses
 * This class serves to temporarily avoid refactoring how cursors handle
 * explain responses which is to detect that the response is not cursor-like and return the explain
 * result as the "first and only" document in the "batch" and end the "cursor"
 */
var ExplainedCursorResponse = /** @class */ (function (_super) {
    __extends(ExplainedCursorResponse, _super);
    function ExplainedCursorResponse() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isExplain = true;
        _this._length = 1;
        return _this;
    }
    Object.defineProperty(ExplainedCursorResponse.prototype, "id", {
        get: function () {
            return bson_1.Long.fromBigInt(0n);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExplainedCursorResponse.prototype, "batchSize", {
        get: function () {
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExplainedCursorResponse.prototype, "ns", {
        get: function () {
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExplainedCursorResponse.prototype, "length", {
        get: function () {
            return this._length;
        },
        enumerable: false,
        configurable: true
    });
    ExplainedCursorResponse.prototype.shift = function (options) {
        if (this._length === 0)
            return null;
        this._length -= 1;
        return this.toObject(options);
    };
    return ExplainedCursorResponse;
}(CursorResponse));
exports.ExplainedCursorResponse = ExplainedCursorResponse;
/**
 * Client bulk writes have some extra metadata at the top level that needs to be
 * included in the result returned to the user.
 */
var ClientBulkWriteCursorResponse = /** @class */ (function (_super) {
    __extends(ClientBulkWriteCursorResponse, _super);
    function ClientBulkWriteCursorResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ClientBulkWriteCursorResponse.prototype, "insertedCount", {
        get: function () {
            return this.get('nInserted', bson_1.BSONType.int, true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClientBulkWriteCursorResponse.prototype, "upsertedCount", {
        get: function () {
            return this.get('nUpserted', bson_1.BSONType.int, true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClientBulkWriteCursorResponse.prototype, "matchedCount", {
        get: function () {
            return this.get('nMatched', bson_1.BSONType.int, true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClientBulkWriteCursorResponse.prototype, "modifiedCount", {
        get: function () {
            return this.get('nModified', bson_1.BSONType.int, true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClientBulkWriteCursorResponse.prototype, "deletedCount", {
        get: function () {
            return this.get('nDeleted', bson_1.BSONType.int, true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClientBulkWriteCursorResponse.prototype, "writeConcernError", {
        get: function () {
            return this.get('writeConcernError', bson_1.BSONType.object, false);
        },
        enumerable: false,
        configurable: true
    });
    return ClientBulkWriteCursorResponse;
}(CursorResponse));
exports.ClientBulkWriteCursorResponse = ClientBulkWriteCursorResponse;

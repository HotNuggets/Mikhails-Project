"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadAWSCredentials = loadAWSCredentials;

var aws_temporary_credentials_1 = require("../../cmap/auth/aws_temporary_credentials");
/**
 * @internal
 */


function loadAWSCredentials(kmsProviders) {
  var credentialProvider, _ref, _ref$SecretAccessKey, SecretAccessKey, _ref$AccessKeyId, AccessKeyId, Token, aws;

  return regeneratorRuntime.async(function loadAWSCredentials$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          credentialProvider = new aws_temporary_credentials_1.AWSSDKCredentialProvider(); // We shouldn't ever receive a response from the AWS SDK that doesn't have a `SecretAccessKey`
          // or `AccessKeyId`.  However, TS says these fields are optional.  We provide empty strings
          // and let libmongocrypt error if we're unable to fetch the required keys.

          _context.next = 3;
          return regeneratorRuntime.awrap(credentialProvider.getCredentials());

        case 3:
          _ref = _context.sent;
          _ref$SecretAccessKey = _ref.SecretAccessKey;
          SecretAccessKey = _ref$SecretAccessKey === void 0 ? '' : _ref$SecretAccessKey;
          _ref$AccessKeyId = _ref.AccessKeyId;
          AccessKeyId = _ref$AccessKeyId === void 0 ? '' : _ref$AccessKeyId;
          Token = _ref.Token;
          aws = {
            secretAccessKey: SecretAccessKey,
            accessKeyId: AccessKeyId
          }; // the AWS session token is only required for temporary credentials so only attach it to the
          // result if it's present in the response from the aws sdk

          Token != null && (aws.sessionToken = Token);
          return _context.abrupt("return", _objectSpread({}, kmsProviders, {
            aws: aws
          }));

        case 12:
        case "end":
          return _context.stop();
      }
    }
  });
}
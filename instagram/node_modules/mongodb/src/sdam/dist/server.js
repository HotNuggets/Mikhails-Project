"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var _a;
exports.__esModule = true;
exports.Server = void 0;
var connection_1 = require("../cmap/connection");
var connection_pool_1 = require("../cmap/connection_pool");
var errors_1 = require("../cmap/errors");
var constants_1 = require("../constants");
var error_1 = require("../error");
var mongo_types_1 = require("../mongo_types");
var transactions_1 = require("../transactions");
var utils_1 = require("../utils");
var write_concern_1 = require("../write_concern");
var common_1 = require("./common");
var monitor_1 = require("./monitor");
var server_description_1 = require("./server_description");
var stateTransition = utils_1.makeStateMachine((_a = {},
    _a[common_1.STATE_CLOSED] = [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],
    _a[common_1.STATE_CONNECTING] = [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],
    _a[common_1.STATE_CONNECTED] = [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],
    _a[common_1.STATE_CLOSING] = [common_1.STATE_CLOSING, common_1.STATE_CLOSED],
    _a));
/** @internal */
var Server = /** @class */ (function (_super) {
    __extends(Server, _super);
    /**
     * Create a server
     */
    function Server(topology, description, options) {
        var _this = _super.call(this) || this;
        _this.serverApi = options.serverApi;
        var poolOptions = __assign({ hostAddress: description.hostAddress }, options);
        _this.topology = topology;
        _this.pool = new connection_pool_1.ConnectionPool(_this, poolOptions);
        _this.s = {
            description: description,
            options: options,
            state: common_1.STATE_CLOSED,
            operationCount: 0
        };
        var _loop_1 = function (event) {
            this_1.pool.on(event, function (e) { return _this.emit(event, e); });
        };
        var this_1 = this;
        for (var _i = 0, _a = __spreadArrays(constants_1.CMAP_EVENTS, constants_1.APM_EVENTS); _i < _a.length; _i++) {
            var event = _a[_i];
            _loop_1(event);
        }
        _this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, function (clusterTime) {
            _this.clusterTime = clusterTime;
        });
        if (_this.loadBalanced) {
            _this.monitor = null;
            return _this;
        }
        // create the monitor
        _this.monitor = new monitor_1.Monitor(_this, _this.s.options);
        var _loop_2 = function (event) {
            this_2.monitor.on(event, function (e) { return _this.emit(event, e); });
        };
        var this_2 = this;
        for (var _b = 0, HEARTBEAT_EVENTS_1 = constants_1.HEARTBEAT_EVENTS; _b < HEARTBEAT_EVENTS_1.length; _b++) {
            var event = HEARTBEAT_EVENTS_1[_b];
            _loop_2(event);
        }
        _this.monitor.on('resetServer', function (error) { return markServerUnknown(_this, error); });
        _this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, function (event) {
            var _a, _b;
            _this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(_this.description.hostAddress, event.reply, {
                roundTripTime: (_a = _this.monitor) === null || _a === void 0 ? void 0 : _a.roundTripTime,
                minRoundTripTime: (_b = _this.monitor) === null || _b === void 0 ? void 0 : _b.minRoundTripTime
            }));
            if (_this.s.state === common_1.STATE_CONNECTING) {
                stateTransition(_this, common_1.STATE_CONNECTED);
                _this.emit(Server.CONNECT, _this);
            }
        });
        return _this;
    }
    Object.defineProperty(Server.prototype, "clusterTime", {
        get: function () {
            return this.topology.clusterTime;
        },
        set: function (clusterTime) {
            this.topology.clusterTime = clusterTime;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "description", {
        get: function () {
            return this.s.description;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "name", {
        get: function () {
            return this.s.description.address;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "autoEncrypter", {
        get: function () {
            if (this.s.options && this.s.options.autoEncrypter) {
                return this.s.options.autoEncrypter;
            }
            return;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Server.prototype, "loadBalanced", {
        get: function () {
            return this.topology.description.type === common_1.TopologyType.LoadBalanced;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Initiate server connect
     */
    Server.prototype.connect = function () {
        var _a;
        if (this.s.state !== common_1.STATE_CLOSED) {
            return;
        }
        stateTransition(this, common_1.STATE_CONNECTING);
        // If in load balancer mode we automatically set the server to
        // a load balancer. It never transitions out of this state and
        // has no monitor.
        if (!this.loadBalanced) {
            (_a = this.monitor) === null || _a === void 0 ? void 0 : _a.connect();
        }
        else {
            stateTransition(this, common_1.STATE_CONNECTED);
            this.emit(Server.CONNECT, this);
        }
    };
    /** Destroy the server connection */
    Server.prototype.destroy = function () {
        var _a;
        if (this.s.state === common_1.STATE_CLOSED) {
            return;
        }
        stateTransition(this, common_1.STATE_CLOSING);
        if (!this.loadBalanced) {
            (_a = this.monitor) === null || _a === void 0 ? void 0 : _a.close();
        }
        this.pool.close();
        stateTransition(this, common_1.STATE_CLOSED);
        this.emit('closed');
    };
    /**
     * Immediately schedule monitoring of this server. If there already an attempt being made
     * this will be a no-op.
     */
    Server.prototype.requestCheck = function () {
        var _a;
        if (!this.loadBalanced) {
            (_a = this.monitor) === null || _a === void 0 ? void 0 : _a.requestCheck();
        }
    };
    Server.prototype.command = function (ns, cmd, options, responseType) {
        return __awaiter(this, void 0, Promise, function () {
            var finalOptions, session, conn, checkoutError_1, res, commandError_1, operationError_1, res, commandError_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (ns.db == null || typeof ns === 'string') {
                            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');
                        }
                        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {
                            throw new error_1.MongoServerClosedError();
                        }
                        finalOptions = Object.assign({}, options, {
                            wireProtocolCommand: false,
                            directConnection: this.topology.s.options.directConnection
                        });
                        // There are cases where we need to flag the read preference not to get sent in
                        // the command, such as pre-5.0 servers attempting to perform an aggregate write
                        // with a non-primary read preference. In this case the effective read preference
                        // (primary) is not the same as the provided and must be removed completely.
                        if (finalOptions.omitReadPreference) {
                            delete finalOptions.readPreference;
                        }
                        session = finalOptions.session;
                        conn = session === null || session === void 0 ? void 0 : session.pinnedConnection;
                        this.incrementOperationCount();
                        if (!(conn == null)) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.pool.checkOut()];
                    case 2:
                        conn = _a.sent();
                        if (this.loadBalanced && isPinnableCommand(cmd, session)) {
                            session === null || session === void 0 ? void 0 : session.pin(conn);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        checkoutError_1 = _a.sent();
                        this.decrementOperationCount();
                        if (!(checkoutError_1 instanceof errors_1.PoolClearedError))
                            this.handleError(checkoutError_1);
                        throw checkoutError_1;
                    case 4:
                        _a.trys.push([4, 9, 17, 18]);
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, conn.command(ns, cmd, finalOptions, responseType)];
                    case 6:
                        res = _a.sent();
                        write_concern_1.throwIfWriteConcernError(res);
                        return [2 /*return*/, res];
                    case 7:
                        commandError_1 = _a.sent();
                        throw this.decorateCommandError(conn, cmd, finalOptions, commandError_1);
                    case 8: return [3 /*break*/, 18];
                    case 9:
                        operationError_1 = _a.sent();
                        if (!(operationError_1 instanceof error_1.MongoError &&
                            operationError_1.code === error_1.MONGODB_ERROR_CODES.Reauthenticate)) return [3 /*break*/, 15];
                        return [4 /*yield*/, this.pool.reauthenticate(conn)];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11:
                        _a.trys.push([11, 13, , 14]);
                        return [4 /*yield*/, conn.command(ns, cmd, finalOptions, responseType)];
                    case 12:
                        res = _a.sent();
                        write_concern_1.throwIfWriteConcernError(res);
                        return [2 /*return*/, res];
                    case 13:
                        commandError_2 = _a.sent();
                        throw this.decorateCommandError(conn, cmd, finalOptions, commandError_2);
                    case 14: return [3 /*break*/, 16];
                    case 15: throw operationError_1;
                    case 16: return [3 /*break*/, 18];
                    case 17:
                        this.decrementOperationCount();
                        if ((session === null || session === void 0 ? void 0 : session.pinnedConnection) !== conn) {
                            this.pool.checkIn(conn);
                        }
                        return [7 /*endfinally*/];
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Handle SDAM error
     * @internal
     */
    Server.prototype.handleError = function (error, connection) {
        var _this = this;
        if (!(error instanceof error_1.MongoError)) {
            return;
        }
        var isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;
        if (isStaleError) {
            return;
        }
        var isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);
        var isNetworkTimeoutBeforeHandshakeError = error_1.isNetworkErrorBeforeHandshake(error);
        var isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);
        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {
            // In load balanced mode we never mark the server as unknown and always
            // clear for the specific service id.
            if (!this.loadBalanced) {
                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);
                markServerUnknown(this, error);
            }
            else if (connection) {
                this.pool.clear({ serviceId: connection.serviceId });
            }
        }
        else {
            if (error_1.isSDAMUnrecoverableError(error)) {
                if (shouldHandleStateChangeError(this, error)) {
                    var shouldClearPool = utils_1.maxWireVersion(this) <= 7 || error_1.isNodeShuttingDownError(error);
                    if (this.loadBalanced && connection && shouldClearPool) {
                        this.pool.clear({ serviceId: connection.serviceId });
                    }
                    if (!this.loadBalanced) {
                        if (shouldClearPool) {
                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);
                        }
                        markServerUnknown(this, error);
                        process.nextTick(function () { return _this.requestCheck(); });
                    }
                }
            }
        }
    };
    /**
     * Ensure that error is properly decorated and internal state is updated before throwing
     * @internal
     */
    Server.prototype.decorateCommandError = function (connection, cmd, options, error) {
        if (typeof error !== 'object' || error == null || !('name' in error)) {
            throw new error_1.MongoRuntimeError('An unexpected error type: ' + typeof error);
        }
        if (error.name === 'AbortError' && 'cause' in error && error.cause instanceof error_1.MongoError) {
            error = error.cause;
        }
        if (!(error instanceof error_1.MongoError)) {
            // Node.js or some other error we have not special handling for
            return error;
        }
        if (connectionIsStale(this.pool, connection)) {
            return error;
        }
        var session = options === null || options === void 0 ? void 0 : options.session;
        if (error instanceof error_1.MongoNetworkError) {
            if (session && !session.hasEnded && session.serverSession) {
                session.serverSession.isDirty = true;
            }
            // inActiveTransaction check handles commit and abort.
            if (inActiveTransaction(session, cmd) &&
                !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {
                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);
            }
            if ((isRetryableWritesEnabled(this.topology) || transactions_1.isTransactionCommand(cmd)) &&
                utils_1.supportsRetryableWrites(this) &&
                !inActiveTransaction(session, cmd)) {
                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);
            }
        }
        else {
            if ((isRetryableWritesEnabled(this.topology) || transactions_1.isTransactionCommand(cmd)) &&
                error_1.needsRetryableWriteLabel(error, utils_1.maxWireVersion(this), this.description.type) &&
                !inActiveTransaction(session, cmd)) {
                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);
            }
        }
        if (session &&
            session.isPinned &&
            error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {
            session.unpin({ force: true });
        }
        this.handleError(error, connection);
        return error;
    };
    /**
     * Decrement the operation count, returning the new count.
     */
    Server.prototype.decrementOperationCount = function () {
        return (this.s.operationCount -= 1);
    };
    /**
     * Increment the operation count, returning the new count.
     */
    Server.prototype.incrementOperationCount = function () {
        return (this.s.operationCount += 1);
    };
    /** @event */
    Server.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;
    /** @event */
    Server.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;
    /** @event */
    Server.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;
    /** @event */
    Server.CONNECT = constants_1.CONNECT;
    /** @event */
    Server.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;
    /** @event */
    Server.CLOSED = constants_1.CLOSED;
    /** @event */
    Server.ENDED = constants_1.ENDED;
    return Server;
}(mongo_types_1.TypedEventEmitter));
exports.Server = Server;
function markServerUnknown(server, error) {
    var _a;
    // Load balancer servers can never be marked unknown.
    if (server.loadBalanced) {
        return;
    }
    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {
        (_a = server.monitor) === null || _a === void 0 ? void 0 : _a.reset();
    }
    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, { error: error }));
}
function isPinnableCommand(cmd, session) {
    if (session) {
        return (session.inTransaction() ||
            (session.transaction.isCommitted && 'commitTransaction' in cmd) ||
            'aggregate' in cmd ||
            'find' in cmd ||
            'getMore' in cmd ||
            'listCollections' in cmd ||
            'listIndexes' in cmd);
    }
    return false;
}
function connectionIsStale(pool, connection) {
    if (connection.serviceId) {
        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));
    }
    return connection.generation !== pool.generation;
}
function shouldHandleStateChangeError(server, err) {
    var etv = err.topologyVersion;
    var stv = server.description.topologyVersion;
    return server_description_1.compareTopologyVersion(stv, etv) < 0;
}
function inActiveTransaction(session, cmd) {
    return session && session.inTransaction() && !transactions_1.isTransactionCommand(cmd);
}
/** this checks the retryWrites option passed down from the client options, it
 * does not check if the server supports retryable writes */
function isRetryableWritesEnabled(topology) {
    return topology.s.options.retryWrites !== false;
}

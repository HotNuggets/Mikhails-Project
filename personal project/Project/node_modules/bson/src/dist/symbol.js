"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.BSONSymbol = void 0;
var bson_value_1 = require("./bson_value");
var utils_1 = require("./parser/utils");
/**
 * A class representation of the BSON Symbol type.
 * @public
 * @category BSONType
 */
var BSONSymbol = /** @class */ (function (_super) {
    __extends(BSONSymbol, _super);
    /**
     * @param value - the string representing the symbol.
     */
    function BSONSymbol(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Object.defineProperty(BSONSymbol.prototype, "_bsontype", {
        get: function () {
            return 'BSONSymbol';
        },
        enumerable: false,
        configurable: true
    });
    /** Access the wrapped string value. */
    BSONSymbol.prototype.valueOf = function () {
        return this.value;
    };
    BSONSymbol.prototype.toString = function () {
        return this.value;
    };
    BSONSymbol.prototype.toJSON = function () {
        return this.value;
    };
    /** @internal */
    BSONSymbol.prototype.toExtendedJSON = function () {
        return { $symbol: this.value };
    };
    /** @internal */
    BSONSymbol.fromExtendedJSON = function (doc) {
        return new BSONSymbol(doc.$symbol);
    };
    BSONSymbol.prototype.inspect = function (depth, options, inspect) {
        inspect !== null && inspect !== void 0 ? inspect : ;
        utils_1.defaultInspect;
        return "new BSONSymbol(" + inspect(this.value, options) + ")";
    };
    return BSONSymbol;
}(bson_value_1.BSONValue));
exports.BSONSymbol = BSONSymbol;

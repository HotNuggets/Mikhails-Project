"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.Int32 = void 0;
var bson_value_1 = require("./bson_value");
var constants_1 = require("./constants");
var error_1 = require("./error");
var utils_1 = require("./parser/utils");
var string_utils_1 = require("./utils/string_utils");
/**
 * A class representation of a BSON Int32 type.
 * @public
 * @category BSONType
 */
var Int32 = /** @class */ (function (_super) {
    __extends(Int32, _super);
    /**
     * Create an Int32 type
     *
     * @param value - the number we want to represent as an int32.
     */
    function Int32(value) {
        var _this = _super.call(this) || this;
        if (value instanceof Number) {
            value = value.valueOf();
        }
        _this.value = +value | 0;
        return _this;
    }
    Object.defineProperty(Int32.prototype, "_bsontype", {
        get: function () {
            return 'Int32';
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Attempt to create an Int32 type from string.
     *
     * This method will throw a BSONError on any string input that is not representable as an Int32.
     * Notably, this method will also throw on the following string formats:
     * - Strings in non-decimal formats (exponent notation, binary, hex, or octal digits)
     * - Strings non-numeric and non-leading sign characters (ex: '2.0', '24,000')
     * - Strings with leading and/or trailing whitespace
     *
     * Strings with leading zeros, however, are allowed.
     *
     * @param value - the string we want to represent as an int32.
     */
    Int32.fromString = function (value) {
        var cleanedValue = string_utils_1.removeLeadingZerosAndExplicitPlus(value);
        var coercedValue = Number(value);
        if (constants_1.BSON_INT32_MAX < coercedValue) {
            throw new error_1.BSONError("Input: '" + value + "' is larger than the maximum value for Int32");
        }
        else if (constants_1.BSON_INT32_MIN > coercedValue) {
            throw new error_1.BSONError("Input: '" + value + "' is smaller than the minimum value for Int32");
        }
        else if (!Number.isSafeInteger(coercedValue)) {
            throw new error_1.BSONError("Input: '" + value + "' is not a safe integer");
        }
        else if (coercedValue.toString() !== cleanedValue) {
            // catch all case
            throw new error_1.BSONError("Input: '" + value + "' is not a valid Int32 string");
        }
        return new Int32(coercedValue);
    };
    /**
     * Access the number value.
     *
     * @returns returns the wrapped int32 number.
     */
    Int32.prototype.valueOf = function () {
        return this.value;
    };
    Int32.prototype.toString = function (radix) {
        return this.value.toString(radix);
    };
    Int32.prototype.toJSON = function () {
        return this.value;
    };
    /** @internal */
    Int32.prototype.toExtendedJSON = function (options) {
        if (options && (options.relaxed || options.legacy))
            return this.value;
        return { $numberInt: this.value.toString() };
    };
    /** @internal */
    Int32.fromExtendedJSON = function (doc, options) {
        return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);
    };
    Int32.prototype.inspect = function (depth, options, inspect) {
        inspect !== null && inspect !== void 0 ? inspect : ;
        utils_1.defaultInspect;
        return "new Int32(" + inspect(this.value, options) + ")";
    };
    return Int32;
}(bson_value_1.BSONValue));
exports.Int32 = Int32;

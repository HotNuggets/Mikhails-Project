'use strict';

var each = require('../helpers/each');
/*!
 * ignore
 */


module.exports = function saveSubdocs(schema) {
  var unshift = true;
  schema.s.hooks.pre('save', false, function saveSubdocsPreSave(next) {
    if (this.$isSubdocument) {
      next();
      return;
    }

    var _this = this;

    var subdocs = this.$getAllSubdocs();

    if (!subdocs.length) {
      next();
      return;
    }

    each(subdocs, function (subdoc, cb) {
      subdoc.$__schema.s.hooks.execPre('save', subdoc, function (err) {
        cb(err);
      });
    }, function (error) {
      if (error) {
        return _this.$__schema.s.hooks.execPost('save:error', _this, [_this], {
          error: error
        }, function (error) {
          next(error);
        });
      }

      next();
    });
  }, null, unshift);
  schema.s.hooks.post('save', function saveSubdocsPostDeleteOne() {
    var removedSubdocs, promises, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

    return regeneratorRuntime.async(function saveSubdocsPostDeleteOne$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            removedSubdocs = this.$__.removedSubdocs;

            if (!(!removedSubdocs || !removedSubdocs.length)) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return");

          case 3:
            promises = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 7;

            _loop = function _loop() {
              var subdoc = _step.value;
              promises.push(new Promise(function (resolve, reject) {
                subdoc.$__schema.s.hooks.execPost('deleteOne', subdoc, [subdoc], function (err) {
                  if (err) {
                    return reject(err);
                  }

                  resolve();
                });
              }));
            };

            for (_iterator = removedSubdocs[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              _loop();
            }

            _context.next = 16;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](7);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 16:
            _context.prev = 16;
            _context.prev = 17;

            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }

          case 19:
            _context.prev = 19;

            if (!_didIteratorError) {
              _context.next = 22;
              break;
            }

            throw _iteratorError;

          case 22:
            return _context.finish(19);

          case 23:
            return _context.finish(16);

          case 24:
            this.$__.removedSubdocs = null;
            _context.next = 27;
            return regeneratorRuntime.awrap(Promise.all(promises));

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, null, this, [[7, 12, 16, 24], [17,, 19, 23]]);
  });
  schema.s.hooks.post('save', function saveSubdocsPostSave() {
    var _this2 = this;

    var _this, subdocs, promises, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop2, _iterator2, _step2;

    return regeneratorRuntime.async(function saveSubdocsPostSave$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!this.$isSubdocument) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return");

          case 2:
            _this = this;
            subdocs = this.$getAllSubdocs();

            if (subdocs.length) {
              _context2.next = 6;
              break;
            }

            return _context2.abrupt("return");

          case 6:
            promises = [];
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context2.prev = 10;

            _loop2 = function _loop2() {
              var subdoc = _step2.value;
              promises.push(new Promise(function (resolve, reject) {
                subdoc.$__schema.s.hooks.execPost('save', subdoc, [subdoc], function (err) {
                  if (err) {
                    return reject(err);
                  }

                  resolve();
                });
              }));
            };

            for (_iterator2 = subdocs[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              _loop2();
            }

            _context2.next = 19;
            break;

          case 15:
            _context2.prev = 15;
            _context2.t0 = _context2["catch"](10);
            _didIteratorError2 = true;
            _iteratorError2 = _context2.t0;

          case 19:
            _context2.prev = 19;
            _context2.prev = 20;

            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }

          case 22:
            _context2.prev = 22;

            if (!_didIteratorError2) {
              _context2.next = 25;
              break;
            }

            throw _iteratorError2;

          case 25:
            return _context2.finish(22);

          case 26:
            return _context2.finish(19);

          case 27:
            _context2.prev = 27;
            _context2.next = 30;
            return regeneratorRuntime.awrap(Promise.all(promises));

          case 30:
            _context2.next = 36;
            break;

          case 32:
            _context2.prev = 32;
            _context2.t1 = _context2["catch"](27);
            _context2.next = 36;
            return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
              _this2.$__schema.s.hooks.execPost('save:error', _this, [_this], {
                error: _context2.t1
              }, function (error) {
                if (error) {
                  return reject(error);
                }

                resolve();
              });
            }));

          case 36:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this, [[10, 15, 19, 27], [20,, 22, 26], [27, 32]]);
  }, null, unshift);
};
"use strict";
exports.__esModule = true;
exports.MongoClientAuthProviders = void 0;
var gssapi_1 = require("./cmap/auth/gssapi");
var mongocr_1 = require("./cmap/auth/mongocr");
var mongodb_aws_1 = require("./cmap/auth/mongodb_aws");
var mongodb_oidc_1 = require("./cmap/auth/mongodb_oidc");
var automated_callback_workflow_1 = require("./cmap/auth/mongodb_oidc/automated_callback_workflow");
var human_callback_workflow_1 = require("./cmap/auth/mongodb_oidc/human_callback_workflow");
var token_cache_1 = require("./cmap/auth/mongodb_oidc/token_cache");
var plain_1 = require("./cmap/auth/plain");
var providers_1 = require("./cmap/auth/providers");
var scram_1 = require("./cmap/auth/scram");
var x509_1 = require("./cmap/auth/x509");
var error_1 = require("./error");
/** @internal */
var AUTH_PROVIDERS = new Map([
    [providers_1.AuthMechanism.MONGODB_AWS, function () { return new mongodb_aws_1.MongoDBAWS(); }],
    [providers_1.AuthMechanism.MONGODB_CR, function () { return new mongocr_1.MongoCR(); }],
    [providers_1.AuthMechanism.MONGODB_GSSAPI, function () { return new gssapi_1.GSSAPI(); }],
    [providers_1.AuthMechanism.MONGODB_OIDC, function (workflow) { return new mongodb_oidc_1.MongoDBOIDC(workflow); }],
    [providers_1.AuthMechanism.MONGODB_PLAIN, function () { return new plain_1.Plain(); }],
    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, function () { return new scram_1.ScramSHA1(); }],
    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, function () { return new scram_1.ScramSHA256(); }],
    [providers_1.AuthMechanism.MONGODB_X509, function () { return new x509_1.X509(); }]
]);
/**
 * Create a set of providers per client
 * to avoid sharing the provider's cache between different clients.
 * @internal
 */
var MongoClientAuthProviders = /** @class */ (function () {
    function MongoClientAuthProviders() {
        this.existingProviders = new Map();
    }
    /**
     * Get or create an authentication provider based on the provided mechanism.
     * We don't want to create all providers at once, as some providers may not be used.
     * @param name - The name of the provider to get or create.
     * @param credentials - The credentials.
     * @returns The provider.
     * @throws MongoInvalidArgumentError if the mechanism is not supported.
     * @internal
     */
    MongoClientAuthProviders.prototype.getOrCreateProvider = function (name, authMechanismProperties) {
        var authProvider = this.existingProviders.get(name);
        if (authProvider) {
            return authProvider;
        }
        var providerFunction = AUTH_PROVIDERS.get(name);
        if (!providerFunction) {
            throw new error_1.MongoInvalidArgumentError("authMechanism " + name + " not supported");
        }
        var provider;
        if (name === providers_1.AuthMechanism.MONGODB_OIDC) {
            provider = providerFunction(this.getWorkflow(authMechanismProperties));
        }
        else {
            provider = providerFunction();
        }
        this.existingProviders.set(name, provider);
        return provider;
    };
    /**
     * Gets either a device workflow or callback workflow.
     */
    MongoClientAuthProviders.prototype.getWorkflow = function (authMechanismProperties) {
        var _a;
        if (authMechanismProperties.OIDC_HUMAN_CALLBACK) {
            return new human_callback_workflow_1.HumanCallbackWorkflow(new token_cache_1.TokenCache(), authMechanismProperties.OIDC_HUMAN_CALLBACK);
        }
        else if (authMechanismProperties.OIDC_CALLBACK) {
            return new automated_callback_workflow_1.AutomatedCallbackWorkflow(new token_cache_1.TokenCache(), authMechanismProperties.OIDC_CALLBACK);
        }
        else {
            var environment = authMechanismProperties.ENVIRONMENT;
            var workflow = (_a = mongodb_oidc_1.OIDC_WORKFLOWS.get(environment)) === null || _a === void 0 ? void 0 : _a();
            if (!workflow) {
                throw new error_1.MongoInvalidArgumentError("Could not load workflow for environment " + authMechanismProperties.ENVIRONMENT);
            }
            return workflow;
        }
    };
    return MongoClientAuthProviders;
}());
exports.MongoClientAuthProviders = MongoClientAuthProviders;

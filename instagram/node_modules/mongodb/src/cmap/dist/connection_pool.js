"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.ConnectionPool = exports.PoolState = void 0;
var timers_1 = require("timers");
var constants_1 = require("../constants");
var error_1 = require("../error");
var mongo_types_1 = require("../mongo_types");
var timeout_1 = require("../timeout");
var utils_1 = require("../utils");
var connect_1 = require("./connect");
var connection_1 = require("./connection");
var connection_pool_events_1 = require("./connection_pool_events");
var errors_1 = require("./errors");
var metrics_1 = require("./metrics");
/** @internal */
var kServer = Symbol('server');
/** @internal */
var kConnections = Symbol('connections');
/** @internal */
var kPending = Symbol('pending');
/** @internal */
var kCheckedOut = Symbol('checkedOut');
/** @internal */
var kMinPoolSizeTimer = Symbol('minPoolSizeTimer');
/** @internal */
var kGeneration = Symbol('generation');
/** @internal */
var kServiceGenerations = Symbol('serviceGenerations');
/** @internal */
var kConnectionCounter = Symbol('connectionCounter');
/** @internal */
var kCancellationToken = Symbol('cancellationToken');
/** @internal */
var kWaitQueue = Symbol('waitQueue');
/** @internal */
var kCancelled = Symbol('cancelled');
/** @internal */
var kMetrics = Symbol('metrics');
/** @internal */
var kProcessingWaitQueue = Symbol('processingWaitQueue');
/** @internal */
var kPoolState = Symbol('poolState');
/** @internal */
exports.PoolState = Object.freeze({
    paused: 'paused',
    ready: 'ready',
    closed: 'closed'
});
/**
 * A pool of connections which dynamically resizes, and emit events related to pool activity
 * @internal
 */
var ConnectionPool = /** @class */ (function (_super) {
    __extends(ConnectionPool, _super);
    function ConnectionPool(server, options) {
        var _a, _b, _c, _d, _e, _f, _g;
        var _this = _super.call(this) || this;
        _this.options = Object.freeze(__assign(__assign({ connectionType: connection_1.Connection }, options), { maxPoolSize: (_a = options.maxPoolSize) !== null && _a !== void 0 ? _a : 100, minPoolSize: (_b = options.minPoolSize) !== null && _b !== void 0 ? _b : 0, maxConnecting: (_c = options.maxConnecting) !== null && _c !== void 0 ? _c : 2, maxIdleTimeMS: (_d = options.maxIdleTimeMS) !== null && _d !== void 0 ? _d : 0, waitQueueTimeoutMS: (_e = options.waitQueueTimeoutMS) !== null && _e !== void 0 ? _e : 0, minPoolSizeCheckFrequencyMS: (_f = options.minPoolSizeCheckFrequencyMS) !== null && _f !== void 0 ? _f : 100, autoEncrypter: options.autoEncrypter }));
        if (_this.options.minPoolSize > _this.options.maxPoolSize) {
            throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');
        }
        _this[kPoolState] = exports.PoolState.paused;
        _this[kServer] = server;
        _this[kConnections] = new utils_1.List();
        _this[kPending] = 0;
        _this[kCheckedOut] = new Set();
        _this[kMinPoolSizeTimer] = undefined;
        _this[kGeneration] = 0;
        _this[kServiceGenerations] = new Map();
        _this[kConnectionCounter] = utils_1.makeCounter(1);
        _this[kCancellationToken] = new mongo_types_1.CancellationToken();
        _this[kCancellationToken].setMaxListeners(Infinity);
        _this[kWaitQueue] = new utils_1.List();
        _this[kMetrics] = new metrics_1.ConnectionPoolMetrics();
        _this[kProcessingWaitQueue] = false;
        _this.mongoLogger = (_g = _this[kServer].topology.client) === null || _g === void 0 ? void 0 : _g.mongoLogger;
        _this.component = 'connection';
        process.nextTick(function () {
            _this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(_this));
        });
        return _this;
    }
    Object.defineProperty(ConnectionPool.prototype, "address", {
        /** The address of the endpoint the pool is connected to */
        get: function () {
            return this.options.hostAddress.toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "closed", {
        /**
         * Check if the pool has been closed
         *
         * TODO(NODE-3263): We can remove this property once shell no longer needs it
         */
        get: function () {
            return this[kPoolState] === exports.PoolState.closed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "generation", {
        /** An integer representing the SDAM generation of the pool */
        get: function () {
            return this[kGeneration];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "totalConnectionCount", {
        /** An integer expressing how many total connections (available + pending + in use) the pool currently has */
        get: function () {
            return (this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "availableConnectionCount", {
        /** An integer expressing how many connections are currently available in the pool. */
        get: function () {
            return this[kConnections].length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "pendingConnectionCount", {
        get: function () {
            return this[kPending];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "currentCheckedOutCount", {
        get: function () {
            return this[kCheckedOut].size;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "waitQueueSize", {
        get: function () {
            return this[kWaitQueue].length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "loadBalanced", {
        get: function () {
            return this.options.loadBalanced;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "serviceGenerations", {
        get: function () {
            return this[kServiceGenerations];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "serverError", {
        get: function () {
            return this[kServer].description.error;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConnectionPool.prototype, "checkedOutConnections", {
        /**
         * This is exposed ONLY for use in mongosh, to enable
         * killing all connections if a user quits the shell with
         * operations in progress.
         *
         * This property may be removed as a part of NODE-3263.
         */
        get: function () {
            return this[kCheckedOut];
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get the metrics information for the pool when a wait queue timeout occurs.
     */
    ConnectionPool.prototype.waitQueueErrorMetrics = function () {
        return this[kMetrics].info(this.options.maxPoolSize);
    };
    /**
     * Set the pool state to "ready"
     */
    ConnectionPool.prototype.ready = function () {
        if (this[kPoolState] !== exports.PoolState.paused) {
            return;
        }
        this[kPoolState] = exports.PoolState.ready;
        this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));
        timers_1.clearTimeout(this[kMinPoolSizeTimer]);
        this.ensureMinPoolSize();
    };
    /**
     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it
     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or
     * explicitly destroyed by the new owner.
     */
    ConnectionPool.prototype.checkOut = function () {
        return __awaiter(this, void 0, Promise, function () {
            var checkoutTime, waitQueueTimeoutMS, _a, promise, resolve, reject, timeout, waitQueueMember, error_2, timeoutError;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        checkoutTime = utils_1.now();
                        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));
                        waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;
                        _a = utils_1.promiseWithResolvers(), promise = _a.promise, resolve = _a.resolve, reject = _a.reject;
                        timeout = timeout_1.Timeout.expires(waitQueueTimeoutMS);
                        waitQueueMember = {
                            resolve: resolve,
                            reject: reject,
                            timeout: timeout,
                            checkoutTime: checkoutTime
                        };
                        this[kWaitQueue].push(waitQueueMember);
                        process.nextTick(function () { return _this.processWaitQueue(); });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, Promise.race([promise, waitQueueMember.timeout])];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        error_2 = _b.sent();
                        if (timeout_1.TimeoutError.is(error_2)) {
                            waitQueueMember[kCancelled] = true;
                            waitQueueMember.timeout.clear();
                            this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout', waitQueueMember.checkoutTime));
                            timeoutError = new errors_1.WaitQueueTimeoutError(this.loadBalanced
                                ? this.waitQueueErrorMetrics()
                                : 'Timed out while checking out a connection from connection pool', this.address);
                            throw timeoutError;
                        }
                        throw error_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Check a connection into the pool.
     *
     * @param connection - The connection to check in
     */
    ConnectionPool.prototype.checkIn = function (connection) {
        var _this = this;
        if (!this[kCheckedOut].has(connection)) {
            return;
        }
        var poolClosed = this.closed;
        var stale = this.connectionIsStale(connection);
        var willDestroy = !!(poolClosed || stale || connection.closed);
        if (!willDestroy) {
            connection.markAvailable();
            this[kConnections].unshift(connection);
        }
        this[kCheckedOut]["delete"](connection);
        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));
        if (willDestroy) {
            var reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';
            this.destroyConnection(connection, reason);
        }
        process.nextTick(function () { return _this.processWaitQueue(); });
    };
    /**
     * Clear the pool
     *
     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a
     * previous generation will eventually be pruned during subsequent checkouts.
     */
    ConnectionPool.prototype.clear = function (options) {
        var _this = this;
        var _a;
        if (options === void 0) { options = {}; }
        if (this.closed) {
            return;
        }
        // handle load balanced case
        if (this.loadBalanced) {
            var serviceId = options.serviceId;
            if (!serviceId) {
                throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');
            }
            var sid = serviceId.toHexString();
            var generation = this.serviceGenerations.get(sid);
            // Only need to worry if the generation exists, since it should
            // always be there but typescript needs the check.
            if (generation == null) {
                throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');
            }
            else {
                // Increment the generation for the service id.
                this.serviceGenerations.set(sid, generation + 1);
            }
            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, { serviceId: serviceId }));
            return;
        }
        // handle non load-balanced case
        var interruptInUseConnections = (_a = options.interruptInUseConnections) !== null && _a !== void 0 ? _a : false;
        var oldGeneration = this[kGeneration];
        this[kGeneration] += 1;
        var alreadyPaused = this[kPoolState] === exports.PoolState.paused;
        this[kPoolState] = exports.PoolState.paused;
        this.clearMinPoolSizeTimer();
        if (!alreadyPaused) {
            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {
                interruptInUseConnections: interruptInUseConnections
            }));
        }
        if (interruptInUseConnections) {
            process.nextTick(function () { return _this.interruptInUseConnections(oldGeneration); });
        }
        this.processWaitQueue();
    };
    /**
     * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.
     *
     * Only connections where `connection.generation <= minGeneration` are killed.
     */
    ConnectionPool.prototype.interruptInUseConnections = function (minGeneration) {
        for (var _i = 0, _a = this[kCheckedOut]; _i < _a.length; _i++) {
            var connection = _a[_i];
            if (connection.generation <= minGeneration) {
                connection.onError(new errors_1.PoolClearedOnNetworkError(this));
                this.checkIn(connection);
            }
        }
    };
    /** Close the pool */
    ConnectionPool.prototype.close = function () {
        if (this.closed) {
            return;
        }
        // immediately cancel any in-flight connections
        this[kCancellationToken].emit('cancel');
        // end the connection counter
        if (typeof this[kConnectionCounter]["return"] === 'function') {
            this[kConnectionCounter]["return"](undefined);
        }
        this[kPoolState] = exports.PoolState.closed;
        this.clearMinPoolSizeTimer();
        this.processWaitQueue();
        for (var _i = 0, _a = this[kConnections]; _i < _a.length; _i++) {
            var conn = _a[_i];
            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));
            conn.destroy();
        }
        this[kConnections].clear();
        this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));
    };
    /**
     * @internal
     * Reauthenticate a connection
     */
    ConnectionPool.prototype.reauthenticate = function (connection) {
        return __awaiter(this, void 0, Promise, function () {
            var authContext, credentials, resolvedCredentials, provider;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authContext = connection.authContext;
                        if (!authContext) {
                            throw new error_1.MongoRuntimeError('No auth context found on connection.');
                        }
                        credentials = authContext.credentials;
                        if (!credentials) {
                            throw new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate');
                        }
                        resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);
                        provider = this[kServer].topology.client.s.authProviders.getOrCreateProvider(resolvedCredentials.mechanism, resolvedCredentials.mechanismProperties);
                        if (!provider) {
                            throw new error_1.MongoMissingCredentialsError("Reauthenticate failed due to no auth provider for " + credentials.mechanism);
                        }
                        return [4 /*yield*/, provider.reauth(authContext)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /** Clear the min pool size timer */
    ConnectionPool.prototype.clearMinPoolSizeTimer = function () {
        var minPoolSizeTimer = this[kMinPoolSizeTimer];
        if (minPoolSizeTimer) {
            timers_1.clearTimeout(minPoolSizeTimer);
        }
    };
    ConnectionPool.prototype.destroyConnection = function (connection, reason) {
        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));
        // destroy the connection
        connection.destroy();
    };
    ConnectionPool.prototype.connectionIsStale = function (connection) {
        var serviceId = connection.serviceId;
        if (this.loadBalanced && serviceId) {
            var sid = serviceId.toHexString();
            var generation = this.serviceGenerations.get(sid);
            return connection.generation !== generation;
        }
        return connection.generation !== this[kGeneration];
    };
    ConnectionPool.prototype.connectionIsIdle = function (connection) {
        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);
    };
    /**
     * Destroys a connection if the connection is perished.
     *
     * @returns `true` if the connection was destroyed, `false` otherwise.
     */
    ConnectionPool.prototype.destroyConnectionIfPerished = function (connection) {
        var isStale = this.connectionIsStale(connection);
        var isIdle = this.connectionIsIdle(connection);
        if (!isStale && !isIdle && !connection.closed) {
            return false;
        }
        var reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';
        this.destroyConnection(connection, reason);
        return true;
    };
    ConnectionPool.prototype.createConnection = function (callback) {
        var _this = this;
        var connectOptions = __assign(__assign({}, this.options), { id: this[kConnectionCounter].next().value, generation: this[kGeneration], cancellationToken: this[kCancellationToken], mongoLogger: this.mongoLogger, authProviders: this[kServer].topology.client.s.authProviders });
        this[kPending]++;
        // This is our version of a "virtual" no-I/O connection as the spec requires
        var connectionCreatedTime = utils_1.now();
        this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, { id: connectOptions.id }));
        connect_1.connect(connectOptions).then(function (connection) {
            // The pool might have closed since we started trying to create a connection
            if (_this[kPoolState] !== exports.PoolState.ready) {
                _this[kPending]--;
                connection.destroy();
                callback(_this.closed ? new errors_1.PoolClosedError(_this) : new errors_1.PoolClearedError(_this));
                return;
            }
            var _loop_1 = function (event) {
                connection.on(event, function (e) { return _this.emit(event, e); });
            };
            // forward all events from the connection to the pool
            for (var _i = 0, _a = __spreadArrays(constants_1.APM_EVENTS, [connection_1.Connection.CLUSTER_TIME_RECEIVED]); _i < _a.length; _i++) {
                var event = _a[_i];
                _loop_1(event);
            }
            if (_this.loadBalanced) {
                connection.on(connection_1.Connection.PINNED, function (pinType) { return _this[kMetrics].markPinned(pinType); });
                connection.on(connection_1.Connection.UNPINNED, function (pinType) { return _this[kMetrics].markUnpinned(pinType); });
                var serviceId = connection.serviceId;
                if (serviceId) {
                    var generation = void 0;
                    var sid = serviceId.toHexString();
                    if ((generation = _this.serviceGenerations.get(sid))) {
                        connection.generation = generation;
                    }
                    else {
                        _this.serviceGenerations.set(sid, 0);
                        connection.generation = 0;
                    }
                }
            }
            connection.markAvailable();
            _this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(_this, connection, connectionCreatedTime));
            _this[kPending]--;
            callback(undefined, connection);
        }, function (error) {
            _this[kPending]--;
            _this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(_this, { id: connectOptions.id, serviceId: undefined }, 'error', 
            // TODO(NODE-5192): Remove this cast
            error));
            if (error instanceof error_1.MongoNetworkError || error instanceof error_1.MongoServerError) {
                error.connectionGeneration = connectOptions.generation;
            }
            callback(error !== null && error !== void 0 ? error : new error_1.MongoRuntimeError('Connection creation failed without error'));
        });
    };
    ConnectionPool.prototype.ensureMinPoolSize = function () {
        var _this = this;
        var minPoolSize = this.options.minPoolSize;
        if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {
            return;
        }
        this[kConnections].prune(function (connection) { return _this.destroyConnectionIfPerished(connection); });
        if (this.totalConnectionCount < minPoolSize &&
            this.pendingConnectionCount < this.options.maxConnecting) {
            // NOTE: ensureMinPoolSize should not try to get all the pending
            // connection permits because that potentially delays the availability of
            // the connection to a checkout request
            this.createConnection(function (err, connection) {
                if (err) {
                    _this[kServer].handleError(err);
                }
                if (!err && connection) {
                    _this[kConnections].push(connection);
                    process.nextTick(function () { return _this.processWaitQueue(); });
                }
                if (_this[kPoolState] === exports.PoolState.ready) {
                    timers_1.clearTimeout(_this[kMinPoolSizeTimer]);
                    _this[kMinPoolSizeTimer] = timers_1.setTimeout(function () { return _this.ensureMinPoolSize(); }, _this.options.minPoolSizeCheckFrequencyMS);
                }
            });
        }
        else {
            timers_1.clearTimeout(this[kMinPoolSizeTimer]);
            this[kMinPoolSizeTimer] = timers_1.setTimeout(function () { return _this.ensureMinPoolSize(); }, this.options.minPoolSizeCheckFrequencyMS);
        }
    };
    ConnectionPool.prototype.processWaitQueue = function () {
        var _this = this;
        if (this[kProcessingWaitQueue]) {
            return;
        }
        this[kProcessingWaitQueue] = true;
        while (this.waitQueueSize) {
            var waitQueueMember = this[kWaitQueue].first();
            if (!waitQueueMember) {
                this[kWaitQueue].shift();
                continue;
            }
            if (waitQueueMember[kCancelled]) {
                this[kWaitQueue].shift();
                continue;
            }
            if (this[kPoolState] !== exports.PoolState.ready) {
                var reason = this.closed ? 'poolClosed' : 'connectionError';
                var error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);
                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, waitQueueMember.checkoutTime, error));
                waitQueueMember.timeout.clear();
                this[kWaitQueue].shift();
                waitQueueMember.reject(error);
                continue;
            }
            if (!this.availableConnectionCount) {
                break;
            }
            var connection = this[kConnections].shift();
            if (!connection) {
                break;
            }
            if (!this.destroyConnectionIfPerished(connection)) {
                this[kCheckedOut].add(connection);
                this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));
                waitQueueMember.timeout.clear();
                this[kWaitQueue].shift();
                waitQueueMember.resolve(connection);
            }
        }
        var _a = this.options, maxPoolSize = _a.maxPoolSize, maxConnecting = _a.maxConnecting;
        var _loop_2 = function () {
            var waitQueueMember = this_1[kWaitQueue].shift();
            if (!waitQueueMember || waitQueueMember[kCancelled]) {
                return "continue";
            }
            this_1.createConnection(function (err, connection) {
                if (waitQueueMember[kCancelled]) {
                    if (!err && connection) {
                        _this[kConnections].push(connection);
                    }
                }
                else {
                    if (err) {
                        _this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, 
                        // TODO(NODE-5192): Remove this cast
                        new connection_pool_events_1.ConnectionCheckOutFailedEvent(_this, 'connectionError', waitQueueMember.checkoutTime, err));
                        waitQueueMember.reject(err);
                    }
                    else if (connection) {
                        _this[kCheckedOut].add(connection);
                        _this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(_this, connection, waitQueueMember.checkoutTime));
                        waitQueueMember.resolve(connection);
                    }
                    waitQueueMember.timeout.clear();
                }
                process.nextTick(function () { return _this.processWaitQueue(); });
            });
        };
        var this_1 = this;
        while (this.waitQueueSize > 0 &&
            this.pendingConnectionCount < maxConnecting &&
            (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {
            _loop_2();
        }
        this[kProcessingWaitQueue] = false;
    };
    /**
     * Emitted when the connection pool is created.
     * @event
     */
    ConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;
    /**
     * Emitted once when the connection pool is closed
     * @event
     */
    ConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;
    /**
     * Emitted each time the connection pool is cleared and it's generation incremented
     * @event
     */
    ConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;
    /**
     * Emitted each time the connection pool is marked ready
     * @event
     */
    ConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;
    /**
     * Emitted when a connection is created.
     * @event
     */
    ConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;
    /**
     * Emitted when a connection becomes established, and is ready to use
     * @event
     */
    ConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;
    /**
     * Emitted when a connection is closed
     * @event
     */
    ConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;
    /**
     * Emitted when an attempt to check out a connection begins
     * @event
     */
    ConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;
    /**
     * Emitted when an attempt to check out a connection fails
     * @event
     */
    ConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;
    /**
     * Emitted each time a connection is successfully checked out of the connection pool
     * @event
     */
    ConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;
    /**
     * Emitted each time a connection is successfully checked into the connection pool
     * @event
     */
    ConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;
    return ConnectionPool;
}(mongo_types_1.TypedEventEmitter));
exports.ConnectionPool = ConnectionPool;

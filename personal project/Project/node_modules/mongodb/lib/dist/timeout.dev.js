"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Timeout = exports.TimeoutError = void 0;

var timers_1 = require("timers");

var error_1 = require("./error");

var utils_1 = require("./utils");
/** @internal */


var TimeoutError =
/*#__PURE__*/
function (_Error) {
  _inherits(TimeoutError, _Error);

  _createClass(TimeoutError, [{
    key: "name",
    get: function get() {
      return 'TimeoutError';
    }
  }]);

  function TimeoutError(message, options) {
    _classCallCheck(this, TimeoutError);

    return _possibleConstructorReturn(this, _getPrototypeOf(TimeoutError).call(this, message, options));
  }

  _createClass(TimeoutError, null, [{
    key: "is",
    value: function is(error) {
      return error != null && _typeof(error) === 'object' && 'name' in error && error.name === 'TimeoutError';
    }
  }]);

  return TimeoutError;
}(_wrapNativeSuper(Error));

exports.TimeoutError = TimeoutError;
/**
 * @internal
 * This class is an abstraction over timeouts
 * The Timeout class can only be in the pending or rejected states. It is guaranteed not to resolve
 * if interacted with exclusively through its public API
 * */

var Timeout =
/*#__PURE__*/
function (_Promise) {
  _inherits(Timeout, _Promise);

  _createClass(Timeout, [{
    key: Symbol.toStringTag,
    get: function get() {
      return 'MongoDBTimeout';
    }
    /** Create a new timeout that expires in `duration` ms */

  }]);

  function Timeout() {
    var _this;

    var executor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
      return null;
    };
    var duration = arguments.length > 1 ? arguments[1] : undefined;
    var unref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, Timeout);

    var reject;

    if (duration < 0) {
      throw new error_1.MongoInvalidArgumentError('Cannot create a Timeout with a negative duration');
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Timeout).call(this, function (_, promiseReject) {
      reject = promiseReject;
      executor(utils_1.noop, promiseReject);
    }));
    _this.ended = null;
    _this.timedOut = false;
    _this.duration = duration;
    _this.start = Math.trunc(performance.now());

    if (_this.duration > 0) {
      _this.id = (0, timers_1.setTimeout)(function () {
        _this.ended = Math.trunc(performance.now());
        _this.timedOut = true;
        reject(new TimeoutError("Expired after ".concat(duration, "ms")));
      }, _this.duration);

      if (typeof _this.id.unref === 'function' && unref) {
        // Ensure we do not keep the Node.js event loop running
        _this.id.unref();
      }
    }

    return _this;
  }
  /**
   * Clears the underlying timeout. This method is idempotent
   */


  _createClass(Timeout, [{
    key: "clear",
    value: function clear() {
      (0, timers_1.clearTimeout)(this.id);
      this.id = undefined;
    }
  }], [{
    key: "expires",
    value: function expires(durationMS, unref) {
      return new Timeout(undefined, durationMS, unref);
    }
  }, {
    key: "is",
    value: function is(timeout) {
      return _typeof(timeout) === 'object' && timeout != null && Symbol.toStringTag in timeout && timeout[Symbol.toStringTag] === 'MongoDBTimeout' && 'then' in timeout && typeof timeout.then === 'function';
    }
  }]);

  return Timeout;
}(_wrapNativeSuper(Promise));

exports.Timeout = Timeout;
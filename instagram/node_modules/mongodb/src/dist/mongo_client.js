"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.MongoClient = exports.ServerApiVersion = void 0;
var fs_1 = require("fs");
var bson_1 = require("./bson");
var change_stream_1 = require("./change_stream");
var mongo_credentials_1 = require("./cmap/auth/mongo_credentials");
var providers_1 = require("./cmap/auth/providers");
var connection_string_1 = require("./connection_string");
var constants_1 = require("./constants");
var db_1 = require("./db");
var error_1 = require("./error");
var mongo_client_auth_providers_1 = require("./mongo_client_auth_providers");
var mongo_logger_1 = require("./mongo_logger");
var mongo_types_1 = require("./mongo_types");
var execute_operation_1 = require("./operations/execute_operation");
var run_command_1 = require("./operations/run_command");
var read_preference_1 = require("./read_preference");
var resource_management_1 = require("./resource_management");
var server_selection_1 = require("./sdam/server_selection");
var topology_1 = require("./sdam/topology");
var sessions_1 = require("./sessions");
var utils_1 = require("./utils");
/** @public */
exports.ServerApiVersion = Object.freeze({
    v1: '1'
});
/** @internal */
var kOptions = Symbol('options');
/**
 * The **MongoClient** class is a class that allows for making Connections to MongoDB.
 * @public
 *
 * @remarks
 * The programmatically provided options take precedence over the URI options.
 *
 * @example
 * ```ts
 * import { MongoClient } from 'mongodb';
 *
 * // Enable command monitoring for debugging
 * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });
 *
 * client.on('commandStarted', started => console.log(started));
 * client.db().collection('pets');
 * await client.insertOne({ name: 'spot', kind: 'dog' });
 * ```
 */
var MongoClient = /** @class */ (function (_super) {
    __extends(MongoClient, _super);
    function MongoClient(url, options) {
        var _this = _super.call(this) || this;
        _this[kOptions] = connection_string_1.parseOptions(url, _this, options);
        var shouldSetLogger = Object.values(_this[kOptions].mongoLoggerOptions.componentSeverities).some(function (value) { return value !== mongo_logger_1.SeverityLevel.OFF; });
        _this.mongoLogger = shouldSetLogger
            ? new mongo_logger_1.MongoLogger(_this[kOptions].mongoLoggerOptions)
            : undefined;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var client = _this;
        // The internal state
        _this.s = {
            url: url,
            bsonOptions: bson_1.resolveBSONOptions(_this[kOptions]),
            namespace: utils_1.ns('admin'),
            hasBeenClosed: false,
            sessionPool: new sessions_1.ServerSessionPool(_this),
            activeSessions: new Set(),
            authProviders: new mongo_client_auth_providers_1.MongoClientAuthProviders(),
            get options() {
                return client[kOptions];
            },
            get readConcern() {
                return client[kOptions].readConcern;
            },
            get writeConcern() {
                return client[kOptions].writeConcern;
            },
            get readPreference() {
                return client[kOptions].readPreference;
            },
            get isMongoClient() {
                return true;
            }
        };
        _this.checkForNonGenuineHosts();
        return _this;
    }
    /** @internal */
    MongoClient.prototype.asyncDispose = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.close()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /** @internal */
    MongoClient.prototype.checkForNonGenuineHosts = function () {
        var _a, _b;
        var documentDBHostnames = this[kOptions].hosts.filter(function (hostAddress) {
            return utils_1.isHostMatch(utils_1.DOCUMENT_DB_CHECK, hostAddress.host);
        });
        var srvHostIsDocumentDB = utils_1.isHostMatch(utils_1.DOCUMENT_DB_CHECK, this[kOptions].srvHost);
        var cosmosDBHostnames = this[kOptions].hosts.filter(function (hostAddress) {
            return utils_1.isHostMatch(utils_1.COSMOS_DB_CHECK, hostAddress.host);
        });
        var srvHostIsCosmosDB = utils_1.isHostMatch(utils_1.COSMOS_DB_CHECK, this[kOptions].srvHost);
        if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {
            (_a = this.mongoLogger) === null || _a === void 0 ? void 0 : _a.info('client', utils_1.DOCUMENT_DB_MSG);
        }
        else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {
            (_b = this.mongoLogger) === null || _b === void 0 ? void 0 : _b.info('client', utils_1.COSMOS_DB_MSG);
        }
    };
    Object.defineProperty(MongoClient.prototype, "options", {
        /** @see MongoOptions */
        get: function () {
            return Object.freeze(__assign({}, this[kOptions]));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MongoClient.prototype, "serverApi", {
        get: function () {
            return this[kOptions].serverApi && Object.freeze(__assign({}, this[kOptions].serverApi));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MongoClient.prototype, "monitorCommands", {
        /**
         * Intended for APM use only
         * @internal
         */
        get: function () {
            return this[kOptions].monitorCommands;
        },
        set: function (value) {
            this[kOptions].monitorCommands = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MongoClient.prototype, "autoEncrypter", {
        /** @internal */
        get: function () {
            return this[kOptions].autoEncrypter;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MongoClient.prototype, "readConcern", {
        get: function () {
            return this.s.readConcern;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MongoClient.prototype, "writeConcern", {
        get: function () {
            return this.s.writeConcern;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MongoClient.prototype, "readPreference", {
        get: function () {
            return this.s.readPreference;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MongoClient.prototype, "bsonOptions", {
        get: function () {
            return this.s.bsonOptions;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Connect to MongoDB using a url
     *
     * @see docs.mongodb.org/manual/reference/connection-string/
     */
    MongoClient.prototype.connect = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.connectionLock) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.connectionLock];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        _a.trys.push([2, , 4, 5]);
                        this.connectionLock = this._connect();
                        return [4 /*yield*/, this.connectionLock];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        // release
                        this.connectionLock = undefined;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/, this];
                }
            });
        });
    };
    /**
     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.
     * Locking is enforced by the connect method.
     *
     * @internal
     */
    MongoClient.prototype._connect = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return __awaiter(this, void 0, Promise, function () {
            var options, contents, hosts, _i, _l, _m, index, host, allowedHosts, isServiceAuth, _o, _p, host, _loop_1, this_1, _q, MONGO_CLIENT_EVENTS_1, event, topologyConnect;
            var _this = this;
            return __generator(this, function (_r) {
                switch (_r.label) {
                    case 0:
                        if (this.topology && this.topology.isConnected()) {
                            return [2 /*return*/, this];
                        }
                        options = this[kOptions];
                        if (!options.tls) return [3 /*break*/, 6];
                        if (!(typeof options.tlsCAFile === 'string')) return [3 /*break*/, 2];
                        (_a = options.ca) !== null && _a !== void 0 ? _a : ;
                        return [4 /*yield*/, fs_1.promises.readFile(options.tlsCAFile)];
                    case 1:
                        _r.sent();
                        _r.label = 2;
                    case 2:
                        if (!(typeof options.tlsCRLFile === 'string')) return [3 /*break*/, 4];
                        (_b = options.crl) !== null && _b !== void 0 ? _b : ;
                        return [4 /*yield*/, fs_1.promises.readFile(options.tlsCRLFile)];
                    case 3:
                        _r.sent();
                        _r.label = 4;
                    case 4:
                        if (!(typeof options.tlsCertificateKeyFile === 'string')) return [3 /*break*/, 6];
                        if (!(!options.key || !options.cert)) return [3 /*break*/, 6];
                        return [4 /*yield*/, fs_1.promises.readFile(options.tlsCertificateKeyFile)];
                    case 5:
                        contents = _r.sent();
                        (_c = options.key) !== null && _c !== void 0 ? _c : ;
                        contents;
                        (_d = options.cert) !== null && _d !== void 0 ? _d : ;
                        contents;
                        _r.label = 6;
                    case 6:
                        if (!(typeof options.srvHost === 'string')) return [3 /*break*/, 8];
                        return [4 /*yield*/, connection_string_1.resolveSRVRecord(options)];
                    case 7:
                        hosts = _r.sent();
                        for (_i = 0, _l = hosts.entries(); _i < _l.length; _i++) {
                            _m = _l[_i], index = _m[0], host = _m[1];
                            options.hosts[index] = host;
                        }
                        _r.label = 8;
                    case 8:
                        // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,
                        // but BEFORE we even attempt connecting with a potentially not allowed hostname
                        if (((_e = options.credentials) === null || _e === void 0 ? void 0 : _e.mechanism) === providers_1.AuthMechanism.MONGODB_OIDC) {
                            allowedHosts = ((_g = (_f = options.credentials) === null || _f === void 0 ? void 0 : _f.mechanismProperties) === null || _g === void 0 ? void 0 : _g.ALLOWED_HOSTS) || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;
                            isServiceAuth = !!((_j = (_h = options.credentials) === null || _h === void 0 ? void 0 : _h.mechanismProperties) === null || _j === void 0 ? void 0 : _j.ENVIRONMENT);
                            if (!isServiceAuth) {
                                for (_o = 0, _p = options.hosts; _o < _p.length; _o++) {
                                    host = _p[_o];
                                    if (!utils_1.hostMatchesWildcards(host.toHostPort().host, allowedHosts)) {
                                        throw new error_1.MongoInvalidArgumentError("Host '" + host + "' is not valid for OIDC authentication with ALLOWED_HOSTS of '" + allowedHosts.join(',') + "'");
                                    }
                                }
                            }
                        }
                        this.topology = new topology_1.Topology(this, options.hosts, options);
                        // Events can be emitted before initialization is complete so we have to
                        // save the reference to the topology on the client ASAP if the event handlers need to access it
                        this.topology.once(topology_1.Topology.OPEN, function () { return _this.emit('open', _this); });
                        _loop_1 = function (event) {
                            this_1.topology.on(event, function () {
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                return _this.emit.apply(_this, __spreadArrays([event], args));
                            });
                        };
                        this_1 = this;
                        for (_q = 0, MONGO_CLIENT_EVENTS_1 = constants_1.MONGO_CLIENT_EVENTS; _q < MONGO_CLIENT_EVENTS_1.length; _q++) {
                            event = MONGO_CLIENT_EVENTS_1[_q];
                            _loop_1(event);
                        }
                        topologyConnect = function () { return __awaiter(_this, void 0, void 0, function () {
                            var error_2;
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _c.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, ((_a = this.topology) === null || _a === void 0 ? void 0 : _a.connect(options))];
                                    case 1:
                                        _c.sent();
                                        return [3 /*break*/, 3];
                                    case 2:
                                        error_2 = _c.sent();
                                        (_b = this.topology) === null || _b === void 0 ? void 0 : _b.close();
                                        throw error_2;
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); };
                        if (!this.autoEncrypter) return [3 /*break*/, 12];
                        return [4 /*yield*/, ((_k = this.autoEncrypter) === null || _k === void 0 ? void 0 : _k.init())];
                    case 9:
                        _r.sent();
                        return [4 /*yield*/, topologyConnect()];
                    case 10:
                        _r.sent();
                        return [4 /*yield*/, options.encrypter.connectInternalClient()];
                    case 11:
                        _r.sent();
                        return [3 /*break*/, 14];
                    case 12: return [4 /*yield*/, topologyConnect()];
                    case 13:
                        _r.sent();
                        _r.label = 14;
                    case 14: return [2 /*return*/, this];
                }
            });
        });
    };
    /**
     * Cleans up client-side resources used by the MongoCLient and .  This includes:
     *
     * - Closes all open, unused connections (see note).
     * - Ends all in-use sessions with {@link ClientSession#endSession|ClientSession.endSession()}.
     * - Ends all unused sessions server-side.
     * - Cleans up any resources being used for auto encryption if auto encryption is enabled.
     *
     * @remarks Any in-progress operations are not killed and any connections used by in progress operations
     * will be cleaned up lazily as operations finish.
     *
     * @param force - Force close, emitting no events
     */
    MongoClient.prototype.close = function (force) {
        if (force === void 0) { force = false; }
        return __awaiter(this, void 0, Promise, function () {
            var activeSessionEnds, selector, topologyDescription, serverDescriptions, servers, endSessions, error_3, topology, encrypter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // There's no way to set hasBeenClosed back to false
                        Object.defineProperty(this.s, 'hasBeenClosed', {
                            value: true,
                            enumerable: true,
                            configurable: false,
                            writable: false
                        });
                        activeSessionEnds = Array.from(this.s.activeSessions, function (session) { return session.endSession(); });
                        this.s.activeSessions.clear();
                        return [4 /*yield*/, Promise.all(activeSessionEnds)];
                    case 1:
                        _a.sent();
                        if (this.topology == null) {
                            return [2 /*return*/];
                        }
                        selector = server_selection_1.readPreferenceServerSelector(read_preference_1.ReadPreference.primaryPreferred);
                        topologyDescription = this.topology.description;
                        serverDescriptions = Array.from(topologyDescription.servers.values());
                        servers = selector(topologyDescription, serverDescriptions);
                        if (!(servers.length !== 0)) return [3 /*break*/, 5];
                        endSessions = Array.from(this.s.sessionPool.sessions, function (_a) {
                            var id = _a.id;
                            return id;
                        });
                        if (!(endSessions.length !== 0)) return [3 /*break*/, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, execute_operation_1.executeOperation(this, new run_command_1.RunAdminCommandOperation({ endSessions: endSessions }, { readPreference: read_preference_1.ReadPreference.primaryPreferred, noResponse: true }))];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_3 = _a.sent();
                        utils_1.squashError(error_3);
                        return [3 /*break*/, 5];
                    case 5:
                        topology = this.topology;
                        this.topology = undefined;
                        topology.close();
                        encrypter = this[kOptions].encrypter;
                        if (!encrypter) return [3 /*break*/, 7];
                        return [4 /*yield*/, encrypter.close(this, force)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create a new Db instance sharing the current socket connections.
     *
     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.
     * @param options - Optional settings for Db construction
     */
    MongoClient.prototype.db = function (dbName, options) {
        options = options !== null && options !== void 0 ? options : {};
        // Default to db from connection string if not provided
        if (!dbName) {
            dbName = this.options.dbName;
        }
        // Copy the options and add out internal override of the not shared flag
        var finalOptions = Object.assign({}, this[kOptions], options);
        // Return the db object
        var db = new db_1.Db(this, dbName, finalOptions);
        // Return the database
        return db;
    };
    /**
     * Connect to MongoDB using a url
     *
     * @remarks
     * The programmatically provided options take precedence over the URI options.
     *
     * @see https://www.mongodb.com/docs/manual/reference/connection-string/
     */
    MongoClient.connect = function (url, options) {
        return __awaiter(this, void 0, Promise, function () {
            var client;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = new this(url, options);
                        return [4 /*yield*/, client.connect()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Creates a new ClientSession. When using the returned session in an operation
     * a corresponding ServerSession will be created.
     *
     * @remarks
     * A ClientSession instance may only be passed to operations being performed on the same
     * MongoClient it was started from.
     */
    MongoClient.prototype.startSession = function (options) {
        var _this = this;
        var session = new sessions_1.ClientSession(this, this.s.sessionPool, __assign({ explicit: true }, options), this[kOptions]);
        this.s.activeSessions.add(session);
        session.once('ended', function () {
            _this.s.activeSessions["delete"](session);
        });
        return session;
    };
    MongoClient.prototype.withSession = function (optionsOrExecutor, executor) {
        return __awaiter(this, void 0, Promise, function () {
            var options, withSessionCallback, session, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = __assign({ 
                            // Always define an owner
                            owner: Symbol() }, (typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {}));
                        withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;
                        if (withSessionCallback == null) {
                            throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');
                        }
                        session = this.startSession(options);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 7]);
                        return [4 /*yield*/, withSessionCallback(session)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, session.endSession()];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_4 = _a.sent();
                        utils_1.squashError(error_4);
                        return [3 /*break*/, 6];
                    case 6: return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create a new Change Stream, watching for new changes (insertions, updates,
     * replacements, deletions, and invalidations) in this cluster. Will ignore all
     * changes to system collections, as well as the local, admin, and config databases.
     *
     * @remarks
     * watch() accepts two generic arguments for distinct use cases:
     * - The first is to provide the schema that may be defined for all the data within the current cluster
     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument
     *
     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.
     * @param options - Optional settings for the command
     * @typeParam TSchema - Type of the data being detected by the change stream
     * @typeParam TChange - Type of the whole change stream document emitted
     */
    MongoClient.prototype.watch = function (pipeline, options) {
        if (pipeline === void 0) { pipeline = []; }
        if (options === void 0) { options = {}; }
        // Allow optionally not specifying a pipeline
        if (!Array.isArray(pipeline)) {
            options = pipeline;
            pipeline = [];
        }
        return new change_stream_1.ChangeStream(this, pipeline, utils_1.resolveOptions(this, options));
    };
    return MongoClient;
}(mongo_types_1.TypedEventEmitter));
exports.MongoClient = MongoClient;
resource_management_1.configureResourceManagement(MongoClient.prototype);

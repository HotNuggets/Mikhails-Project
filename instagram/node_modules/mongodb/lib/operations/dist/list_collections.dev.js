"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListCollectionsOperation = void 0;

var responses_1 = require("../cmap/wire_protocol/responses");

var utils_1 = require("../utils");

var command_1 = require("./command");

var operation_1 = require("./operation");
/** @internal */


var ListCollectionsOperation =
/*#__PURE__*/
function (_command_1$CommandOpe) {
  _inherits(ListCollectionsOperation, _command_1$CommandOpe);

  function ListCollectionsOperation(db, filter, options) {
    var _this;

    _classCallCheck(this, ListCollectionsOperation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListCollectionsOperation).call(this, db, options));
    _this.options = _objectSpread({}, options);
    delete _this.options.writeConcern;
    _this.db = db;
    _this.filter = filter;
    _this.nameOnly = !!_this.options.nameOnly;
    _this.authorizedCollections = !!_this.options.authorizedCollections;

    if (typeof _this.options.batchSize === 'number') {
      _this.batchSize = _this.options.batchSize;
    }

    return _this;
  }

  _createClass(ListCollectionsOperation, [{
    key: "execute",
    value: function execute(server, session) {
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(ListCollectionsOperation.prototype), "executeCommand", this).call(this, server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)), responses_1.CursorResponse));

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
    /* This is here for the purpose of unit testing the final command that gets sent. */

  }, {
    key: "generateCommand",
    value: function generateCommand(wireVersion) {
      var command = {
        listCollections: 1,
        filter: this.filter,
        cursor: this.batchSize ? {
          batchSize: this.batchSize
        } : {},
        nameOnly: this.nameOnly,
        authorizedCollections: this.authorizedCollections
      }; // we check for undefined specifically here to allow falsy values
      // eslint-disable-next-line no-restricted-syntax

      if (wireVersion >= 9 && this.options.comment !== undefined) {
        command.comment = this.options.comment;
      }

      return command;
    }
  }, {
    key: "commandName",
    get: function get() {
      return 'listCollections';
    }
  }]);

  return ListCollectionsOperation;
}(command_1.CommandOperation);

exports.ListCollectionsOperation = ListCollectionsOperation;
(0, operation_1.defineAspects)(ListCollectionsOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);
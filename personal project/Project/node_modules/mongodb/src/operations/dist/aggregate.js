"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;
var responses_1 = require("../cmap/wire_protocol/responses");
var error_1 = require("../error");
var utils_1 = require("../utils");
var write_concern_1 = require("../write_concern");
var command_1 = require("./command");
var operation_1 = require("./operation");
/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
exports.DB_AGGREGATE_COLLECTION = 1;
var MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;
/** @internal */
var AggregateOperation = /** @class */ (function (_super) {
    __extends(AggregateOperation, _super);
    function AggregateOperation(ns, pipeline, options) {
        var _this = _super.call(this, undefined, __assign(__assign({}, options), { dbName: ns.db })) || this;
        _this.options = __assign({}, options);
        // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION
        _this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;
        _this.pipeline = pipeline;
        // determine if we have a write stage, override read preference if so
        _this.hasWriteStage = false;
        if (typeof (options === null || options === void 0 ? void 0 : options.out) === 'string') {
            _this.pipeline = _this.pipeline.concat({ $out: options.out });
            _this.hasWriteStage = true;
        }
        else if (pipeline.length > 0) {
            var finalStage = pipeline[pipeline.length - 1];
            if (finalStage.$out || finalStage.$merge) {
                _this.hasWriteStage = true;
            }
        }
        if (_this.hasWriteStage) {
            _this.trySecondaryWrite = true;
        }
        else {
            delete _this.options.writeConcern;
        }
        if (_this.explain && _this.writeConcern) {
            throw new error_1.MongoInvalidArgumentError('Option "explain" cannot be used on an aggregate call with writeConcern');
        }
        if ((options === null || options === void 0 ? void 0 : options.cursor) != null && typeof options.cursor !== 'object') {
            throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');
        }
        return _this;
    }
    Object.defineProperty(AggregateOperation.prototype, "commandName", {
        get: function () {
            return 'aggregate';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateOperation.prototype, "canRetryRead", {
        get: function () {
            return !this.hasWriteStage;
        },
        enumerable: false,
        configurable: true
    });
    AggregateOperation.prototype.addToPipeline = function (stage) {
        this.pipeline.push(stage);
    };
    AggregateOperation.prototype.execute = function (server, session) {
        return __awaiter(this, void 0, Promise, function () {
            var options, serverWireVersion, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = this.options;
                        serverWireVersion = utils_1.maxWireVersion(server);
                        command = { aggregate: this.target, pipeline: this.pipeline };
                        if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {
                            this.readConcern = undefined;
                        }
                        if (this.hasWriteStage && this.writeConcern) {
                            write_concern_1.WriteConcern.apply(command, this.writeConcern);
                        }
                        if (options.bypassDocumentValidation === true) {
                            command.bypassDocumentValidation = options.bypassDocumentValidation;
                        }
                        if (typeof options.allowDiskUse === 'boolean') {
                            command.allowDiskUse = options.allowDiskUse;
                        }
                        if (options.hint) {
                            command.hint = options.hint;
                        }
                        if (options.let) {
                            command.let = options.let;
                        }
                        // we check for undefined specifically here to allow falsy values
                        // eslint-disable-next-line no-restricted-syntax
                        if (options.comment !== undefined) {
                            command.comment = options.comment;
                        }
                        command.cursor = options.cursor || {};
                        if (options.batchSize && !this.hasWriteStage) {
                            command.cursor.batchSize = options.batchSize;
                        }
                        return [4 /*yield*/, _super.prototype.executeCommand.call(this, server, session, command, this.explain ? responses_1.ExplainedCursorResponse : responses_1.CursorResponse)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return AggregateOperation;
}(command_1.CommandOperation));
exports.AggregateOperation = AggregateOperation;
operation_1.defineAspects(AggregateOperation, [
    operation_1.Aspect.READ_OPERATION,
    operation_1.Aspect.RETRYABLE,
    operation_1.Aspect.EXPLAINABLE,
    operation_1.Aspect.CURSOR_CREATING
]);

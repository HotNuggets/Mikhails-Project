"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.SrvPoller = exports.SrvPollingEvent = void 0;
var dns = require("dns");
var timers_1 = require("timers");
var error_1 = require("../error");
var mongo_types_1 = require("../mongo_types");
var utils_1 = require("../utils");
/**
 * @internal
 * @category Event
 */
var SrvPollingEvent = /** @class */ (function () {
    function SrvPollingEvent(srvRecords) {
        this.srvRecords = srvRecords;
    }
    SrvPollingEvent.prototype.hostnames = function () {
        return new Set(this.srvRecords.map(function (r) { return utils_1.HostAddress.fromSrvRecord(r).toString(); }));
    };
    return SrvPollingEvent;
}());
exports.SrvPollingEvent = SrvPollingEvent;
/** @internal */
var SrvPoller = /** @class */ (function (_super) {
    __extends(SrvPoller, _super);
    function SrvPoller(options) {
        var _a, _b, _c;
        var _this = _super.call(this) || this;
        if (!options || !options.srvHost) {
            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');
        }
        _this.srvHost = options.srvHost;
        _this.srvMaxHosts = (_a = options.srvMaxHosts) !== null && _a !== void 0 ? _a : 0;
        _this.srvServiceName = (_b = options.srvServiceName) !== null && _b !== void 0 ? _b : 'mongodb';
        _this.rescanSrvIntervalMS = 60000;
        _this.heartbeatFrequencyMS = (_c = options.heartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 10000;
        _this.haMode = false;
        _this.generation = 0;
        _this._timeout = undefined;
        return _this;
    }
    Object.defineProperty(SrvPoller.prototype, "srvAddress", {
        get: function () {
            return "_" + this.srvServiceName + "._tcp." + this.srvHost;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SrvPoller.prototype, "intervalMS", {
        get: function () {
            return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;
        },
        enumerable: false,
        configurable: true
    });
    SrvPoller.prototype.start = function () {
        if (!this._timeout) {
            this.schedule();
        }
    };
    SrvPoller.prototype.stop = function () {
        if (this._timeout) {
            timers_1.clearTimeout(this._timeout);
            this.generation += 1;
            this._timeout = undefined;
        }
    };
    // TODO(NODE-4994): implement new logging logic for SrvPoller failures
    SrvPoller.prototype.schedule = function () {
        var _this = this;
        if (this._timeout) {
            timers_1.clearTimeout(this._timeout);
        }
        this._timeout = timers_1.setTimeout(function () {
            _this._poll().then(undefined, utils_1.squashError);
        }, this.intervalMS);
    };
    SrvPoller.prototype.success = function (srvRecords) {
        this.haMode = false;
        this.schedule();
        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));
    };
    SrvPoller.prototype.failure = function () {
        this.haMode = true;
        this.schedule();
    };
    SrvPoller.prototype._poll = function () {
        return __awaiter(this, void 0, Promise, function () {
            var generation, srvRecords, _a, finalAddresses, _i, srvRecords_1, record;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        generation = this.generation;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, dns.promises.resolveSrv(this.srvAddress)];
                    case 2:
                        srvRecords = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        this.failure();
                        return [2 /*return*/];
                    case 4:
                        if (generation !== this.generation) {
                            return [2 /*return*/];
                        }
                        finalAddresses = [];
                        for (_i = 0, srvRecords_1 = srvRecords; _i < srvRecords_1.length; _i++) {
                            record = srvRecords_1[_i];
                            if (utils_1.matchesParentDomain(record.name, this.srvHost)) {
                                finalAddresses.push(record);
                            }
                        }
                        if (!finalAddresses.length) {
                            this.failure();
                            return [2 /*return*/];
                        }
                        this.success(finalAddresses);
                        return [2 /*return*/];
                }
            });
        });
    };
    /** @event */
    SrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';
    return SrvPoller;
}(mongo_types_1.TypedEventEmitter));
exports.SrvPoller = SrvPoller;

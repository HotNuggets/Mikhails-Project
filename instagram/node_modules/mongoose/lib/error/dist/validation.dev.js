/*!
 * Module requirements
 */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MongooseError = require('./mongooseError');

var getConstructorName = require('../helpers/getConstructorName');

var util = require('util');

var combinePathErrors = require('../helpers/error/combinePathErrors');
/**
 * Document Validation Error
 *
 * @api private
 * @param {Document} [instance]
 * @inherits MongooseError
 */


var ValidationError =
/*#__PURE__*/
function (_MongooseError) {
  _inherits(ValidationError, _MongooseError);

  function ValidationError(instance) {
    var _this;

    _classCallCheck(this, ValidationError);

    var _message;

    if (getConstructorName(instance) === 'model') {
      _message = instance.constructor.modelName + ' validation failed';
    } else {
      _message = 'Validation failed';
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValidationError).call(this, _message));
    _this.errors = {};
    _this._message = _message;

    if (instance) {
      instance.$errors = _this.errors;
    }

    return _this;
  }
  /**
   * Console.log helper
   */


  _createClass(ValidationError, [{
    key: "toString",
    value: function toString() {
      return this.name + ': ' + combinePathErrors(this);
    }
    /**
     * inspect helper
     * @api private
     */

  }, {
    key: "inspect",
    value: function inspect() {
      return Object.assign(new Error(this.message), this);
    }
    /**
    * add message
    * @param {String} path
    * @param {String|Error} error
    * @api private
    */

  }, {
    key: "addError",
    value: function addError(path, error) {
      if (error instanceof ValidationError) {
        var errors = error.errors;

        for (var _i = 0, _Object$keys = Object.keys(errors); _i < _Object$keys.length; _i++) {
          var errorPath = _Object$keys[_i];
          this.addError("".concat(path, ".").concat(errorPath), errors[errorPath]);
        }

        return;
      }

      this.errors[path] = error;
      this.message = this._message + ': ' + combinePathErrors(this);
    }
  }]);

  return ValidationError;
}(MongooseError);

if (util.inspect.custom) {
  // Avoid Node deprecation warning DEP0079
  ValidationError.prototype[util.inspect.custom] = ValidationError.prototype.inspect;
}
/**
 * Helper for JSON.stringify
 * Ensure `name` and `message` show up in toJSON output re: gh-9847
 * @api private
 */


Object.defineProperty(ValidationError.prototype, 'toJSON', {
  enumerable: false,
  writable: false,
  configurable: true,
  value: function value() {
    return Object.assign({}, this, {
      name: this.name,
      message: this.message
    });
  }
});
Object.defineProperty(ValidationError.prototype, 'name', {
  value: 'ValidationError'
});
/*!
 * Module exports
 */

module.exports = ValidationError;
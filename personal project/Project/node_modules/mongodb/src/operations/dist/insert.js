"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;
var error_1 = require("../error");
var utils_1 = require("../utils");
var write_concern_1 = require("../write_concern");
var bulk_write_1 = require("./bulk_write");
var command_1 = require("./command");
var operation_1 = require("./operation");
/** @internal */
var InsertOperation = /** @class */ (function (_super) {
    __extends(InsertOperation, _super);
    function InsertOperation(ns, documents, options) {
        var _a;
        var _this = _super.call(this, undefined, options) || this;
        _this.options = __assign(__assign({}, options), { checkKeys: (_a = options.checkKeys) !== null && _a !== void 0 ? _a : false });
        _this.ns = ns;
        _this.documents = documents;
        return _this;
    }
    Object.defineProperty(InsertOperation.prototype, "commandName", {
        get: function () {
            return 'insert';
        },
        enumerable: false,
        configurable: true
    });
    InsertOperation.prototype.execute = function (server, session) {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var options, ordered, command;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = (_a = this.options) !== null && _a !== void 0 ? _a : {};
                        ordered = typeof options.ordered === 'boolean' ? options.ordered : true;
                        command = {
                            insert: this.ns.collection,
                            documents: this.documents,
                            ordered: ordered
                        };
                        if (typeof options.bypassDocumentValidation === 'boolean') {
                            command.bypassDocumentValidation = options.bypassDocumentValidation;
                        }
                        // we check for undefined specifically here to allow falsy values
                        // eslint-disable-next-line no-restricted-syntax
                        if (options.comment !== undefined) {
                            command.comment = options.comment;
                        }
                        return [4 /*yield*/, _super.prototype.executeCommand.call(this, server, session, command)];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    return InsertOperation;
}(command_1.CommandOperation));
exports.InsertOperation = InsertOperation;
var InsertOneOperation = /** @class */ (function (_super) {
    __extends(InsertOneOperation, _super);
    function InsertOneOperation(collection, doc, options) {
        return _super.call(this, collection.s.namespace, utils_1.maybeAddIdToDocuments(collection, [doc], options), options) || this;
    }
    InsertOneOperation.prototype.execute = function (server, session) {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, _super.prototype.execute.call(this, server, session)];
                    case 1:
                        res = _b.sent();
                        if (res.code)
                            throw new error_1.MongoServerError(res);
                        if (res.writeErrors) {
                            // This should be a WriteError but we can't change it now because of error hierarchy
                            throw new error_1.MongoServerError(res.writeErrors[0]);
                        }
                        return [2 /*return*/, {
                                acknowledged: ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0,
                                insertedId: this.documents[0]._id
                            }];
                }
            });
        });
    };
    return InsertOneOperation;
}(InsertOperation));
exports.InsertOneOperation = InsertOneOperation;
/** @internal */
var InsertManyOperation = /** @class */ (function (_super) {
    __extends(InsertManyOperation, _super);
    function InsertManyOperation(collection, docs, options) {
        var _this = _super.call(this, options) || this;
        if (!Array.isArray(docs)) {
            throw new error_1.MongoInvalidArgumentError('Argument "docs" must be an array of documents');
        }
        _this.options = options;
        _this.collection = collection;
        _this.docs = docs;
        return _this;
    }
    Object.defineProperty(InsertManyOperation.prototype, "commandName", {
        get: function () {
            return 'insert';
        },
        enumerable: false,
        configurable: true
    });
    InsertManyOperation.prototype.execute = function (server, session) {
        return __awaiter(this, void 0, Promise, function () {
            var coll, options, writeConcern, bulkWriteOperation, res, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        coll = this.collection;
                        options = __assign(__assign(__assign({}, this.options), this.bsonOptions), { readPreference: this.readPreference });
                        writeConcern = write_concern_1.WriteConcern.fromOptions(options);
                        bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, this.docs.map(function (document) { return ({
                            insertOne: { document: document }
                        }); }), options);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, bulkWriteOperation.execute(server, session)];
                    case 2:
                        res = _a.sent();
                        return [2 /*return*/, {
                                acknowledged: (writeConcern === null || writeConcern === void 0 ? void 0 : writeConcern.w) !== 0,
                                insertedCount: res.insertedCount,
                                insertedIds: res.insertedIds
                            }];
                    case 3:
                        err_1 = _a.sent();
                        if (err_1 && err_1.message === 'Operation must be an object with an operation key') {
                            throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');
                        }
                        throw err_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return InsertManyOperation;
}(operation_1.AbstractOperation));
exports.InsertManyOperation = InsertManyOperation;
operation_1.defineAspects(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);
operation_1.defineAspects(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);
operation_1.defineAspects(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);

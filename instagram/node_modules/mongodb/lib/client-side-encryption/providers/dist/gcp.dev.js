"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadGCPCredentials = loadGCPCredentials;

var deps_1 = require("../../deps");
/** @internal */


function loadGCPCredentials(kmsProviders) {
  var gcpMetadata, _ref, accessToken;

  return regeneratorRuntime.async(function loadGCPCredentials$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          gcpMetadata = (0, deps_1.getGcpMetadata)();

          if (!('kModuleError' in gcpMetadata)) {
            _context.next = 3;
            break;
          }

          return _context.abrupt("return", kmsProviders);

        case 3:
          _context.next = 5;
          return regeneratorRuntime.awrap(gcpMetadata.instance({
            property: 'service-accounts/default/token'
          }));

        case 5:
          _ref = _context.sent;
          accessToken = _ref.access_token;
          return _context.abrupt("return", _objectSpread({}, kmsProviders, {
            gcp: {
              accessToken: accessToken
            }
          }));

        case 8:
        case "end":
          return _context.stop();
      }
    }
  });
}
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KillCursorsOperation = void 0;

var error_1 = require("../error");

var utils_1 = require("../utils");

var operation_1 = require("./operation");

var KillCursorsOperation =
/*#__PURE__*/
function (_operation_1$Abstract) {
  _inherits(KillCursorsOperation, _operation_1$Abstract);

  function KillCursorsOperation(cursorId, ns, server, options) {
    var _this;

    _classCallCheck(this, KillCursorsOperation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(KillCursorsOperation).call(this, options));
    _this.ns = ns;
    _this.cursorId = cursorId;
    _this.server = server;
    return _this;
  }

  _createClass(KillCursorsOperation, [{
    key: "execute",
    value: function execute(server, session) {
      var killCursors, killCursorsCommand;
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(server !== this.server)) {
                _context.next = 2;
                break;
              }

              throw new error_1.MongoRuntimeError('Killcursor must run on the same server operation began on');

            case 2:
              killCursors = this.ns.collection;

              if (!(killCursors == null)) {
                _context.next = 5;
                break;
              }

              throw new error_1.MongoRuntimeError('A collection name must be determined before killCursors');

            case 5:
              killCursorsCommand = {
                killCursors: killCursors,
                cursors: [this.cursorId]
              };
              _context.prev = 6;
              _context.next = 9;
              return regeneratorRuntime.awrap(server.command(this.ns, killCursorsCommand, {
                session: session
              }));

            case 9:
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](6);
              // The driver should never emit errors from killCursors, this is spec-ed behavior
              (0, utils_1.squashError)(_context.t0);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[6, 11]]);
    }
  }, {
    key: "commandName",
    get: function get() {
      return 'killCursors';
    }
  }]);

  return KillCursorsOperation;
}(operation_1.AbstractOperation);

exports.KillCursorsOperation = KillCursorsOperation;
(0, operation_1.defineAspects)(KillCursorsOperation, [operation_1.Aspect.MUST_SELECT_SAME_SERVER]);
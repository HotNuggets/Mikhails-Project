"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptAzureKMSRequestError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = void 0;
var error_1 = require("../error");
/**
 * @public
 * An error indicating that something went wrong specifically with MongoDB Client Encryption
 */
var MongoCryptError = /** @class */ (function (_super) {
    __extends(MongoCryptError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoCryptError(message, options) {
        if (options === void 0) { options = {}; }
        return _super.call(this, message, options) || this;
    }
    Object.defineProperty(MongoCryptError.prototype, "name", {
        get: function () {
            return 'MongoCryptError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoCryptError;
}(error_1.MongoError));
exports.MongoCryptError = MongoCryptError;
/**
 * @public
 *
 * An error indicating an invalid argument was provided to an encryption API.
 */
var MongoCryptInvalidArgumentError = /** @class */ (function (_super) {
    __extends(MongoCryptInvalidArgumentError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoCryptInvalidArgumentError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoCryptInvalidArgumentError.prototype, "name", {
        get: function () {
            return 'MongoCryptInvalidArgumentError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoCryptInvalidArgumentError;
}(MongoCryptError));
exports.MongoCryptInvalidArgumentError = MongoCryptInvalidArgumentError;
/**
 * @public
 * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys
 */
var MongoCryptCreateDataKeyError = /** @class */ (function (_super) {
    __extends(MongoCryptCreateDataKeyError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoCryptCreateDataKeyError(encryptedFields, _a) {
        var cause = _a.cause;
        var _this = _super.call(this, "Unable to complete creating data keys: " + cause.message, { cause: cause }) || this;
        _this.encryptedFields = encryptedFields;
        return _this;
    }
    Object.defineProperty(MongoCryptCreateDataKeyError.prototype, "name", {
        get: function () {
            return 'MongoCryptCreateDataKeyError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoCryptCreateDataKeyError;
}(MongoCryptError));
exports.MongoCryptCreateDataKeyError = MongoCryptCreateDataKeyError;
/**
 * @public
 * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection
 */
var MongoCryptCreateEncryptedCollectionError = /** @class */ (function (_super) {
    __extends(MongoCryptCreateEncryptedCollectionError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoCryptCreateEncryptedCollectionError(encryptedFields, _a) {
        var cause = _a.cause;
        var _this = _super.call(this, "Unable to create collection: " + cause.message, { cause: cause }) || this;
        _this.encryptedFields = encryptedFields;
        return _this;
    }
    Object.defineProperty(MongoCryptCreateEncryptedCollectionError.prototype, "name", {
        get: function () {
            return 'MongoCryptCreateEncryptedCollectionError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoCryptCreateEncryptedCollectionError;
}(MongoCryptError));
exports.MongoCryptCreateEncryptedCollectionError = MongoCryptCreateEncryptedCollectionError;
/**
 * @public
 * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.
 */
var MongoCryptAzureKMSRequestError = /** @class */ (function (_super) {
    __extends(MongoCryptAzureKMSRequestError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoCryptAzureKMSRequestError(message, body) {
        var _this = _super.call(this, message) || this;
        _this.body = body;
        return _this;
    }
    Object.defineProperty(MongoCryptAzureKMSRequestError.prototype, "name", {
        get: function () {
            return 'MongoCryptAzureKMSRequestError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoCryptAzureKMSRequestError;
}(MongoCryptError));
exports.MongoCryptAzureKMSRequestError = MongoCryptAzureKMSRequestError;
/** @public */
var MongoCryptKMSRequestNetworkTimeoutError = /** @class */ (function (_super) {
    __extends(MongoCryptKMSRequestNetworkTimeoutError, _super);
    function MongoCryptKMSRequestNetworkTimeoutError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MongoCryptKMSRequestNetworkTimeoutError.prototype, "name", {
        get: function () {
            return 'MongoCryptKMSRequestNetworkTimeoutError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoCryptKMSRequestNetworkTimeoutError;
}(MongoCryptError));
exports.MongoCryptKMSRequestNetworkTimeoutError = MongoCryptKMSRequestNetworkTimeoutError;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.Encrypter = void 0;
var util_1 = require("util");
var auto_encrypter_1 = require("./client-side-encryption/auto_encrypter");
var constants_1 = require("./constants");
var deps_1 = require("./deps");
var error_1 = require("./error");
var mongo_client_1 = require("./mongo_client");
/** @internal */
var kInternalClient = Symbol('internalClient');
/** @internal */
var Encrypter = /** @class */ (function () {
    function Encrypter(client, uri, options) {
        if (typeof options.autoEncryption !== 'object') {
            throw new error_1.MongoInvalidArgumentError('Option "autoEncryption" must be specified');
        }
        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.
        this[kInternalClient] = null;
        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;
        this.needsConnecting = false;
        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {
            options.autoEncryption.keyVaultClient = client;
        }
        else if (options.autoEncryption.keyVaultClient == null) {
            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);
        }
        if (this.bypassAutoEncryption) {
            options.autoEncryption.metadataClient = undefined;
        }
        else if (options.maxPoolSize === 0) {
            options.autoEncryption.metadataClient = client;
        }
        else {
            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);
        }
        if (options.proxyHost) {
            options.autoEncryption.proxyOptions = {
                proxyHost: options.proxyHost,
                proxyPort: options.proxyPort,
                proxyUsername: options.proxyUsername,
                proxyPassword: options.proxyPassword
            };
        }
        this.autoEncrypter = new auto_encrypter_1.AutoEncrypter(client, options.autoEncryption);
    }
    Encrypter.prototype.getInternalClient = function (client, uri, options) {
        // TODO(NODE-4144): Remove new variable for type narrowing
        var internalClient = this[kInternalClient];
        if (internalClient == null) {
            var clonedOptions = {};
            for (var _i = 0, _a = __spreadArrays(Object.getOwnPropertyNames(options), Object.getOwnPropertySymbols(options)); _i < _a.length; _i++) {
                var key = _a[_i];
                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))
                    continue;
                Reflect.set(clonedOptions, key, Reflect.get(options, key));
            }
            clonedOptions.minPoolSize = 0;
            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);
            this[kInternalClient] = internalClient;
            for (var _b = 0, MONGO_CLIENT_EVENTS_1 = constants_1.MONGO_CLIENT_EVENTS; _b < MONGO_CLIENT_EVENTS_1.length; _b++) {
                var eventName = MONGO_CLIENT_EVENTS_1[_b];
                for (var _c = 0, _d = client.listeners(eventName); _c < _d.length; _c++) {
                    var listener = _d[_c];
                    internalClient.on(eventName, listener);
                }
            }
            client.on('newListener', function (eventName, listener) {
                internalClient === null || internalClient === void 0 ? void 0 : internalClient.on(eventName, listener);
            });
            this.needsConnecting = true;
        }
        return internalClient;
    };
    Encrypter.prototype.connectInternalClient = function () {
        return __awaiter(this, void 0, Promise, function () {
            var internalClient;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        internalClient = this[kInternalClient];
                        if (!(this.needsConnecting && internalClient != null)) return [3 /*break*/, 2];
                        this.needsConnecting = false;
                        return [4 /*yield*/, internalClient.connect()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    Encrypter.prototype.closeCallback = function (client, force, callback) {
        util_1.callbackify(this.close.bind(this))(client, force, callback);
    };
    Encrypter.prototype.close = function (client, force) {
        return __awaiter(this, void 0, Promise, function () {
            var error, autoEncrypterError_1, internalClient;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.autoEncrypter.teardown(force)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        autoEncrypterError_1 = _a.sent();
                        error = autoEncrypterError_1;
                        return [3 /*break*/, 3];
                    case 3:
                        internalClient = this[kInternalClient];
                        if (!(internalClient != null && client !== internalClient)) return [3 /*break*/, 5];
                        return [4 /*yield*/, internalClient.close(force)];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5:
                        if (error != null) {
                            throw error;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Encrypter.checkForMongoCrypt = function () {
        var mongodbClientEncryption = deps_1.getMongoDBClientEncryption();
        if ('kModuleError' in mongodbClientEncryption) {
            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +
                'Please add `mongodb-client-encryption` as a dependency of your project', {
                cause: mongodbClientEncryption['kModuleError'],
                dependencyName: 'mongodb-client-encryption'
            });
        }
    };
    return Encrypter;
}());
exports.Encrypter = Encrypter;

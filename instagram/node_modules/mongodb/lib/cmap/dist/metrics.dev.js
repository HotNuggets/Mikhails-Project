"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectionPoolMetrics = void 0;
/** @internal */

var ConnectionPoolMetrics =
/*#__PURE__*/
function () {
  function ConnectionPoolMetrics() {
    _classCallCheck(this, ConnectionPoolMetrics);

    this.txnConnections = 0;
    this.cursorConnections = 0;
    this.otherConnections = 0;
  }
  /**
   * Mark a connection as pinned for a specific operation.
   */


  _createClass(ConnectionPoolMetrics, [{
    key: "markPinned",
    value: function markPinned(pinType) {
      if (pinType === ConnectionPoolMetrics.TXN) {
        this.txnConnections += 1;
      } else if (pinType === ConnectionPoolMetrics.CURSOR) {
        this.cursorConnections += 1;
      } else {
        this.otherConnections += 1;
      }
    }
    /**
     * Unmark a connection as pinned for an operation.
     */

  }, {
    key: "markUnpinned",
    value: function markUnpinned(pinType) {
      if (pinType === ConnectionPoolMetrics.TXN) {
        this.txnConnections -= 1;
      } else if (pinType === ConnectionPoolMetrics.CURSOR) {
        this.cursorConnections -= 1;
      } else {
        this.otherConnections -= 1;
      }
    }
    /**
     * Return information about the cmap metrics as a string.
     */

  }, {
    key: "info",
    value: function info(maxPoolSize) {
      return 'Timed out while checking out a connection from connection pool: ' + "maxPoolSize: ".concat(maxPoolSize, ", ") + "connections in use by cursors: ".concat(this.cursorConnections, ", ") + "connections in use by transactions: ".concat(this.txnConnections, ", ") + "connections in use by other operations: ".concat(this.otherConnections);
    }
    /**
     * Reset the metrics to the initial values.
     */

  }, {
    key: "reset",
    value: function reset() {
      this.txnConnections = 0;
      this.cursorConnections = 0;
      this.otherConnections = 0;
    }
  }]);

  return ConnectionPoolMetrics;
}();

exports.ConnectionPoolMetrics = ConnectionPoolMetrics;
ConnectionPoolMetrics.TXN = 'txn';
ConnectionPoolMetrics.CURSOR = 'cursor';
ConnectionPoolMetrics.OTHER = 'other';
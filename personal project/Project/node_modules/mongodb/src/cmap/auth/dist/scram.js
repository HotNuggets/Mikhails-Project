"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.ScramSHA256 = exports.ScramSHA1 = void 0;
var saslprep_1 = require("@mongodb-js/saslprep");
var crypto = require("crypto");
var bson_1 = require("../../bson");
var error_1 = require("../../error");
var utils_1 = require("../../utils");
var auth_provider_1 = require("./auth_provider");
var providers_1 = require("./providers");
var ScramSHA = /** @class */ (function (_super) {
    __extends(ScramSHA, _super);
    function ScramSHA(cryptoMethod) {
        var _this = _super.call(this) || this;
        _this.cryptoMethod = cryptoMethod || 'sha1';
        return _this;
    }
    ScramSHA.prototype.prepare = function (handshakeDoc, authContext) {
        return __awaiter(this, void 0, Promise, function () {
            var cryptoMethod, credentials, nonce, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cryptoMethod = this.cryptoMethod;
                        credentials = authContext.credentials;
                        if (!credentials) {
                            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');
                        }
                        return [4 /*yield*/, utils_1.randomBytes(24)];
                    case 1:
                        nonce = _a.sent();
                        // store the nonce for later use
                        authContext.nonce = nonce;
                        request = __assign(__assign({}, handshakeDoc), { speculativeAuthenticate: __assign(__assign({}, makeFirstMessage(cryptoMethod, credentials, nonce)), { db: credentials.source }) });
                        return [2 /*return*/, request];
                }
            });
        });
    };
    ScramSHA.prototype.auth = function (authContext) {
        return __awaiter(this, void 0, void 0, function () {
            var reauthenticating, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reauthenticating = authContext.reauthenticating, response = authContext.response;
                        if (!((response === null || response === void 0 ? void 0 : response.speculativeAuthenticate) && !reauthenticating)) return [3 /*break*/, 2];
                        return [4 /*yield*/, continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, executeScram(this.cryptoMethod, authContext)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ScramSHA;
}(auth_provider_1.AuthProvider));
function cleanUsername(username) {
    return username.replace('=', '=3D').replace(',', '=2C');
}
function clientFirstMessageBare(username, nonce) {
    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.
    // Since the username is not sasl-prep-d, we need to do this here.
    return Buffer.concat([
        Buffer.from('n=', 'utf8'),
        Buffer.from(username, 'utf8'),
        Buffer.from(',r=', 'utf8'),
        Buffer.from(nonce.toString('base64'), 'utf8')
    ]);
}
function makeFirstMessage(cryptoMethod, credentials, nonce) {
    var username = cleanUsername(credentials.username);
    var mechanism = cryptoMethod === 'sha1' ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;
    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.
    // Since the username is not sasl-prep-d, we need to do this here.
    return {
        saslStart: 1,
        mechanism: mechanism,
        payload: new bson_1.Binary(Buffer.concat([Buffer.from('n,,', 'utf8'), clientFirstMessageBare(username, nonce)])),
        autoAuthorize: 1,
        options: { skipEmptyExchange: true }
    };
}
function executeScram(cryptoMethod, authContext) {
    return __awaiter(this, void 0, Promise, function () {
        var connection, credentials, nonce, db, saslStartCmd, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    connection = authContext.connection, credentials = authContext.credentials;
                    if (!credentials) {
                        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');
                    }
                    if (!authContext.nonce) {
                        throw new error_1.MongoInvalidArgumentError('AuthContext must contain a valid nonce property');
                    }
                    nonce = authContext.nonce;
                    db = credentials.source;
                    saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);
                    return [4 /*yield*/, connection.command(utils_1.ns(db + ".$cmd"), saslStartCmd, undefined)];
                case 1:
                    response = _a.sent();
                    return [4 /*yield*/, continueScramConversation(cryptoMethod, response, authContext)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function continueScramConversation(cryptoMethod, response, authContext) {
    return __awaiter(this, void 0, Promise, function () {
        var connection, credentials, nonce, db, username, password, processedPassword, payload, dict, iterations, salt, rnonce, withoutProof, saltedPassword, clientKey, serverKey, storedKey, authMessage, clientSignature, clientProof, clientFinal, serverSignature, saslContinueCmd, r, parsedResponse, retrySaslContinueCmd;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    connection = authContext.connection;
                    credentials = authContext.credentials;
                    if (!credentials) {
                        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');
                    }
                    if (!authContext.nonce) {
                        throw new error_1.MongoInvalidArgumentError('Unable to continue SCRAM without valid nonce');
                    }
                    nonce = authContext.nonce;
                    db = credentials.source;
                    username = cleanUsername(credentials.username);
                    password = credentials.password;
                    processedPassword = cryptoMethod === 'sha256' ? saslprep_1.saslprep(password) : passwordDigest(username, password);
                    payload = Buffer.isBuffer(response.payload)
                        ? new bson_1.Binary(response.payload)
                        : response.payload;
                    dict = parsePayload(payload);
                    iterations = parseInt(dict.i, 10);
                    if (iterations && iterations < 4096) {
                        // TODO(NODE-3483)
                        throw new error_1.MongoRuntimeError("Server returned an invalid iteration count " + iterations);
                    }
                    salt = dict.s;
                    rnonce = dict.r;
                    if (rnonce.startsWith('nonce')) {
                        // TODO(NODE-3483)
                        throw new error_1.MongoRuntimeError("Server returned an invalid nonce: " + rnonce);
                    }
                    withoutProof = "c=biws,r=" + rnonce;
                    saltedPassword = HI(processedPassword, Buffer.from(salt, 'base64'), iterations, cryptoMethod);
                    clientKey = HMAC(cryptoMethod, saltedPassword, 'Client Key');
                    serverKey = HMAC(cryptoMethod, saltedPassword, 'Server Key');
                    storedKey = H(cryptoMethod, clientKey);
                    authMessage = [
                        clientFirstMessageBare(username, nonce),
                        payload.toString('utf8'),
                        withoutProof
                    ].join(',');
                    clientSignature = HMAC(cryptoMethod, storedKey, authMessage);
                    clientProof = "p=" + xor(clientKey, clientSignature);
                    clientFinal = [withoutProof, clientProof].join(',');
                    serverSignature = HMAC(cryptoMethod, serverKey, authMessage);
                    saslContinueCmd = {
                        saslContinue: 1,
                        conversationId: response.conversationId,
                        payload: new bson_1.Binary(Buffer.from(clientFinal))
                    };
                    return [4 /*yield*/, connection.command(utils_1.ns(db + ".$cmd"), saslContinueCmd, undefined)];
                case 1:
                    r = _a.sent();
                    parsedResponse = parsePayload(r.payload);
                    if (!compareDigest(Buffer.from(parsedResponse.v, 'base64'), serverSignature)) {
                        throw new error_1.MongoRuntimeError('Server returned an invalid signature');
                    }
                    if (r.done !== false) {
                        // If the server sends r.done === true we can save one RTT
                        return [2 /*return*/];
                    }
                    retrySaslContinueCmd = {
                        saslContinue: 1,
                        conversationId: r.conversationId,
                        payload: Buffer.alloc(0)
                    };
                    return [4 /*yield*/, connection.command(utils_1.ns(db + ".$cmd"), retrySaslContinueCmd, undefined)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function parsePayload(payload) {
    var _a;
    var payloadStr = payload.toString('utf8');
    var dict = {};
    var parts = payloadStr.split(',');
    for (var i = 0; i < parts.length; i++) {
        var valueParts = ((_a = parts[i].match(/^([^=]*)=(.*)$/)) !== null && _a !== void 0 ? _a : []).slice(1);
        dict[valueParts[0]] = valueParts[1];
    }
    return dict;
}
function passwordDigest(username, password) {
    if (typeof username !== 'string') {
        throw new error_1.MongoInvalidArgumentError('Username must be a string');
    }
    if (typeof password !== 'string') {
        throw new error_1.MongoInvalidArgumentError('Password must be a string');
    }
    if (password.length === 0) {
        throw new error_1.MongoInvalidArgumentError('Password cannot be empty');
    }
    var md5;
    try {
        md5 = crypto.createHash('md5');
    }
    catch (err) {
        if (crypto.getFips()) {
            // This error is (slightly) more helpful than what comes from OpenSSL directly, e.g.
            // 'Error: error:060800C8:digital envelope routines:EVP_DigestInit_ex:disabled for FIPS'
            throw new Error('Auth mechanism SCRAM-SHA-1 is not supported in FIPS mode');
        }
        throw err;
    }
    md5.update(username + ":mongo:" + password, 'utf8');
    return md5.digest('hex');
}
// XOR two buffers
function xor(a, b) {
    if (!Buffer.isBuffer(a)) {
        a = Buffer.from(a);
    }
    if (!Buffer.isBuffer(b)) {
        b = Buffer.from(b);
    }
    var length = Math.max(a.length, b.length);
    var res = [];
    for (var i = 0; i < length; i += 1) {
        res.push(a[i] ^ b[i]);
    }
    return Buffer.from(res).toString('base64');
}
function H(method, text) {
    return crypto.createHash(method).update(text).digest();
}
function HMAC(method, key, text) {
    return crypto.createHmac(method, key).update(text).digest();
}
var _hiCache = {};
var _hiCacheCount = 0;
function _hiCachePurge() {
    _hiCache = {};
    _hiCacheCount = 0;
}
var hiLengthMap = {
    sha256: 32,
    sha1: 20
};
function HI(data, salt, iterations, cryptoMethod) {
    // omit the work if already generated
    var key = [data, salt.toString('base64'), iterations].join('_');
    if (_hiCache[key] != null) {
        return _hiCache[key];
    }
    // generate the salt
    var saltedData = crypto.pbkdf2Sync(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);
    // cache a copy to speed up the next lookup, but prevent unbounded cache growth
    if (_hiCacheCount >= 200) {
        _hiCachePurge();
    }
    _hiCache[key] = saltedData;
    _hiCacheCount += 1;
    return saltedData;
}
function compareDigest(lhs, rhs) {
    if (lhs.length !== rhs.length) {
        return false;
    }
    if (typeof crypto.timingSafeEqual === 'function') {
        return crypto.timingSafeEqual(lhs, rhs);
    }
    var result = 0;
    for (var i = 0; i < lhs.length; i++) {
        result |= lhs[i] ^ rhs[i];
    }
    return result === 0;
}
var ScramSHA1 = /** @class */ (function (_super) {
    __extends(ScramSHA1, _super);
    function ScramSHA1() {
        return _super.call(this, 'sha1') || this;
    }
    return ScramSHA1;
}(ScramSHA));
exports.ScramSHA1 = ScramSHA1;
var ScramSHA256 = /** @class */ (function (_super) {
    __extends(ScramSHA256, _super);
    function ScramSHA256() {
        return _super.call(this, 'sha256') || this;
    }
    return ScramSHA256;
}(ScramSHA));
exports.ScramSHA256 = ScramSHA256;

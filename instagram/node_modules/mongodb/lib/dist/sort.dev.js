"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatSort = formatSort;

var error_1 = require("./error");
/** @internal */


function prepareDirection() {
  var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var value = "".concat(direction).toLowerCase();
  if (isMeta(direction)) return direction;

  switch (value) {
    case 'ascending':
    case 'asc':
    case '1':
      return 1;

    case 'descending':
    case 'desc':
    case '-1':
      return -1;

    default:
      throw new error_1.MongoInvalidArgumentError("Invalid sort direction: ".concat(JSON.stringify(direction)));
  }
}
/** @internal */


function isMeta(t) {
  return _typeof(t) === 'object' && t != null && '$meta' in t && typeof t.$meta === 'string';
}
/** @internal */


function isPair(t) {
  if (Array.isArray(t) && t.length === 2) {
    try {
      prepareDirection(t[1]);
      return true;
    } catch (_unused) {
      return false;
    }
  }

  return false;
}

function isDeep(t) {
  return Array.isArray(t) && Array.isArray(t[0]);
}

function isMap(t) {
  return t instanceof Map && t.size > 0;
}
/** @internal */


function pairToMap(v) {
  return new Map([["".concat(v[0]), prepareDirection([v[1]])]]);
}
/** @internal */


function deepToMap(t) {
  var sortEntries = t.map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        k = _ref2[0],
        v = _ref2[1];

    return ["".concat(k), prepareDirection(v)];
  });
  return new Map(sortEntries);
}
/** @internal */


function stringsToMap(t) {
  var sortEntries = t.map(function (key) {
    return ["".concat(key), 1];
  });
  return new Map(sortEntries);
}
/** @internal */


function objectToMap(t) {
  var sortEntries = Object.entries(t).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        k = _ref4[0],
        v = _ref4[1];

    return ["".concat(k), prepareDirection(v)];
  });
  return new Map(sortEntries);
}
/** @internal */


function mapToMap(t) {
  var sortEntries = Array.from(t).map(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
        k = _ref6[0],
        v = _ref6[1];

    return ["".concat(k), prepareDirection(v)];
  });
  return new Map(sortEntries);
}
/** converts a Sort type into a type that is valid for the server (SortForCmd) */


function formatSort(sort, direction) {
  if (sort == null) return undefined;
  if (typeof sort === 'string') return new Map([[sort, prepareDirection(direction)]]);

  if (_typeof(sort) !== 'object') {
    throw new error_1.MongoInvalidArgumentError("Invalid sort format: ".concat(JSON.stringify(sort), " Sort must be a valid object"));
  }

  if (!Array.isArray(sort)) {
    return isMap(sort) ? mapToMap(sort) : Object.keys(sort).length ? objectToMap(sort) : undefined;
  }

  if (!sort.length) return undefined;
  if (isDeep(sort)) return deepToMap(sort);
  if (isPair(sort)) return pairToMap(sort);
  return stringsToMap(sort);
}
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HumanCallbackWorkflow = void 0;

var bson_1 = require("../../../bson");

var error_1 = require("../../../error");

var timeout_1 = require("../../../timeout");

var mongodb_oidc_1 = require("../mongodb_oidc");

var callback_workflow_1 = require("./callback_workflow");
/**
 * Class implementing behaviour for the non human callback workflow.
 * @internal
 */


var HumanCallbackWorkflow =
/*#__PURE__*/
function (_callback_workflow_1$) {
  _inherits(HumanCallbackWorkflow, _callback_workflow_1$);

  /**
   * Instantiate the human callback workflow.
   */
  function HumanCallbackWorkflow(cache, callback) {
    _classCallCheck(this, HumanCallbackWorkflow);

    return _possibleConstructorReturn(this, _getPrototypeOf(HumanCallbackWorkflow).call(this, cache, callback));
  }
  /**
   * Execute the OIDC human callback workflow.
   */


  _createClass(HumanCallbackWorkflow, [{
    key: "execute",
    value: function execute(connection, credentials) {
      var token, refreshToken, result, startResponse, conversationId, idpInfo, callbackResponse;
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.cache.hasAccessToken) {
                _context.next = 20;
                break;
              }

              token = this.cache.getAccessToken();
              connection.accessToken = token;
              _context.prev = 3;
              _context.next = 6;
              return regeneratorRuntime.awrap(this.finishAuthentication(connection, credentials, token));

            case 6:
              return _context.abrupt("return", _context.sent);

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](3);

              if (!(_context.t0 instanceof error_1.MongoError && _context.t0.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed)) {
                _context.next = 19;
                break;
              }

              this.cache.removeAccessToken();
              delete connection.accessToken;
              _context.next = 16;
              return regeneratorRuntime.awrap(this.execute(connection, credentials));

            case 16:
              return _context.abrupt("return", _context.sent);

            case 19:
              throw _context.t0;

            case 20:
              if (!this.cache.hasRefreshToken) {
                _context.next = 44;
                break;
              }

              refreshToken = this.cache.getRefreshToken();
              _context.next = 24;
              return regeneratorRuntime.awrap(this.fetchAccessToken(this.cache.getIdpInfo(), credentials, refreshToken));

            case 24:
              result = _context.sent;
              this.cache.put(result);
              connection.accessToken = result.accessToken;
              _context.prev = 27;
              _context.next = 30;
              return regeneratorRuntime.awrap(this.finishAuthentication(connection, credentials, result.accessToken));

            case 30:
              return _context.abrupt("return", _context.sent);

            case 33:
              _context.prev = 33;
              _context.t1 = _context["catch"](27);

              if (!(_context.t1 instanceof error_1.MongoError && _context.t1.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed)) {
                _context.next = 43;
                break;
              }

              this.cache.removeRefreshToken();
              delete connection.accessToken;
              _context.next = 40;
              return regeneratorRuntime.awrap(this.execute(connection, credentials));

            case 40:
              return _context.abrupt("return", _context.sent);

            case 43:
              throw _context.t1;

            case 44:
              _context.next = 46;
              return regeneratorRuntime.awrap(this.startAuthentication(connection, credentials));

            case 46:
              startResponse = _context.sent;
              conversationId = startResponse.conversationId;
              idpInfo = bson_1.BSON.deserialize(startResponse.payload.buffer);
              _context.next = 51;
              return regeneratorRuntime.awrap(this.fetchAccessToken(idpInfo, credentials));

            case 51:
              callbackResponse = _context.sent;
              this.cache.put(callbackResponse, idpInfo);
              connection.accessToken = callbackResponse.accessToken;
              _context.next = 56;
              return regeneratorRuntime.awrap(this.finishAuthentication(connection, credentials, callbackResponse.accessToken, conversationId));

            case 56:
              return _context.abrupt("return", _context.sent);

            case 57:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[3, 9], [27, 33]]);
    }
    /**
     * Fetches an access token using the callback.
     */

  }, {
    key: "fetchAccessToken",
    value: function fetchAccessToken(idpInfo, credentials, refreshToken) {
      var controller, params, timeout;
      return regeneratorRuntime.async(function fetchAccessToken$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              controller = new AbortController();
              params = {
                timeoutContext: controller.signal,
                version: mongodb_oidc_1.OIDC_VERSION,
                idpInfo: idpInfo
              };

              if (credentials.username) {
                params.username = credentials.username;
              }

              if (refreshToken) {
                params.refreshToken = refreshToken;
              }

              timeout = timeout_1.Timeout.expires(callback_workflow_1.HUMAN_TIMEOUT_MS);
              _context2.prev = 5;
              _context2.next = 8;
              return regeneratorRuntime.awrap(Promise.race([this.executeAndValidateCallback(params), timeout]));

            case 8:
              return _context2.abrupt("return", _context2.sent);

            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](5);

              if (!timeout_1.TimeoutError.is(_context2.t0)) {
                _context2.next = 16;
                break;
              }

              controller.abort();
              throw new error_1.MongoOIDCError("OIDC callback timed out after ".concat(callback_workflow_1.HUMAN_TIMEOUT_MS, "ms."));

            case 16:
              throw _context2.t0;

            case 17:
              _context2.prev = 17;
              timeout.clear();
              return _context2.finish(17);

            case 20:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[5, 11, 17, 20]]);
    }
  }]);

  return HumanCallbackWorkflow;
}(callback_workflow_1.CallbackWorkflow);

exports.HumanCallbackWorkflow = HumanCallbackWorkflow;
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEmptyCredentials = isEmptyCredentials;
exports.refreshKMSCredentials = refreshKMSCredentials;

var aws_1 = require("./aws");

var azure_1 = require("./azure");

var gcp_1 = require("./gcp");
/**
 * Auto credential fetching should only occur when the provider is defined on the kmsProviders map
 * and the settings are an empty object.
 *
 * This is distinct from a nullish provider key.
 *
 * @internal - exposed for testing purposes only
 */


function isEmptyCredentials(providerName, kmsProviders) {
  var provider = kmsProviders[providerName];

  if (provider == null) {
    return false;
  }

  return _typeof(provider) === 'object' && Object.keys(provider).length === 0;
}
/**
 * Load cloud provider credentials for the user provided KMS providers.
 * Credentials will only attempt to get loaded if they do not exist
 * and no existing credentials will get overwritten.
 *
 * @internal
 */


function refreshKMSCredentials(kmsProviders) {
  var finalKMSProviders;
  return regeneratorRuntime.async(function refreshKMSCredentials$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          finalKMSProviders = kmsProviders;

          if (!isEmptyCredentials('aws', kmsProviders)) {
            _context.next = 5;
            break;
          }

          _context.next = 4;
          return regeneratorRuntime.awrap((0, aws_1.loadAWSCredentials)(finalKMSProviders));

        case 4:
          finalKMSProviders = _context.sent;

        case 5:
          if (!isEmptyCredentials('gcp', kmsProviders)) {
            _context.next = 9;
            break;
          }

          _context.next = 8;
          return regeneratorRuntime.awrap((0, gcp_1.loadGCPCredentials)(finalKMSProviders));

        case 8:
          finalKMSProviders = _context.sent;

        case 9:
          if (!isEmptyCredentials('azure', kmsProviders)) {
            _context.next = 13;
            break;
          }

          _context.next = 12;
          return regeneratorRuntime.awrap((0, azure_1.loadAzureCredentials)(finalKMSProviders));

        case 12:
          finalKMSProviders = _context.sent;

        case 13:
          return _context.abrupt("return", finalKMSProviders);

        case 14:
        case "end":
          return _context.stop();
      }
    }
  });
}
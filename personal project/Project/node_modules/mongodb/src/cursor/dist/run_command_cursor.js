"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.RunCommandCursor = void 0;
var responses_1 = require("../cmap/wire_protocol/responses");
var error_1 = require("../error");
var execute_operation_1 = require("../operations/execute_operation");
var get_more_1 = require("../operations/get_more");
var run_command_1 = require("../operations/run_command");
var utils_1 = require("../utils");
var abstract_cursor_1 = require("./abstract_cursor");
/** @public */
var RunCommandCursor = /** @class */ (function (_super) {
    __extends(RunCommandCursor, _super);
    /** @internal */
    function RunCommandCursor(db, command, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, db.client, utils_1.ns(db.namespace), options) || this;
        _this.getMoreOptions = {};
        _this.db = db;
        _this.command = Object.freeze(__assign({}, command));
        return _this;
    }
    /**
     * Controls the `getMore.comment` field
     * @param comment - any BSON value
     */
    RunCommandCursor.prototype.setComment = function (comment) {
        this.getMoreOptions.comment = comment;
        return this;
    };
    /**
     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await
     * @param maxTimeMS - the number of milliseconds to wait for new data
     */
    RunCommandCursor.prototype.setMaxTimeMS = function (maxTimeMS) {
        this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;
        return this;
    };
    /**
     * Controls the `getMore.batchSize` field
     * @param maxTimeMS - the number documents to return in the `nextBatch`
     */
    RunCommandCursor.prototype.setBatchSize = function (batchSize) {
        this.getMoreOptions.batchSize = batchSize;
        return this;
    };
    RunCommandCursor.prototype.clone = function () {
        throw new error_1.MongoAPIError('Clone not supported, create a new cursor with db.runCursorCommand');
    };
    RunCommandCursor.prototype.withReadConcern = function (_) {
        throw new error_1.MongoAPIError('RunCommandCursor does not support readConcern it must be attached to the command being run');
    };
    RunCommandCursor.prototype.addCursorFlag = function (_, __) {
        throw new error_1.MongoAPIError('RunCommandCursor does not support cursor flags, they must be attached to the command being run');
    };
    RunCommandCursor.prototype.maxTimeMS = function (_) {
        throw new error_1.MongoAPIError('maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()');
    };
    RunCommandCursor.prototype.batchSize = function (_) {
        throw new error_1.MongoAPIError('batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()');
    };
    /** @internal */
    RunCommandCursor.prototype._initialize = function (session) {
        return __awaiter(this, void 0, Promise, function () {
            var operation, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operation = new run_command_1.RunCommandOperation(this.db, this.command, __assign(__assign({}, this.cursorOptions), { session: session, readPreference: this.cursorOptions.readPreference, responseType: responses_1.CursorResponse }));
                        return [4 /*yield*/, execute_operation_1.executeOperation(this.client, operation)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, {
                                server: operation.server,
                                session: session,
                                response: response
                            }];
                }
            });
        });
    };
    RunCommandCursor.prototype.getMore = function (_batchSize) {
        return __awaiter(this, void 0, Promise, function () {
            var getMoreOperation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, __assign(__assign(__assign({}, this.cursorOptions), { session: this.session }), this.getMoreOptions));
                        return [4 /*yield*/, execute_operation_1.executeOperation(this.client, getMoreOperation)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return RunCommandCursor;
}(abstract_cursor_1.AbstractCursor));
exports.RunCommandCursor = RunCommandCursor;

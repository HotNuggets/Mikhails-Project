"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.getFAASEnv = exports.addContainerMetadata = exports.makeClientMetadata = exports.LimitedSizeDocument = void 0;
var os = require("os");
var process = require("process");
var bson_1 = require("../../bson");
var error_1 = require("../../error");
var utils_1 = require("../../utils");
// eslint-disable-next-line @typescript-eslint/no-require-imports
var NODE_DRIVER_VERSION = require('../../../package.json').version;
/** @internal */
var LimitedSizeDocument = /** @class */ (function () {
    function LimitedSizeDocument(maxSize) {
        this.maxSize = maxSize;
        this.document = new Map();
        /** BSON overhead: Int32 + Null byte */
        this.documentSize = 5;
    }
    /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */
    LimitedSizeDocument.prototype.ifItFitsItSits = function (key, value) {
        // The BSON byteLength of the new element is the same as serializing it to its own document
        // subtracting the document size int32 and the null terminator.
        var newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;
        if (newElementSize + this.documentSize > this.maxSize) {
            return false;
        }
        this.documentSize += newElementSize;
        this.document.set(key, value);
        return true;
    };
    LimitedSizeDocument.prototype.toObject = function () {
        return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {
            promoteLongs: false,
            promoteBuffers: false,
            promoteValues: false,
            useBigInt64: false
        });
    };
    return LimitedSizeDocument;
}());
exports.LimitedSizeDocument = LimitedSizeDocument;
/**
 * From the specs:
 * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:
 * 1. Omit fields from `env` except `env.name`.
 * 2. Omit fields from `os` except `os.type`.
 * 3. Omit the `env` document entirely.
 * 4. Truncate `platform`. -- special we do not truncate this field
 */
function makeClientMetadata(options) {
    var metadataDocument = new LimitedSizeDocument(512);
    var _a = options.appName, appName = _a === void 0 ? '' : _a;
    // Add app name first, it must be sent
    if (appName.length > 0) {
        var name_1 = Buffer.byteLength(appName, 'utf8') <= 128
            ? options.appName
            : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');
        metadataDocument.ifItFitsItSits('application', { name: name_1 });
    }
    var _b = options.driverInfo, _c = _b.name, name = _c === void 0 ? '' : _c, _d = _b.version, version = _d === void 0 ? '' : _d, _e = _b.platform, platform = _e === void 0 ? '' : _e;
    var driverInfo = {
        name: name.length > 0 ? "nodejs|" + name : 'nodejs',
        version: version.length > 0 ? NODE_DRIVER_VERSION + "|" + version : NODE_DRIVER_VERSION
    };
    if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {
        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');
    }
    var runtimeInfo = getRuntimeInfo();
    if (platform.length > 0) {
        runtimeInfo = runtimeInfo + "|" + platform;
    }
    if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {
        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');
    }
    // Note: order matters, os.type is last so it will be removed last if we're at maxSize
    var osInfo = new Map()
        .set('name', process.platform)
        .set('architecture', process.arch)
        .set('version', os.release())
        .set('type', os.type());
    if (!metadataDocument.ifItFitsItSits('os', osInfo)) {
        for (var _i = 0, _f = osInfo.keys(); _i < _f.length; _i++) {
            var key = _f[_i];
            osInfo["delete"](key);
            if (osInfo.size === 0)
                break;
            if (metadataDocument.ifItFitsItSits('os', osInfo))
                break;
        }
    }
    var faasEnv = getFAASEnv();
    if (faasEnv != null) {
        if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {
            for (var _g = 0, _h = faasEnv.keys(); _g < _h.length; _g++) {
                var key = _h[_g];
                faasEnv["delete"](key);
                if (faasEnv.size === 0)
                    break;
                if (metadataDocument.ifItFitsItSits('env', faasEnv))
                    break;
            }
        }
    }
    return metadataDocument.toObject();
}
exports.makeClientMetadata = makeClientMetadata;
var dockerPromise;
/** @internal */
function getContainerMetadata() {
    return __awaiter(this, void 0, void 0, function () {
        var containerMetadata, isDocker, _a, KUBERNETES_SERVICE_HOST, isKubernetes;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    containerMetadata = {};
                    dockerPromise !== null && dockerPromise !== void 0 ? dockerPromise : ;
                    utils_1.fileIsAccessible('/.dockerenv');
                    return [4 /*yield*/, dockerPromise];
                case 1:
                    isDocker = _b.sent();
                    _a = process.env.KUBERNETES_SERVICE_HOST, KUBERNETES_SERVICE_HOST = _a === void 0 ? '' : _a;
                    isKubernetes = KUBERNETES_SERVICE_HOST.length > 0 ? true : false;
                    if (isDocker)
                        containerMetadata.runtime = 'docker';
                    if (isKubernetes)
                        containerMetadata.orchestrator = 'kubernetes';
                    return [2 /*return*/, containerMetadata];
            }
        });
    });
}
/**
 * @internal
 * Re-add each metadata value.
 * Attempt to add new env container metadata, but keep old data if it does not fit.
 */
function addContainerMetadata(originalMetadata) {
    return __awaiter(this, void 0, void 0, function () {
        var containerMetadata, extendedMetadata, extendedEnvMetadata, _i, _a, _b, key, val;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, getContainerMetadata()];
                case 1:
                    containerMetadata = _c.sent();
                    if (Object.keys(containerMetadata).length === 0)
                        return [2 /*return*/, originalMetadata];
                    extendedMetadata = new LimitedSizeDocument(512);
                    extendedEnvMetadata = __assign(__assign({}, originalMetadata === null || originalMetadata === void 0 ? void 0 : originalMetadata.env), { container: containerMetadata });
                    for (_i = 0, _a = Object.entries(originalMetadata); _i < _a.length; _i++) {
                        _b = _a[_i], key = _b[0], val = _b[1];
                        if (key !== 'env') {
                            extendedMetadata.ifItFitsItSits(key, val);
                        }
                        else {
                            if (!extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata)) {
                                // add in old data if newer / extended metadata does not fit
                                extendedMetadata.ifItFitsItSits('env', val);
                            }
                        }
                    }
                    if (!('env' in originalMetadata)) {
                        extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata);
                    }
                    return [2 /*return*/, extendedMetadata.toObject()];
            }
        });
    });
}
exports.addContainerMetadata = addContainerMetadata;
/**
 * Collects FaaS metadata.
 * - `name` MUST be the last key in the Map returned.
 */
function getFAASEnv() {
    var _a = process.env, _b = _a.AWS_EXECUTION_ENV, AWS_EXECUTION_ENV = _b === void 0 ? '' : _b, _c = _a.AWS_LAMBDA_RUNTIME_API, AWS_LAMBDA_RUNTIME_API = _c === void 0 ? '' : _c, _d = _a.FUNCTIONS_WORKER_RUNTIME, FUNCTIONS_WORKER_RUNTIME = _d === void 0 ? '' : _d, _e = _a.K_SERVICE, K_SERVICE = _e === void 0 ? '' : _e, _f = _a.FUNCTION_NAME, FUNCTION_NAME = _f === void 0 ? '' : _f, _g = _a.VERCEL, VERCEL = _g === void 0 ? '' : _g, _h = _a.AWS_LAMBDA_FUNCTION_MEMORY_SIZE, AWS_LAMBDA_FUNCTION_MEMORY_SIZE = _h === void 0 ? '' : _h, _j = _a.AWS_REGION, AWS_REGION = _j === void 0 ? '' : _j, _k = _a.FUNCTION_MEMORY_MB, FUNCTION_MEMORY_MB = _k === void 0 ? '' : _k, _l = _a.FUNCTION_REGION, FUNCTION_REGION = _l === void 0 ? '' : _l, _m = _a.FUNCTION_TIMEOUT_SEC, FUNCTION_TIMEOUT_SEC = _m === void 0 ? '' : _m, _o = _a.VERCEL_REGION, VERCEL_REGION = _o === void 0 ? '' : _o;
    var isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;
    var isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;
    var isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;
    var isVercelFaaS = VERCEL.length > 0;
    // Note: order matters, name must always be the last key
    var faasEnv = new Map();
    // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env
    if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {
        if (VERCEL_REGION.length > 0) {
            faasEnv.set('region', VERCEL_REGION);
        }
        faasEnv.set('name', 'vercel');
        return faasEnv;
    }
    if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {
        if (AWS_REGION.length > 0) {
            faasEnv.set('region', AWS_REGION);
        }
        if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&
            Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {
            faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));
        }
        faasEnv.set('name', 'aws.lambda');
        return faasEnv;
    }
    if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {
        faasEnv.set('name', 'azure.func');
        return faasEnv;
    }
    if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {
        if (FUNCTION_REGION.length > 0) {
            faasEnv.set('region', FUNCTION_REGION);
        }
        if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {
            faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));
        }
        if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {
            faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));
        }
        faasEnv.set('name', 'gcp.func');
        return faasEnv;
    }
    return null;
}
exports.getFAASEnv = getFAASEnv;
/**
 * @internal
 * Get current JavaScript runtime platform
 *
 * NOTE: The version information fetching is intentionally written defensively
 * to avoid having a released driver version that becomes incompatible
 * with a future change to these global objects.
 */
function getRuntimeInfo() {
    var _a, _b;
    if ('Deno' in globalThis) {
        var version = typeof ((_a = Deno === null || Deno === void 0 ? void 0 : Deno.version) === null || _a === void 0 ? void 0 : _a.deno) === 'string' ? (_b = Deno === null || Deno === void 0 ? void 0 : Deno.version) === null || _b === void 0 ? void 0 : _b.deno : '0.0.0-unknown';
        return "Deno v" + version + ", " + os.endianness();
    }
    if ('Bun' in globalThis) {
        var version = typeof (Bun === null || Bun === void 0 ? void 0 : Bun.version) === 'string' ? Bun === null || Bun === void 0 ? void 0 : Bun.version : '0.0.0-unknown';
        return "Bun v" + version + ", " + os.endianness();
    }
    return "Node.js " + process.version + ", " + os.endianness();
}

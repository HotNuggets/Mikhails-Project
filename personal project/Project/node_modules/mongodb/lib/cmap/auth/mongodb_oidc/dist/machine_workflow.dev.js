"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MachineWorkflow = void 0;

var promises_1 = require("timers/promises");

var utils_1 = require("../../../utils");

var command_builders_1 = require("./command_builders");
/** The time to throttle callback calls. */


var THROTTLE_MS = 100;
/**
 * Common behaviour for OIDC machine workflows.
 * @internal
 */

var MachineWorkflow =
/*#__PURE__*/
function () {
  /**
   * Instantiate the machine workflow.
   */
  function MachineWorkflow(cache) {
    _classCallCheck(this, MachineWorkflow);

    this.cache = cache;
    this.callback = this.withLock(this.getToken.bind(this));
    this.lastExecutionTime = Date.now() - THROTTLE_MS;
  }
  /**
   * Execute the workflow. Gets the token from the subclass implementation.
   */


  _createClass(MachineWorkflow, [{
    key: "execute",
    value: function execute(connection, credentials) {
      var token, command;
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(this.getTokenFromCacheOrEnv(connection, credentials));

            case 2:
              token = _context.sent;
              command = (0, command_builders_1.finishCommandDocument)(token);
              _context.next = 6;
              return regeneratorRuntime.awrap(connection.command((0, utils_1.ns)(credentials.source), command, undefined));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
    /**
     * Reauthenticate on a machine workflow just grabs the token again since the server
     * has said the current access token is invalid or expired.
     */

  }, {
    key: "reauthenticate",
    value: function reauthenticate(connection, credentials) {
      return regeneratorRuntime.async(function reauthenticate$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (this.cache.hasAccessToken) {
                // Reauthentication implies the token has expired.
                if (connection.accessToken === this.cache.getAccessToken()) {
                  // If connection's access token is the same as the cache's, remove
                  // the token from the cache and connection.
                  this.cache.removeAccessToken();
                  delete connection.accessToken;
                } else {
                  // If the connection's access token is different from the cache's, set
                  // the cache's token on the connection and do not remove from the
                  // cache.
                  connection.accessToken = this.cache.getAccessToken();
                }
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(this.execute(connection, credentials));

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
    /**
     * Get the document to add for speculative authentication.
     */

  }, {
    key: "speculativeAuth",
    value: function speculativeAuth(connection, credentials) {
      var token, document;
      return regeneratorRuntime.async(function speculativeAuth$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (this.cache.hasAccessToken) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return", {});

            case 2:
              _context3.next = 4;
              return regeneratorRuntime.awrap(this.getTokenFromCacheOrEnv(connection, credentials));

            case 4:
              token = _context3.sent;
              document = (0, command_builders_1.finishCommandDocument)(token);
              document.db = credentials.source;
              return _context3.abrupt("return", {
                speculativeAuthenticate: document
              });

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
    /**
     * Get the token from the cache or environment.
     */

  }, {
    key: "getTokenFromCacheOrEnv",
    value: function getTokenFromCacheOrEnv(connection, credentials) {
      var token;
      return regeneratorRuntime.async(function getTokenFromCacheOrEnv$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!this.cache.hasAccessToken) {
                _context4.next = 4;
                break;
              }

              return _context4.abrupt("return", this.cache.getAccessToken());

            case 4:
              _context4.next = 6;
              return regeneratorRuntime.awrap(this.callback(credentials));

            case 6:
              token = _context4.sent;
              this.cache.put({
                accessToken: token.access_token,
                expiresInSeconds: token.expires_in
              }); // Put the access token on the connection as well.

              connection.accessToken = token.access_token;
              return _context4.abrupt("return", token.access_token);

            case 10:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
    /**
     * Ensure the callback is only executed one at a time, and throttled to
     * only once per 100ms.
     */

  }, {
    key: "withLock",
    value: function withLock(callback) {
      var _this = this;

      var lock = Promise.resolve();
      return function _callee2(credentials) {
        return regeneratorRuntime.async(function _callee2$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return regeneratorRuntime.awrap(lock);

              case 2:
                lock = lock["catch"](function () {
                  return null;
                }).then(function _callee() {
                  var difference;
                  return regeneratorRuntime.async(function _callee$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          difference = Date.now() - _this.lastExecutionTime;

                          if (!(difference <= THROTTLE_MS)) {
                            _context5.next = 4;
                            break;
                          }

                          _context5.next = 4;
                          return regeneratorRuntime.awrap((0, promises_1.setTimeout)(THROTTLE_MS - difference));

                        case 4:
                          _this.lastExecutionTime = Date.now();
                          _context5.next = 7;
                          return regeneratorRuntime.awrap(callback(credentials));

                        case 7:
                          return _context5.abrupt("return", _context5.sent);

                        case 8:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  });
                });
                _context6.next = 5;
                return regeneratorRuntime.awrap(lock);

              case 5:
                return _context6.abrupt("return", _context6.sent);

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        });
      };
    }
  }]);

  return MachineWorkflow;
}();

exports.MachineWorkflow = MachineWorkflow;
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.GetMoreOperation = void 0;
var responses_1 = require("../cmap/wire_protocol/responses");
var error_1 = require("../error");
var utils_1 = require("../utils");
var operation_1 = require("./operation");
/** @internal */
var GetMoreOperation = /** @class */ (function (_super) {
    __extends(GetMoreOperation, _super);
    function GetMoreOperation(ns, cursorId, server, options) {
        var _this = _super.call(this, options) || this;
        _this.options = options;
        _this.ns = ns;
        _this.cursorId = cursorId;
        _this.server = server;
        return _this;
    }
    Object.defineProperty(GetMoreOperation.prototype, "commandName", {
        get: function () {
            return 'getMore';
        },
        enumerable: false,
        configurable: true
    });
    GetMoreOperation.prototype.execute = function (server, _session) {
        return __awaiter(this, void 0, Promise, function () {
            var collection, getMoreCmd, commandOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (server !== this.server) {
                            throw new error_1.MongoRuntimeError('Getmore must run on the same server operation began on');
                        }
                        if (this.cursorId == null || this.cursorId.isZero()) {
                            throw new error_1.MongoRuntimeError('Unable to iterate cursor with no id');
                        }
                        collection = this.ns.collection;
                        if (collection == null) {
                            // Cursors should have adopted the namespace returned by MongoDB
                            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())
                            throw new error_1.MongoRuntimeError('A collection name must be determined before getMore');
                        }
                        getMoreCmd = {
                            getMore: this.cursorId,
                            collection: collection
                        };
                        if (typeof this.options.batchSize === 'number') {
                            getMoreCmd.batchSize = Math.abs(this.options.batchSize);
                        }
                        if (typeof this.options.maxAwaitTimeMS === 'number') {
                            getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;
                        }
                        // we check for undefined specifically here to allow falsy values
                        // eslint-disable-next-line no-restricted-syntax
                        if (this.options.comment !== undefined && utils_1.maxWireVersion(server) >= 9) {
                            getMoreCmd.comment = this.options.comment;
                        }
                        commandOptions = __assign({ returnFieldSelector: null, documentsReturnedIn: 'nextBatch' }, this.options);
                        return [4 /*yield*/, server.command(this.ns, getMoreCmd, commandOptions, responses_1.CursorResponse)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return GetMoreOperation;
}(operation_1.AbstractOperation));
exports.GetMoreOperation = GetMoreOperation;
operation_1.defineAspects(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);

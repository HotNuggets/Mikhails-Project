"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.Code = void 0;
var bson_value_1 = require("./bson_value");
var utils_1 = require("./parser/utils");
/**
 * A class representation of the BSON Code type.
 * @public
 * @category BSONType
 */
var Code = /** @class */ (function (_super) {
    __extends(Code, _super);
    /**
     * @param code - a string or function.
     * @param scope - an optional scope for the function.
     */
    function Code(code, scope) {
        var _this = _super.call(this) || this;
        _this.code = code.toString();
        _this.scope = scope !== null && scope !== void 0 ? scope : null;
        return _this;
    }
    Object.defineProperty(Code.prototype, "_bsontype", {
        get: function () {
            return 'Code';
        },
        enumerable: false,
        configurable: true
    });
    Code.prototype.toJSON = function () {
        if (this.scope != null) {
            return { code: this.code, scope: this.scope };
        }
        return { code: this.code };
    };
    /** @internal */
    Code.prototype.toExtendedJSON = function () {
        if (this.scope) {
            return { $code: this.code, $scope: this.scope };
        }
        return { $code: this.code };
    };
    /** @internal */
    Code.fromExtendedJSON = function (doc) {
        return new Code(doc.$code, doc.$scope);
    };
    Code.prototype.inspect = function (depth, options, inspect) {
        inspect !== null && inspect !== void 0 ? inspect : ;
        utils_1.defaultInspect;
        var parametersString = inspect(this.code, options);
        var multiLineFn = parametersString.includes('\n');
        if (this.scope != null) {
            parametersString += "," + (multiLineFn ? '\n' : ' ') + inspect(this.scope, options);
        }
        var endingNewline = multiLineFn && this.scope === null;
        return "new Code(" + (multiLineFn ? '\n' : '') + parametersString + (endingNewline ? '\n' : '') + ")";
    };
    return Code;
}(bson_value_1.BSONValue));
exports.Code = Code;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
exports.__esModule = true;
exports.ClientBulkWriteResultsMerger = void 0;
var __1 = require("../..");
var error_1 = require("../../error");
/**
 * Unacknowledged bulk writes are always the same.
 */
var UNACKNOWLEDGED = {
    acknowledged: false,
    insertedCount: 0,
    upsertedCount: 0,
    matchedCount: 0,
    modifiedCount: 0,
    deletedCount: 0,
    insertResults: undefined,
    updateResults: undefined,
    deleteResults: undefined
};
/**
 * Merges client bulk write cursor responses together into a single result.
 * @internal
 */
var ClientBulkWriteResultsMerger = /** @class */ (function () {
    /**
     * Instantiate the merger.
     * @param options - The options.
     */
    function ClientBulkWriteResultsMerger(options) {
        this.options = options;
        this.currentBatchOffset = 0;
        this.writeConcernErrors = [];
        this.writeErrors = new Map();
        this.result = {
            acknowledged: true,
            insertedCount: 0,
            upsertedCount: 0,
            matchedCount: 0,
            modifiedCount: 0,
            deletedCount: 0,
            insertResults: undefined,
            updateResults: undefined,
            deleteResults: undefined
        };
        if (options.verboseResults) {
            this.result.insertResults = new Map();
            this.result.updateResults = new Map();
            this.result.deleteResults = new Map();
        }
    }
    /**
     * @returns The standard unacknowledged bulk write result.
     */
    ClientBulkWriteResultsMerger.unacknowledged = function () {
        return UNACKNOWLEDGED;
    };
    Object.defineProperty(ClientBulkWriteResultsMerger.prototype, "bulkWriteResult", {
        /**
         * Get the bulk write result object.
         */
        get: function () {
            return {
                acknowledged: this.result.acknowledged,
                insertedCount: this.result.insertedCount,
                upsertedCount: this.result.upsertedCount,
                matchedCount: this.result.matchedCount,
                modifiedCount: this.result.modifiedCount,
                deletedCount: this.result.deletedCount,
                insertResults: this.result.insertResults,
                updateResults: this.result.updateResults,
                deleteResults: this.result.deleteResults
            };
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Merge the results in the cursor to the existing result.
     * @param currentBatchOffset - The offset index to the original models.
     * @param response - The cursor response.
     * @param documents - The documents in the cursor.
     * @returns The current result.
     */
    ClientBulkWriteResultsMerger.prototype.merge = function (cursor) {
        var cursor_1, cursor_1_1;
        var e_1, _a;
        return __awaiter(this, void 0, Promise, function () {
            var writeConcernErrorResult, document, error, e_1_1, error_2, result, _i, _b, document, response, writeConcernError;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 13, 14, 15]);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 6, 7, 12]);
                        cursor_1 = __asyncValues(cursor);
                        _c.label = 2;
                    case 2: return [4 /*yield*/, cursor_1.next()];
                    case 3:
                        if (!(cursor_1_1 = _c.sent(), !cursor_1_1.done)) return [3 /*break*/, 5];
                        document = cursor_1_1.value;
                        // Only add to maps if ok: 1
                        if (document.ok === 1) {
                            if (this.options.verboseResults) {
                                this.processDocument(cursor, document);
                            }
                        }
                        else {
                            // If an individual write error is encountered during an ordered bulk write, drivers MUST
                            // record the error in writeErrors and immediately throw the exception. Otherwise, drivers
                            // MUST continue to iterate the results cursor and execute any further bulkWrite batches.
                            if (this.options.ordered) {
                                error = new error_1.MongoClientBulkWriteError({
                                    message: 'Mongo client ordered bulk write encountered a write error.'
                                });
                                error.writeErrors.set(document.idx + this.currentBatchOffset, {
                                    code: document.code,
                                    message: document.errmsg
                                });
                                error.partialResult = this.result;
                                throw error;
                            }
                            else {
                                this.writeErrors.set(document.idx + this.currentBatchOffset, {
                                    code: document.code,
                                    message: document.errmsg
                                });
                            }
                        }
                        _c.label = 4;
                    case 4: return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 12];
                    case 7:
                        _c.trys.push([7, , 10, 11]);
                        if (!(cursor_1_1 && !cursor_1_1.done && (_a = cursor_1["return"]))) return [3 /*break*/, 9];
                        return [4 /*yield*/, _a.call(cursor_1)];
                    case 8:
                        _c.sent();
                        _c.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 11: return [7 /*endfinally*/];
                    case 12: return [3 /*break*/, 15];
                    case 13:
                        error_2 = _c.sent();
                        if (error_2 instanceof __1.MongoWriteConcernError) {
                            result = error_2.result;
                            writeConcernErrorResult = {
                                insertedCount: result.nInserted,
                                upsertedCount: result.nUpserted,
                                matchedCount: result.nMatched,
                                modifiedCount: result.nModified,
                                deletedCount: result.nDeleted,
                                writeConcernError: result.writeConcernError
                            };
                            if (this.options.verboseResults && result.cursor.firstBatch) {
                                for (_i = 0, _b = result.cursor.firstBatch; _i < _b.length; _i++) {
                                    document = _b[_i];
                                    if (document.ok === 1) {
                                        this.processDocument(cursor, document);
                                    }
                                }
                            }
                        }
                        else {
                            throw error_2;
                        }
                        return [3 /*break*/, 15];
                    case 14:
                        // Update the counts from the cursor response.
                        if (cursor.response) {
                            response = cursor.response;
                            this.incrementCounts(response);
                        }
                        // Increment the batch offset.
                        this.currentBatchOffset += cursor.operations.length;
                        return [7 /*endfinally*/];
                    case 15:
                        // If we have write concern errors ensure they are added.
                        if (writeConcernErrorResult) {
                            writeConcernError = writeConcernErrorResult.writeConcernError;
                            this.incrementCounts(writeConcernErrorResult);
                            this.writeConcernErrors.push({
                                code: writeConcernError.code,
                                message: writeConcernError.errmsg
                            });
                        }
                        return [2 /*return*/, this.result];
                }
            });
        });
    };
    /**
     * Process an individual document in the results.
     * @param cursor - The cursor.
     * @param document - The document to process.
     */
    ClientBulkWriteResultsMerger.prototype.processDocument = function (cursor, document) {
        var _a, _b, _c, _d;
        // Get the corresponding operation from the command.
        var operation = cursor.operations[document.idx];
        // Handle insert results.
        if ('insert' in operation) {
            (_a = this.result.insertResults) === null || _a === void 0 ? void 0 : _a.set(document.idx + this.currentBatchOffset, {
                insertedId: operation.document._id
            });
        }
        // Handle update results.
        if ('update' in operation) {
            var result = {
                matchedCount: document.n,
                modifiedCount: (_b = document.nModified) !== null && _b !== void 0 ? _b : 0,
                // Check if the bulk did actually upsert.
                didUpsert: document.upserted != null
            };
            if (document.upserted) {
                result.upsertedId = document.upserted._id;
            }
            (_c = this.result.updateResults) === null || _c === void 0 ? void 0 : _c.set(document.idx + this.currentBatchOffset, result);
        }
        // Handle delete results.
        if ('delete' in operation) {
            (_d = this.result.deleteResults) === null || _d === void 0 ? void 0 : _d.set(document.idx + this.currentBatchOffset, {
                deletedCount: document.n
            });
        }
    };
    /**
     * Increment the result counts.
     * @param document - The document with the results.
     */
    ClientBulkWriteResultsMerger.prototype.incrementCounts = function (document) {
        this.result.insertedCount += document.insertedCount;
        this.result.upsertedCount += document.upsertedCount;
        this.result.matchedCount += document.matchedCount;
        this.result.modifiedCount += document.modifiedCount;
        this.result.deletedCount += document.deletedCount;
    };
    return ClientBulkWriteResultsMerger;
}());
exports.ClientBulkWriteResultsMerger = ClientBulkWriteResultsMerger;

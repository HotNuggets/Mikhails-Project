"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;
var dns = require("dns");
var deps_1 = require("../../deps");
var error_1 = require("../../error");
var utils_1 = require("../../utils");
var auth_provider_1 = require("./auth_provider");
/** @public */
exports.GSSAPICanonicalizationValue = Object.freeze({
    on: true,
    off: false,
    none: 'none',
    forward: 'forward',
    forwardAndReverse: 'forwardAndReverse'
});
function externalCommand(connection, command) {
    return __awaiter(this, void 0, Promise, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connection.command(utils_1.ns('$external.$cmd'), command)];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response];
            }
        });
    });
}
var krb;
var GSSAPI = /** @class */ (function (_super) {
    __extends(GSSAPI, _super);
    function GSSAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GSSAPI.prototype.auth = function (authContext) {
        return __awaiter(this, void 0, Promise, function () {
            var connection, credentials, username, client, payload, saslStartResponse, negotiatedPayload, saslContinueResponse, finalizePayload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        connection = authContext.connection, credentials = authContext.credentials;
                        if (credentials == null) {
                            throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');
                        }
                        username = credentials.username;
                        return [4 /*yield*/, makeKerberosClient(authContext)];
                    case 1:
                        client = _a.sent();
                        return [4 /*yield*/, client.step('')];
                    case 2:
                        payload = _a.sent();
                        return [4 /*yield*/, externalCommand(connection, saslStart(payload))];
                    case 3:
                        saslStartResponse = _a.sent();
                        return [4 /*yield*/, negotiate(client, 10, saslStartResponse.payload)];
                    case 4:
                        negotiatedPayload = _a.sent();
                        return [4 /*yield*/, externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId))];
                    case 5:
                        saslContinueResponse = _a.sent();
                        return [4 /*yield*/, finalize(client, username, saslContinueResponse.payload)];
                    case 6:
                        finalizePayload = _a.sent();
                        return [4 /*yield*/, externalCommand(connection, {
                                saslContinue: 1,
                                conversationId: saslContinueResponse.conversationId,
                                payload: finalizePayload
                            })];
                    case 7:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return GSSAPI;
}(auth_provider_1.AuthProvider));
exports.GSSAPI = GSSAPI;
function makeKerberosClient(authContext) {
    var _a, _b;
    return __awaiter(this, void 0, Promise, function () {
        var hostAddress, credentials, initializeClient, username, password, mechanismProperties, serviceName, host, initOptions, spnHost, spn;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    hostAddress = authContext.options.hostAddress;
                    credentials = authContext.credentials;
                    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {
                        throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');
                    }
                    loadKrb();
                    if ('kModuleError' in krb) {
                        throw krb['kModuleError'];
                    }
                    initializeClient = krb.initializeClient;
                    username = credentials.username, password = credentials.password;
                    mechanismProperties = credentials.mechanismProperties;
                    serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';
                    return [4 /*yield*/, performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties)];
                case 1:
                    host = _c.sent();
                    initOptions = {};
                    if (password != null) {
                        // TODO(NODE-5139): These do not match the typescript options in initializeClient
                        Object.assign(initOptions, { user: username, password: password });
                    }
                    spnHost = (_b = mechanismProperties.SERVICE_HOST) !== null && _b !== void 0 ? _b : host;
                    spn = "" + serviceName + (process.platform === 'win32' ? '/' : '@') + spnHost;
                    if ('SERVICE_REALM' in mechanismProperties) {
                        spn = spn + "@" + mechanismProperties.SERVICE_REALM;
                    }
                    return [4 /*yield*/, initializeClient(spn, initOptions)];
                case 2: return [2 /*return*/, _c.sent()];
            }
        });
    });
}
function saslStart(payload) {
    return {
        saslStart: 1,
        mechanism: 'GSSAPI',
        payload: payload,
        autoAuthorize: 1
    };
}
function saslContinue(payload, conversationId) {
    return {
        saslContinue: 1,
        conversationId: conversationId,
        payload: payload
    };
}
function negotiate(client, retries, payload) {
    return __awaiter(this, void 0, Promise, function () {
        var response, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 4]);
                    return [4 /*yield*/, client.step(payload)];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response || ''];
                case 2:
                    error_2 = _a.sent();
                    if (retries === 0) {
                        // Retries exhausted, raise error
                        throw error_2;
                    }
                    return [4 /*yield*/, negotiate(client, retries - 1, payload)];
                case 3: 
                // Adjust number of retries and call step again
                return [2 /*return*/, _a.sent()];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function finalize(client, user, payload) {
    return __awaiter(this, void 0, Promise, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, client.unwrap(payload)];
                case 1:
                    response = _a.sent();
                    return [4 /*yield*/, client.wrap(response || '', { user: user })];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function performGSSAPICanonicalizeHostName(host, mechanismProperties) {
    return __awaiter(this, void 0, Promise, function () {
        var mode, address, results, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    mode = mechanismProperties.CANONICALIZE_HOST_NAME;
                    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {
                        return [2 /*return*/, host];
                    }
                    if (!(mode === exports.GSSAPICanonicalizationValue.on ||
                        mode === exports.GSSAPICanonicalizationValue.forwardAndReverse)) return [3 /*break*/, 7];
                    return [4 /*yield*/, dns.promises.lookup(host)];
                case 1:
                    address = (_b.sent()).address;
                    _b.label = 2;
                case 2:
                    _b.trys.push([2, 4, , 6]);
                    return [4 /*yield*/, dns.promises.resolvePtr(address)];
                case 3:
                    results = _b.sent();
                    // If the ptr did not error but had no results, return the host.
                    return [2 /*return*/, results.length > 0 ? results[0] : host];
                case 4:
                    _a = _b.sent();
                    return [4 /*yield*/, resolveCname(host)];
                case 5: 
                // This can error as ptr records may not exist for all ips. In this case
                // fallback to a cname lookup as dns.lookup() does not return the
                // cname.
                return [2 /*return*/, _b.sent()];
                case 6: return [3 /*break*/, 9];
                case 7: return [4 /*yield*/, resolveCname(host)];
                case 8: 
                // The case for forward is just to resolve the cname as dns.lookup()
                // will not return it.
                return [2 /*return*/, _b.sent()];
                case 9: return [2 /*return*/];
            }
        });
    });
}
exports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;
function resolveCname(host) {
    return __awaiter(this, void 0, Promise, function () {
        var results, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, dns.promises.resolveCname(host)];
                case 1:
                    results = _b.sent();
                    // Get the first resolved host id
                    return [2 /*return*/, results.length > 0 ? results[0] : host];
                case 2:
                    _a = _b.sent();
                    return [2 /*return*/, host];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.resolveCname = resolveCname;
/**
 * Load the Kerberos library.
 */
function loadKrb() {
    if (!krb) {
        krb = deps_1.getKerberos();
    }
}

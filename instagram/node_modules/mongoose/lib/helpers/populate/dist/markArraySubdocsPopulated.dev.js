'use strict';

var utils = require('../../utils');
/**
 * If populating a path within a document array, make sure each
 * subdoc within the array knows its subpaths are populated.
 *
 * #### Example:
 *
 *     const doc = await Article.findOne().populate('comments.author');
 *     doc.comments[0].populated('author'); // Should be set
 *
 * @param {Document} doc
 * @param {Object} [populated]
 * @api private
 */


module.exports = function markArraySubdocsPopulated(doc, populated) {
  if (doc._doc._id == null || populated == null || populated.length === 0) {
    return;
  }

  var id = String(doc._doc._id);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = populated[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;

      if (item.isVirtual) {
        continue;
      }

      var path = item.path;
      var pieces = path.split('.');

      for (var i = 0; i < pieces.length - 1; ++i) {
        var subpath = pieces.slice(0, i + 1).join('.');
        var rest = pieces.slice(i + 1).join('.');
        var val = doc.get(subpath);

        if (val == null) {
          continue;
        }

        if (utils.isMongooseDocumentArray(val)) {
          for (var j = 0; j < val.length; ++j) {
            if (val[j]) {
              val[j].populated(rest, item._docs[id] == null ? void 0 : item._docs[id][j], item);
            }
          }

          break;
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.LegacyAWSTemporaryCredentialProvider = exports.AWSSDKCredentialProvider = exports.AWSTemporaryCredentialProvider = void 0;
var deps_1 = require("../../deps");
var error_1 = require("../../error");
var utils_1 = require("../../utils");
var AWS_RELATIVE_URI = 'http://169.254.170.2';
var AWS_EC2_URI = 'http://169.254.169.254';
var AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';
/**
 * @internal
 *
 * Fetches temporary AWS credentials.
 */
var AWSTemporaryCredentialProvider = /** @class */ (function () {
    function AWSTemporaryCredentialProvider() {
    }
    Object.defineProperty(AWSTemporaryCredentialProvider, "awsSDK", {
        get: function () {
            var _a;
            (_a = AWSTemporaryCredentialProvider._awsSDK) !== null && _a !== void 0 ? _a : ;
            deps_1.getAwsCredentialProvider();
            return AWSTemporaryCredentialProvider._awsSDK;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AWSTemporaryCredentialProvider, "isAWSSDKInstalled", {
        get: function () {
            return !('kModuleError' in AWSTemporaryCredentialProvider.awsSDK);
        },
        enumerable: false,
        configurable: true
    });
    return AWSTemporaryCredentialProvider;
}());
exports.AWSTemporaryCredentialProvider = AWSTemporaryCredentialProvider;
/** @internal */
var AWSSDKCredentialProvider = /** @class */ (function (_super) {
    __extends(AWSSDKCredentialProvider, _super);
    function AWSSDKCredentialProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AWSSDKCredentialProvider.prototype, "provider", {
        /**
         * The AWS SDK caches credentials automatically and handles refresh when the credentials have expired.
         * To ensure this occurs, we need to cache the `provider` returned by the AWS sdk and re-use it when fetching credentials.
         */
        get: function () {
            if ('kModuleError' in AWSTemporaryCredentialProvider.awsSDK) {
                throw AWSTemporaryCredentialProvider.awsSDK.kModuleError;
            }
            if (this._provider) {
                return this._provider;
            }
            var _a = process.env, _b = _a.AWS_STS_REGIONAL_ENDPOINTS, AWS_STS_REGIONAL_ENDPOINTS = _b === void 0 ? '' : _b, _c = _a.AWS_REGION, AWS_REGION = _c === void 0 ? '' : _c;
            AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();
            AWS_REGION = AWS_REGION.toLowerCase();
            /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode "defaults" */
            var awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;
            /**
             * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default
             * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html
             */
            var LEGACY_REGIONS = new Set([
                'ap-northeast-1',
                'ap-south-1',
                'ap-southeast-1',
                'ap-southeast-2',
                'aws-global',
                'ca-central-1',
                'eu-central-1',
                'eu-north-1',
                'eu-west-1',
                'eu-west-2',
                'eu-west-3',
                'sa-east-1',
                'us-east-1',
                'us-east-2',
                'us-west-1',
                'us-west-2'
            ]);
            /**
             * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings
             *
             * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then "old" regions need to keep using the global setting.
             * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.
             * That is not our bug to fix here. We leave that up to the SDK.
             */
            var useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === 'regional' ||
                (AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION));
            this._provider =
                awsRegionSettingsExist && useRegionalSts
                    ? AWSTemporaryCredentialProvider.awsSDK.fromNodeProviderChain({
                        clientConfig: { region: AWS_REGION }
                    })
                    : AWSTemporaryCredentialProvider.awsSDK.fromNodeProviderChain();
            return this._provider;
        },
        enumerable: false,
        configurable: true
    });
    AWSSDKCredentialProvider.prototype.getCredentials = function () {
        return __awaiter(this, void 0, Promise, function () {
            var creds, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.provider()];
                    case 1:
                        creds = _a.sent();
                        return [2 /*return*/, {
                                AccessKeyId: creds.accessKeyId,
                                SecretAccessKey: creds.secretAccessKey,
                                Token: creds.sessionToken,
                                Expiration: creds.expiration
                            }];
                    case 2:
                        error_2 = _a.sent();
                        throw new error_1.MongoAWSError(error_2.message, { cause: error_2 });
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return AWSSDKCredentialProvider;
}(AWSTemporaryCredentialProvider));
exports.AWSSDKCredentialProvider = AWSSDKCredentialProvider;
/**
 * @internal
 * Fetches credentials manually (without the AWS SDK), as outlined in the [Obtaining Credentials](https://github.com/mongodb/specifications/blob/master/source/auth/auth.md#obtaining-credentials)
 * section of the Auth spec.
 */
var LegacyAWSTemporaryCredentialProvider = /** @class */ (function (_super) {
    __extends(LegacyAWSTemporaryCredentialProvider, _super);
    function LegacyAWSTemporaryCredentialProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LegacyAWSTemporaryCredentialProvider.prototype.getCredentials = function () {
        return __awaiter(this, void 0, Promise, function () {
            var token, roleName, creds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) return [3 /*break*/, 2];
                        return [4 /*yield*/, utils_1.request("" + AWS_RELATIVE_URI + process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, utils_1.request(AWS_EC2_URI + "/latest/api/token", {
                            method: 'PUT',
                            json: false,
                            headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }
                        })];
                    case 3:
                        token = _a.sent();
                        return [4 /*yield*/, utils_1.request(AWS_EC2_URI + "/" + AWS_EC2_PATH, {
                                json: false,
                                headers: { 'X-aws-ec2-metadata-token': token }
                            })];
                    case 4:
                        roleName = _a.sent();
                        return [4 /*yield*/, utils_1.request(AWS_EC2_URI + "/" + AWS_EC2_PATH + "/" + roleName, {
                                headers: { 'X-aws-ec2-metadata-token': token }
                            })];
                    case 5:
                        creds = _a.sent();
                        return [2 /*return*/, creds];
                }
            });
        });
    };
    return LegacyAWSTemporaryCredentialProvider;
}(AWSTemporaryCredentialProvider));
exports.LegacyAWSTemporaryCredentialProvider = LegacyAWSTemporaryCredentialProvider;

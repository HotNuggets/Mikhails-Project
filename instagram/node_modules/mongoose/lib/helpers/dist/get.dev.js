'use strict';
/**
 * Simplified lodash.get to work around the annoying null quirk. See:
 * https://github.com/lodash/lodash/issues/3659
 * @api private
 */

module.exports = function get(obj, path, def) {
  var parts;
  var isPathArray = false;

  if (typeof path === 'string') {
    if (path.indexOf('.') === -1) {
      var _v = getProperty(obj, path);

      if (_v == null) {
        return def;
      }

      return _v;
    }

    parts = path.split('.');
  } else {
    isPathArray = true;
    parts = path;

    if (parts.length === 1) {
      var _v2 = getProperty(obj, parts[0]);

      if (_v2 == null) {
        return def;
      }

      return _v2;
    }
  }

  var rest = path;
  var cur = obj;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var part = _step.value;

      if (cur == null) {
        return def;
      } // `lib/cast.js` depends on being able to get dotted paths in updates,
      // like `{ $set: { 'a.b': 42 } }`


      if (!isPathArray && cur[rest] != null) {
        return cur[rest];
      }

      cur = getProperty(cur, part);

      if (!isPathArray) {
        rest = rest.substr(part.length + 1);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return cur == null ? def : cur;
};

function getProperty(obj, prop) {
  if (obj == null) {
    return obj;
  }

  if (obj instanceof Map) {
    return obj.get(prop);
  }

  return obj[prop];
}
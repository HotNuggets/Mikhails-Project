"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;

var utils_1 = require(".././utils");

var constants_1 = require("../constants");
/**
 * The base export class for all logs published from server selection
 * @internal
 * @category Log Type
 */


var ServerSelectionEvent =
/** @internal */
function ServerSelectionEvent(selector, topologyDescription, operation) {
  _classCallCheck(this, ServerSelectionEvent);

  this.selector = selector;
  this.operation = operation;
  this.topologyDescription = topologyDescription;
};

exports.ServerSelectionEvent = ServerSelectionEvent;
/**
 * An event published when server selection starts
 * @internal
 * @category Event
 */

var ServerSelectionStartedEvent =
/*#__PURE__*/
function (_ServerSelectionEvent) {
  _inherits(ServerSelectionStartedEvent, _ServerSelectionEvent);

  /** @internal */
  function ServerSelectionStartedEvent(selector, topologyDescription, operation) {
    var _this;

    _classCallCheck(this, ServerSelectionStartedEvent);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ServerSelectionStartedEvent).call(this, selector, topologyDescription, operation));
    /** @internal */

    _this.name = constants_1.SERVER_SELECTION_STARTED;
    _this.message = 'Server selection started';
    return _this;
  }

  return ServerSelectionStartedEvent;
}(ServerSelectionEvent);

exports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;
/**
 * An event published when a server selection fails
 * @internal
 * @category Event
 */

var ServerSelectionFailedEvent =
/*#__PURE__*/
function (_ServerSelectionEvent2) {
  _inherits(ServerSelectionFailedEvent, _ServerSelectionEvent2);

  /** @internal */
  function ServerSelectionFailedEvent(selector, topologyDescription, error, operation) {
    var _this2;

    _classCallCheck(this, ServerSelectionFailedEvent);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ServerSelectionFailedEvent).call(this, selector, topologyDescription, operation));
    /** @internal */

    _this2.name = constants_1.SERVER_SELECTION_FAILED;
    _this2.message = 'Server selection failed';
    _this2.failure = error;
    return _this2;
  }

  return ServerSelectionFailedEvent;
}(ServerSelectionEvent);

exports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;
/**
 * An event published when server selection succeeds
 * @internal
 * @category Event
 */

var ServerSelectionSucceededEvent =
/*#__PURE__*/
function (_ServerSelectionEvent3) {
  _inherits(ServerSelectionSucceededEvent, _ServerSelectionEvent3);

  /** @internal */
  function ServerSelectionSucceededEvent(selector, topologyDescription, address, operation) {
    var _this3;

    _classCallCheck(this, ServerSelectionSucceededEvent);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ServerSelectionSucceededEvent).call(this, selector, topologyDescription, operation));
    /** @internal */

    _this3.name = constants_1.SERVER_SELECTION_SUCCEEDED;
    _this3.message = 'Server selection succeeded';

    var _utils_1$HostAddress$ = utils_1.HostAddress.fromString(address).toHostPort(),
        host = _utils_1$HostAddress$.host,
        port = _utils_1$HostAddress$.port;

    _this3.serverHost = host;
    _this3.serverPort = port;
    return _this3;
  }

  return ServerSelectionSucceededEvent;
}(ServerSelectionEvent);

exports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;
/**
 * An event published when server selection is waiting for a suitable server to become available
 * @internal
 * @category Event
 */

var WaitingForSuitableServerEvent =
/*#__PURE__*/
function (_ServerSelectionEvent4) {
  _inherits(WaitingForSuitableServerEvent, _ServerSelectionEvent4);

  /** @internal */
  function WaitingForSuitableServerEvent(selector, topologyDescription, remainingTimeMS, operation) {
    var _this4;

    _classCallCheck(this, WaitingForSuitableServerEvent);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(WaitingForSuitableServerEvent).call(this, selector, topologyDescription, operation));
    /** @internal */

    _this4.name = constants_1.WAITING_FOR_SUITABLE_SERVER;
    _this4.message = 'Waiting for suitable server to become available';
    _this4.remainingTimeMS = remainingTimeMS;
    return _this4;
  }

  return WaitingForSuitableServerEvent;
}(ServerSelectionEvent);

exports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent;
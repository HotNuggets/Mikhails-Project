'use strict';

var hasDollarKeys = require('../query/hasDollarKeys');

function getRelatedSchemaIndexes(model, schemaIndexes) {
  return getRelatedIndexes({
    baseModelName: model.baseModelName,
    discriminatorMapping: model.schema.discriminatorMapping,
    indexes: schemaIndexes,
    indexesType: 'schema'
  });
}

function getRelatedDBIndexes(model, dbIndexes) {
  return getRelatedIndexes({
    baseModelName: model.baseModelName,
    discriminatorMapping: model.schema.discriminatorMapping,
    indexes: dbIndexes,
    indexesType: 'db'
  });
}

module.exports = {
  getRelatedSchemaIndexes: getRelatedSchemaIndexes,
  getRelatedDBIndexes: getRelatedDBIndexes
};

function getRelatedIndexes(_ref) {
  var baseModelName = _ref.baseModelName,
      discriminatorMapping = _ref.discriminatorMapping,
      indexes = _ref.indexes,
      indexesType = _ref.indexesType;
  var discriminatorKey = discriminatorMapping && discriminatorMapping.key;
  var discriminatorValue = discriminatorMapping && discriminatorMapping.value;

  if (!discriminatorKey) {
    return indexes;
  }

  var isChildDiscriminatorModel = Boolean(baseModelName);

  if (isChildDiscriminatorModel) {
    return indexes.filter(function (index) {
      var partialFilterExpression = getPartialFilterExpression(index, indexesType);
      return partialFilterExpression && partialFilterExpression[discriminatorKey] === discriminatorValue;
    });
  }

  return indexes.filter(function (index) {
    var partialFilterExpression = getPartialFilterExpression(index, indexesType);
    return !partialFilterExpression || !partialFilterExpression[discriminatorKey] || hasDollarKeys(partialFilterExpression[discriminatorKey]) && !('$eq' in partialFilterExpression[discriminatorKey]);
  });
}

function getPartialFilterExpression(index, indexesType) {
  if (indexesType === 'schema') {
    var options = index[1];
    return options && options.partialFilterExpression;
  }

  return index.partialFilterExpression;
}
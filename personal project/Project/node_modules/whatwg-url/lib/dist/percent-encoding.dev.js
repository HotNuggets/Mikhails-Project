"use strict";

var _require = require("./infra"),
    isASCIIHex = _require.isASCIIHex;

var _require2 = require("./encoding"),
    utf8Encode = _require2.utf8Encode;

function p(_char) {
  return _char.codePointAt(0);
} // https://url.spec.whatwg.org/#percent-encode


function percentEncode(c) {
  var hex = c.toString(16).toUpperCase();

  if (hex.length === 1) {
    hex = "0".concat(hex);
  }

  return "%".concat(hex);
} // https://url.spec.whatwg.org/#percent-decode


function percentDecodeBytes(input) {
  var output = new Uint8Array(input.byteLength);
  var outputIndex = 0;

  for (var i = 0; i < input.byteLength; ++i) {
    var _byte = input[i];

    if (_byte !== 0x25) {
      output[outputIndex++] = _byte;
    } else if (_byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {
      output[outputIndex++] = _byte;
    } else {
      var bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);
      output[outputIndex++] = bytePoint;
      i += 2;
    }
  }

  return output.slice(0, outputIndex);
} // https://url.spec.whatwg.org/#string-percent-decode


function percentDecodeString(input) {
  var bytes = utf8Encode(input);
  return percentDecodeBytes(bytes);
} // https://url.spec.whatwg.org/#c0-control-percent-encode-set


function isC0ControlPercentEncode(c) {
  return c <= 0x1F || c > 0x7E;
} // https://url.spec.whatwg.org/#fragment-percent-encode-set


var extraFragmentPercentEncodeSet = new Set([p(" "), p("\""), p("<"), p(">"), p("`")]);

function isFragmentPercentEncode(c) {
  return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);
} // https://url.spec.whatwg.org/#query-percent-encode-set


var extraQueryPercentEncodeSet = new Set([p(" "), p("\""), p("#"), p("<"), p(">")]);

function isQueryPercentEncode(c) {
  return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);
} // https://url.spec.whatwg.org/#special-query-percent-encode-set


function isSpecialQueryPercentEncode(c) {
  return isQueryPercentEncode(c) || c === p("'");
} // https://url.spec.whatwg.org/#path-percent-encode-set


var extraPathPercentEncodeSet = new Set([p("?"), p("`"), p("{"), p("}")]);

function isPathPercentEncode(c) {
  return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);
} // https://url.spec.whatwg.org/#userinfo-percent-encode-set


var extraUserinfoPercentEncodeSet = new Set([p("/"), p(":"), p(";"), p("="), p("@"), p("["), p("\\"), p("]"), p("^"), p("|")]);

function isUserinfoPercentEncode(c) {
  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
} // https://url.spec.whatwg.org/#component-percent-encode-set


var extraComponentPercentEncodeSet = new Set([p("$"), p("%"), p("&"), p("+"), p(",")]);

function isComponentPercentEncode(c) {
  return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);
} // https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set


var extraURLEncodedPercentEncodeSet = new Set([p("!"), p("'"), p("("), p(")"), p("~")]);

function isURLEncodedPercentEncode(c) {
  return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);
} // https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding
// https://url.spec.whatwg.org/#utf-8-percent-encode
// Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.
// The "-Internal" variant here has code points as JS strings. The external version used by other files has code points
// as JS numbers, like the rest of the codebase.


function utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {
  var bytes = utf8Encode(codePoint);
  var output = "";
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = bytes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _byte2 = _step.value;

      // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.
      if (!percentEncodePredicate(_byte2)) {
        output += String.fromCharCode(_byte2);
      } else {
        output += percentEncode(_byte2);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return output;
}

function utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {
  return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);
} // https://url.spec.whatwg.org/#string-percent-encode-after-encoding
// https://url.spec.whatwg.org/#string-utf-8-percent-encode


function utf8PercentEncodeString(input, percentEncodePredicate) {
  var spaceAsPlus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var output = "";
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var codePoint = _step2.value;

      if (spaceAsPlus && codePoint === " ") {
        output += "+";
      } else {
        output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return output;
}

module.exports = {
  isC0ControlPercentEncode: isC0ControlPercentEncode,
  isFragmentPercentEncode: isFragmentPercentEncode,
  isQueryPercentEncode: isQueryPercentEncode,
  isSpecialQueryPercentEncode: isSpecialQueryPercentEncode,
  isPathPercentEncode: isPathPercentEncode,
  isUserinfoPercentEncode: isUserinfoPercentEncode,
  isURLEncodedPercentEncode: isURLEncodedPercentEncode,
  percentDecodeString: percentDecodeString,
  percentDecodeBytes: percentDecodeBytes,
  utf8PercentEncodeString: utf8PercentEncodeString,
  utf8PercentEncodeCodePoint: utf8PercentEncodeCodePoint
};
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MongoDBAWS = void 0;

var BSON = require("../../bson");

var deps_1 = require("../../deps");

var error_1 = require("../../error");

var utils_1 = require("../../utils");

var auth_provider_1 = require("./auth_provider");

var aws_temporary_credentials_1 = require("./aws_temporary_credentials");

var mongo_credentials_1 = require("./mongo_credentials");

var providers_1 = require("./providers");

var ASCII_N = 110;
var bsonOptions = {
  useBigInt64: false,
  promoteLongs: true,
  promoteValues: true,
  promoteBuffers: false,
  bsonRegExp: false
};

var MongoDBAWS =
/*#__PURE__*/
function (_auth_provider_1$Auth) {
  _inherits(MongoDBAWS, _auth_provider_1$Auth);

  function MongoDBAWS() {
    var _this;

    _classCallCheck(this, MongoDBAWS);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoDBAWS).call(this));
    _this.credentialFetcher = aws_temporary_credentials_1.AWSTemporaryCredentialProvider.isAWSSDKInstalled ? new aws_temporary_credentials_1.AWSSDKCredentialProvider() : new aws_temporary_credentials_1.LegacyAWSTemporaryCredentialProvider();
    return _this;
  }

  _createClass(MongoDBAWS, [{
    key: "auth",
    value: function auth(authContext) {
      var connection, sign, credentials, accessKeyId, secretAccessKey, sessionToken, awsCredentials, db, nonce, saslStart, saslStartResponse, serverResponse, host, serverNonce, body, options, payload, saslContinue;
      return regeneratorRuntime.async(function auth$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              connection = authContext.connection;

              if (authContext.credentials) {
                _context.next = 3;
                break;
              }

              throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');

            case 3:
              if (!('kModuleError' in deps_1.aws4)) {
                _context.next = 5;
                break;
              }

              throw deps_1.aws4['kModuleError'];

            case 5:
              sign = deps_1.aws4.sign;

              if (!((0, utils_1.maxWireVersion)(connection) < 9)) {
                _context.next = 8;
                break;
              }

              throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');

            case 8:
              if (authContext.credentials.username) {
                _context.next = 12;
                break;
              }

              _context.next = 11;
              return regeneratorRuntime.awrap(makeTempCredentials(authContext.credentials, this.credentialFetcher));

            case 11:
              authContext.credentials = _context.sent;

            case 12:
              credentials = authContext.credentials;
              accessKeyId = credentials.username;
              secretAccessKey = credentials.password; // Allow the user to specify an AWS session token for authentication with temporary credentials.

              sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN; // If all three defined, include sessionToken, else include username and pass, else no credentials

              awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {
                accessKeyId: accessKeyId,
                secretAccessKey: secretAccessKey,
                sessionToken: sessionToken
              } : accessKeyId && secretAccessKey ? {
                accessKeyId: accessKeyId,
                secretAccessKey: secretAccessKey
              } : undefined;
              db = credentials.source;
              _context.next = 20;
              return regeneratorRuntime.awrap((0, utils_1.randomBytes)(32));

            case 20:
              nonce = _context.sent;
              // All messages between MongoDB clients and servers are sent as BSON objects
              // in the payload field of saslStart and saslContinue.
              saslStart = {
                saslStart: 1,
                mechanism: 'MONGODB-AWS',
                payload: BSON.serialize({
                  r: nonce,
                  p: ASCII_N
                }, bsonOptions)
              };
              _context.next = 24;
              return regeneratorRuntime.awrap(connection.command((0, utils_1.ns)("".concat(db, ".$cmd")), saslStart, undefined));

            case 24:
              saslStartResponse = _context.sent;
              serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);
              host = serverResponse.h;
              serverNonce = serverResponse.s.buffer;

              if (!(serverNonce.length !== 64)) {
                _context.next = 30;
                break;
              }

              throw new error_1.MongoRuntimeError("Invalid server nonce length ".concat(serverNonce.length, ", expected 64"));

            case 30:
              if (utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {
                _context.next = 32;
                break;
              }

              throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');

            case 32:
              if (!(host.length < 1 || host.length > 255 || host.indexOf('..') !== -1)) {
                _context.next = 34;
                break;
              }

              throw new error_1.MongoRuntimeError("Server returned an invalid host: \"".concat(host, "\""));

            case 34:
              body = 'Action=GetCallerIdentity&Version=2011-06-15';
              options = sign({
                method: 'POST',
                host: host,
                region: deriveRegion(serverResponse.h),
                service: 'sts',
                headers: {
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Content-Length': body.length,
                  'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),
                  'X-MongoDB-GS2-CB-Flag': 'n'
                },
                path: '/',
                body: body
              }, awsCredentials);
              payload = {
                a: options.headers.Authorization,
                d: options.headers['X-Amz-Date']
              };

              if (sessionToken) {
                payload.t = sessionToken;
              }

              saslContinue = {
                saslContinue: 1,
                conversationId: 1,
                payload: BSON.serialize(payload, bsonOptions)
              };
              _context.next = 41;
              return regeneratorRuntime.awrap(connection.command((0, utils_1.ns)("".concat(db, ".$cmd")), saslContinue, undefined));

            case 41:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }]);

  return MongoDBAWS;
}(auth_provider_1.AuthProvider);

exports.MongoDBAWS = MongoDBAWS;

function makeTempCredentials(credentials, awsCredentialFetcher) {
  var makeMongoCredentialsFromAWSTemp, temporaryCredentials;
  return regeneratorRuntime.async(function makeTempCredentials$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          makeMongoCredentialsFromAWSTemp = function _ref(creds) {
            // The AWS session token (creds.Token) may or may not be set.
            if (!creds.AccessKeyId || !creds.SecretAccessKey) {
              throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');
            }

            return new mongo_credentials_1.MongoCredentials({
              username: creds.AccessKeyId,
              password: creds.SecretAccessKey,
              source: credentials.source,
              mechanism: providers_1.AuthMechanism.MONGODB_AWS,
              mechanismProperties: {
                AWS_SESSION_TOKEN: creds.Token
              }
            });
          };

          _context2.next = 3;
          return regeneratorRuntime.awrap(awsCredentialFetcher.getCredentials());

        case 3:
          temporaryCredentials = _context2.sent;
          return _context2.abrupt("return", makeMongoCredentialsFromAWSTemp(temporaryCredentials));

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function deriveRegion(host) {
  var parts = host.split('.');

  if (parts.length === 1 || parts[1] === 'amazonaws') {
    return 'us-east-1';
  }

  return parts[1];
}
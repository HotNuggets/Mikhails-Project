"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
exports.__esModule = true;
exports.StateMachine = void 0;
var fs = require("fs/promises");
var net = require("net");
var tls = require("tls");
var bson_1 = require("../bson");
var deps_1 = require("../deps");
var utils_1 = require("../utils");
var client_encryption_1 = require("./client_encryption");
var errors_1 = require("./errors");
var socks = null;
function loadSocks() {
    if (socks == null) {
        var socksImport = deps_1.getSocks();
        if ('kModuleError' in socksImport) {
            throw socksImport.kModuleError;
        }
        socks = socksImport;
    }
    return socks;
}
// libmongocrypt states
var MONGOCRYPT_CTX_ERROR = 0;
var MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;
var MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;
var MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;
var MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;
var MONGOCRYPT_CTX_NEED_KMS = 4;
var MONGOCRYPT_CTX_READY = 5;
var MONGOCRYPT_CTX_DONE = 6;
var HTTPS_PORT = 443;
var stateToString = new Map([
    [MONGOCRYPT_CTX_ERROR, 'MONGOCRYPT_CTX_ERROR'],
    [MONGOCRYPT_CTX_NEED_MONGO_COLLINFO, 'MONGOCRYPT_CTX_NEED_MONGO_COLLINFO'],
    [MONGOCRYPT_CTX_NEED_MONGO_MARKINGS, 'MONGOCRYPT_CTX_NEED_MONGO_MARKINGS'],
    [MONGOCRYPT_CTX_NEED_MONGO_KEYS, 'MONGOCRYPT_CTX_NEED_MONGO_KEYS'],
    [MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS, 'MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS'],
    [MONGOCRYPT_CTX_NEED_KMS, 'MONGOCRYPT_CTX_NEED_KMS'],
    [MONGOCRYPT_CTX_READY, 'MONGOCRYPT_CTX_READY'],
    [MONGOCRYPT_CTX_DONE, 'MONGOCRYPT_CTX_DONE']
]);
var INSECURE_TLS_OPTIONS = [
    'tlsInsecure',
    'tlsAllowInvalidCertificates',
    'tlsAllowInvalidHostnames',
    // These options are disallowed by the spec, so we explicitly filter them out if provided, even
    // though the StateMachine does not declare support for these options.
    'tlsDisableOCSPEndpointCheck',
    'tlsDisableCertificateRevocationCheck'
];
/**
 * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.
 * @param msg - Anything you want to be logged.
 */
function debug(msg) {
    if (process.env.MONGODB_CRYPT_DEBUG) {
        // eslint-disable-next-line no-console
        console.error(msg);
    }
}
/**
 * This is kind of a hack.  For `rewrapManyDataKey`, we have tests that
 * guarantee that when there are no matching keys, `rewrapManyDataKey` returns
 * nothing.  We also have tests for auto encryption that guarantee for `encrypt`
 * we return an error when there are no matching keys.  This error is generated in
 * subsequent iterations of the state machine.
 * Some apis (`encrypt`) throw if there are no filter matches and others (`rewrapManyDataKey`)
 * do not.  We set the result manually here, and let the state machine continue.  `libmongocrypt`
 * will inform us if we need to error by setting the state to `MONGOCRYPT_CTX_ERROR` but
 * otherwise we'll return `{ v: [] }`.
 */
var EMPTY_V;
/**
 * @internal
 * An internal class that executes across a MongoCryptContext until either
 * a finishing state or an error is reached. Do not instantiate directly.
 */
var StateMachine = /** @class */ (function () {
    function StateMachine(options, bsonOptions) {
        if (bsonOptions === void 0) { bsonOptions = bson_1.pluckBSONSerializeOptions(options); }
        this.options = options;
        this.bsonOptions = bsonOptions;
    }
    /**
     * Executes the state machine according to the specification
     */
    StateMachine.prototype.execute = function (executor, context) {
        var e_1, _a;
        return __awaiter(this, void 0, Promise, function () {
            var keyVaultNamespace, keyVaultClient, metaDataClient, mongocryptdClient, mongocryptdManager, result, _b, filter, collInfo, command, markedCommand, _c, filter, keys, keys_1, keys_1_1, key, e_1_1, kmsProviders, requests, finalizedContext, message, message;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        keyVaultNamespace = executor._keyVaultNamespace;
                        keyVaultClient = executor._keyVaultClient;
                        metaDataClient = executor._metaDataClient;
                        mongocryptdClient = executor._mongocryptdClient;
                        mongocryptdManager = executor._mongocryptdManager;
                        result = null;
                        _d.label = 1;
                    case 1:
                        if (!(context.state !== MONGOCRYPT_CTX_DONE && context.state !== MONGOCRYPT_CTX_ERROR)) return [3 /*break*/, 30];
                        debug("[context#" + context.id + "] " + (stateToString.get(context.state) || context.state));
                        _b = context.state;
                        switch (_b) {
                            case MONGOCRYPT_CTX_NEED_MONGO_COLLINFO: return [3 /*break*/, 2];
                            case MONGOCRYPT_CTX_NEED_MONGO_MARKINGS: return [3 /*break*/, 4];
                            case MONGOCRYPT_CTX_NEED_MONGO_KEYS: return [3 /*break*/, 9];
                            case MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS: return [3 /*break*/, 23];
                            case MONGOCRYPT_CTX_NEED_KMS: return [3 /*break*/, 25];
                            case MONGOCRYPT_CTX_READY: return [3 /*break*/, 27];
                        }
                        return [3 /*break*/, 28];
                    case 2:
                        filter = bson_1.deserialize(context.nextMongoOperation());
                        if (!metaDataClient) {
                            throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_COLLINFO but metadata client is undefined');
                        }
                        return [4 /*yield*/, this.fetchCollectionInfo(metaDataClient, context.ns, filter)];
                    case 3:
                        collInfo = _d.sent();
                        if (collInfo) {
                            context.addMongoOperationResponse(collInfo);
                        }
                        context.finishMongoOperation();
                        return [3 /*break*/, 29];
                    case 4:
                        command = context.nextMongoOperation();
                        if (!mongocryptdClient) {
                            throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_MARKINGS but mongocryptdClient is undefined');
                        }
                        if (!mongocryptdManager) return [3 /*break*/, 6];
                        return [4 /*yield*/, mongocryptdManager.withRespawn(this.markCommand.bind(this, mongocryptdClient, context.ns, command))];
                    case 5:
                        _c = _d.sent();
                        return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, this.markCommand(mongocryptdClient, context.ns, command)];
                    case 7:
                        _c = _d.sent();
                        _d.label = 8;
                    case 8:
                        markedCommand = _c;
                        context.addMongoOperationResponse(markedCommand);
                        context.finishMongoOperation();
                        return [3 /*break*/, 29];
                    case 9:
                        filter = context.nextMongoOperation();
                        return [4 /*yield*/, this.fetchKeys(keyVaultClient, keyVaultNamespace, filter)];
                    case 10:
                        keys = _d.sent();
                        if (keys.length === 0) {
                            // See docs on EMPTY_V
                            result = EMPTY_V !== null && EMPTY_V !== void 0 ? EMPTY_V : ;
                            bson_1.serialize({ v: [] });
                        }
                        _d.label = 11;
                    case 11:
                        _d.trys.push([11, 16, 17, 22]);
                        keys_1 = (e_1 = void 0, __asyncValues(keys));
                        _d.label = 12;
                    case 12: return [4 /*yield*/, keys_1.next()];
                    case 13:
                        if (!(keys_1_1 = _d.sent(), !keys_1_1.done)) return [3 /*break*/, 15];
                        key = keys_1_1.value;
                        context.addMongoOperationResponse(bson_1.serialize(key));
                        _d.label = 14;
                    case 14: return [3 /*break*/, 12];
                    case 15: return [3 /*break*/, 22];
                    case 16:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 22];
                    case 17:
                        _d.trys.push([17, , 20, 21]);
                        if (!(keys_1_1 && !keys_1_1.done && (_a = keys_1["return"]))) return [3 /*break*/, 19];
                        return [4 /*yield*/, _a.call(keys_1)];
                    case 18:
                        _d.sent();
                        _d.label = 19;
                    case 19: return [3 /*break*/, 21];
                    case 20:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 21: return [7 /*endfinally*/];
                    case 22:
                        context.finishMongoOperation();
                        return [3 /*break*/, 29];
                    case 23: return [4 /*yield*/, executor.askForKMSCredentials()];
                    case 24:
                        kmsProviders = _d.sent();
                        context.provideKMSProviders(bson_1.serialize(kmsProviders));
                        return [3 /*break*/, 29];
                    case 25:
                        requests = Array.from(this.requests(context));
                        return [4 /*yield*/, Promise.all(requests)];
                    case 26:
                        _d.sent();
                        context.finishKMSRequests();
                        return [3 /*break*/, 29];
                    case 27:
                        {
                            finalizedContext = context.finalize();
                            // @ts-expect-error finalize can change the state, check for error
                            if (context.state === MONGOCRYPT_CTX_ERROR) {
                                message = context.status.message || 'Finalization error';
                                throw new errors_1.MongoCryptError(message);
                            }
                            result = finalizedContext;
                            return [3 /*break*/, 29];
                        }
                        _d.label = 28;
                    case 28: throw new errors_1.MongoCryptError("Unknown state: " + context.state);
                    case 29: return [3 /*break*/, 1];
                    case 30:
                        if (context.state === MONGOCRYPT_CTX_ERROR || result == null) {
                            message = context.status.message;
                            if (!message) {
                                debug("unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.");
                            }
                            throw new errors_1.MongoCryptError(message !== null && message !== void 0 ? message : 'unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.');
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * Handles the request to the KMS service. Exposed for testing purposes. Do not directly invoke.
     * @param kmsContext - A C++ KMS context returned from the bindings
     * @returns A promise that resolves when the KMS reply has be fully parsed
     */
    StateMachine.prototype.kmsRequest = function (request) {
        return __awaiter(this, void 0, Promise, function () {
            function destroySockets() {
                for (var _i = 0, _a = [socket, netSocket]; _i < _a.length; _i++) {
                    var sock = _a[_i];
                    if (sock) {
                        sock.removeAllListeners();
                        sock.destroy();
                    }
                }
            }
            function ontimeout() {
                return new errors_1.MongoCryptError('KMS request timed out');
            }
            function onerror(cause) {
                return new errors_1.MongoCryptError('KMS request failed', { cause: cause });
            }
            function onclose() {
                return new errors_1.MongoCryptError('KMS request closed');
            }
            var parsedUrl, port, socketOptions, options, message, buffer, netSocket, socket, tlsOptions, kmsProvider, providerTlsOptions, error, err_1, _a, willConnect, rejectOnNetSocketError, resolveOnNetSocketConnect, netSocketOptions, _b, err_2, _c, willResolveKmsRequest, rejectOnTlsSocketError_1, resolve_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        parsedUrl = request.endpoint.split(':');
                        port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;
                        socketOptions = client_encryption_1.autoSelectSocketOptions(this.options.socketOptions || {});
                        options = __assign({ host: parsedUrl[0], servername: parsedUrl[0], port: port }, socketOptions);
                        message = request.message;
                        buffer = new utils_1.BufferPool();
                        netSocket = new net.Socket();
                        tlsOptions = this.options.tlsOptions;
                        if (!tlsOptions) return [3 /*break*/, 4];
                        kmsProvider = request.kmsProvider;
                        providerTlsOptions = tlsOptions[kmsProvider];
                        if (!providerTlsOptions) return [3 /*break*/, 4];
                        error = this.validateTlsOptions(kmsProvider, providerTlsOptions);
                        if (error) {
                            throw error;
                        }
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.setTlsOptions(providerTlsOptions, options)];
                    case 2:
                        _d.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _d.sent();
                        throw onerror(err_1);
                    case 4:
                        _a = utils_1.promiseWithResolvers(), willConnect = _a.promise, rejectOnNetSocketError = _a.reject, resolveOnNetSocketConnect = _a.resolve;
                        netSocket
                            .once('timeout', function () { return rejectOnNetSocketError(ontimeout()); })
                            .once('error', function (err) { return rejectOnNetSocketError(onerror(err)); })
                            .once('close', function () { return rejectOnNetSocketError(onclose()); })
                            .once('connect', function () { return resolveOnNetSocketConnect(); });
                        _d.label = 5;
                    case 5:
                        _d.trys.push([5, , 12, 13]);
                        if (!(this.options.proxyOptions && this.options.proxyOptions.proxyHost)) return [3 /*break*/, 10];
                        netSocketOptions = __assign({ host: this.options.proxyOptions.proxyHost, port: this.options.proxyOptions.proxyPort || 1080 }, socketOptions);
                        netSocket.connect(netSocketOptions);
                        return [4 /*yield*/, willConnect];
                    case 6:
                        _d.sent();
                        _d.label = 7;
                    case 7:
                        _d.trys.push([7, 9, , 10]);
                        socks !== null && socks !== void 0 ? socks : ;
                        loadSocks();
                        _b = options;
                        return [4 /*yield*/, socks.SocksClient.createConnection({
                                existing_socket: netSocket,
                                command: 'connect',
                                destination: { host: options.host, port: options.port },
                                proxy: {
                                    // host and port are ignored because we pass existing_socket
                                    host: 'iLoveJavaScript',
                                    port: 0,
                                    type: 5,
                                    userId: this.options.proxyOptions.proxyUsername,
                                    password: this.options.proxyOptions.proxyPassword
                                }
                            })];
                    case 8:
                        _b.socket = (_d.sent()).socket;
                        return [3 /*break*/, 10];
                    case 9:
                        err_2 = _d.sent();
                        throw onerror(err_2);
                    case 10:
                        socket = tls.connect(options, function () {
                            socket.write(message);
                        });
                        _c = utils_1.promiseWithResolvers(), willResolveKmsRequest = _c.promise, rejectOnTlsSocketError_1 = _c.reject, resolve_1 = _c.resolve;
                        socket
                            .once('timeout', function () { return rejectOnTlsSocketError_1(ontimeout()); })
                            .once('error', function (err) { return rejectOnTlsSocketError_1(onerror(err)); })
                            .once('close', function () { return rejectOnTlsSocketError_1(onclose()); })
                            .on('data', function (data) {
                            buffer.append(data);
                            while (request.bytesNeeded > 0 && buffer.length) {
                                var bytesNeeded = Math.min(request.bytesNeeded, buffer.length);
                                request.addResponse(buffer.read(bytesNeeded));
                            }
                            if (request.bytesNeeded <= 0) {
                                resolve_1();
                            }
                        });
                        return [4 /*yield*/, willResolveKmsRequest];
                    case 11:
                        _d.sent();
                        return [3 /*break*/, 13];
                    case 12:
                        // There's no need for any more activity on this socket at this point.
                        destroySockets();
                        return [7 /*endfinally*/];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    StateMachine.prototype.requests = function (context) {
        var request;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = context.nextKMSRequest();
                    _a.label = 1;
                case 1:
                    if (!(request != null)) return [3 /*break*/, 4];
                    return [4 /*yield*/, this.kmsRequest(request)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    request = context.nextKMSRequest();
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    /**
     * Validates the provided TLS options are secure.
     *
     * @param kmsProvider - The KMS provider name.
     * @param tlsOptions - The client TLS options for the provider.
     *
     * @returns An error if any option is invalid.
     */
    StateMachine.prototype.validateTlsOptions = function (kmsProvider, tlsOptions) {
        var tlsOptionNames = Object.keys(tlsOptions);
        for (var _i = 0, INSECURE_TLS_OPTIONS_1 = INSECURE_TLS_OPTIONS; _i < INSECURE_TLS_OPTIONS_1.length; _i++) {
            var option = INSECURE_TLS_OPTIONS_1[_i];
            if (tlsOptionNames.includes(option)) {
                return new errors_1.MongoCryptError("Insecure TLS options prohibited for " + kmsProvider + ": " + option);
            }
        }
    };
    /**
     * Sets only the valid secure TLS options.
     *
     * @param tlsOptions - The client TLS options for the provider.
     * @param options - The existing connection options.
     */
    StateMachine.prototype.setTlsOptions = function (tlsOptions, options) {
        return __awaiter(this, void 0, Promise, function () {
            var cert, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!tlsOptions.tlsCertificateKeyFile) return [3 /*break*/, 2];
                        return [4 /*yield*/, fs.readFile(tlsOptions.tlsCertificateKeyFile)];
                    case 1:
                        cert = _b.sent();
                        options.cert = options.key = cert;
                        _b.label = 2;
                    case 2:
                        if (!tlsOptions.tlsCAFile) return [3 /*break*/, 4];
                        _a = options;
                        return [4 /*yield*/, fs.readFile(tlsOptions.tlsCAFile)];
                    case 3:
                        _a.ca = _b.sent();
                        _b.label = 4;
                    case 4:
                        if (tlsOptions.tlsCertificateKeyFilePassword) {
                            options.passphrase = tlsOptions.tlsCertificateKeyFilePassword;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetches collection info for a provided namespace, when libmongocrypt
     * enters the `MONGOCRYPT_CTX_NEED_MONGO_COLLINFO` state. The result is
     * used to inform libmongocrypt of the schema associated with this
     * namespace. Exposed for testing purposes. Do not directly invoke.
     *
     * @param client - A MongoClient connected to the topology
     * @param ns - The namespace to list collections from
     * @param filter - A filter for the listCollections command
     * @param callback - Invoked with the info of the requested collection, or with an error
     */
    StateMachine.prototype.fetchCollectionInfo = function (client, ns, filter) {
        return __awaiter(this, void 0, Promise, function () {
            var db, collections, info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        db = utils_1.MongoDBCollectionNamespace.fromString(ns).db;
                        return [4 /*yield*/, client
                                .db(db)
                                .listCollections(filter, {
                                promoteLongs: false,
                                promoteValues: false
                            })
                                .toArray()];
                    case 1:
                        collections = _a.sent();
                        info = collections.length > 0 ? bson_1.serialize(collections[0]) : null;
                        return [2 /*return*/, info];
                }
            });
        });
    };
    /**
     * Calls to the mongocryptd to provide markings for a command.
     * Exposed for testing purposes. Do not directly invoke.
     * @param client - A MongoClient connected to a mongocryptd
     * @param ns - The namespace (database.collection) the command is being executed on
     * @param command - The command to execute.
     * @param callback - Invoked with the serialized and marked bson command, or with an error
     */
    StateMachine.prototype.markCommand = function (client, ns, command) {
        return __awaiter(this, void 0, Promise, function () {
            var options, db, rawCommand, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = { promoteLongs: false, promoteValues: false };
                        db = utils_1.MongoDBCollectionNamespace.fromString(ns).db;
                        rawCommand = bson_1.deserialize(command, options);
                        return [4 /*yield*/, client.db(db).command(rawCommand, options)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, bson_1.serialize(response, this.bsonOptions)];
                }
            });
        });
    };
    /**
     * Requests keys from the keyVault collection on the topology.
     * Exposed for testing purposes. Do not directly invoke.
     * @param client - A MongoClient connected to the topology
     * @param keyVaultNamespace - The namespace (database.collection) of the keyVault Collection
     * @param filter - The filter for the find query against the keyVault Collection
     * @param callback - Invoked with the found keys, or with an error
     */
    StateMachine.prototype.fetchKeys = function (client, keyVaultNamespace, filter) {
        var _a = utils_1.MongoDBCollectionNamespace.fromString(keyVaultNamespace), dbName = _a.db, collectionName = _a.collection;
        return client
            .db(dbName)
            .collection(collectionName, { readConcern: { level: 'majority' } })
            .find(bson_1.deserialize(filter))
            .toArray();
    };
    return StateMachine;
}());
exports.StateMachine = StateMachine;

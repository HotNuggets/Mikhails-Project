"use strict";

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

exports.convert = function (globalObject, value) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (typeof value !== "function") {
    throw new globalObject.TypeError(context + " is not a function");
  }

  function invokeTheCallbackFunction() {
    var thisArg = utils.tryWrapperForImpl(this);
    var callResult;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    for (var i = 0; i < args.length; i++) {
      args[i] = utils.tryWrapperForImpl(args[i]);
    }

    callResult = Reflect.apply(value, thisArg, args);
    callResult = conversions["any"](callResult, {
      context: context,
      globals: globalObject
    });
    return callResult;
  }

  invokeTheCallbackFunction.construct = function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    for (var i = 0; i < args.length; i++) {
      args[i] = utils.tryWrapperForImpl(args[i]);
    }

    var callResult = Reflect.construct(value, args);
    callResult = conversions["any"](callResult, {
      context: context,
      globals: globalObject
    });
    return callResult;
  };

  invokeTheCallbackFunction[utils.wrapperSymbol] = value;
  invokeTheCallbackFunction.objectReference = value;
  return invokeTheCallbackFunction;
};
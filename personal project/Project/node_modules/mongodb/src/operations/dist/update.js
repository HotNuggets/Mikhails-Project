"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;
var error_1 = require("../error");
var utils_1 = require("../utils");
var command_1 = require("./command");
var operation_1 = require("./operation");
/**
 * @internal
 * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API
 */
var UpdateOperation = /** @class */ (function (_super) {
    __extends(UpdateOperation, _super);
    function UpdateOperation(ns, statements, options) {
        var _this = _super.call(this, undefined, options) || this;
        _this.options = options;
        _this.ns = ns;
        _this.statements = statements;
        return _this;
    }
    Object.defineProperty(UpdateOperation.prototype, "commandName", {
        get: function () {
            return 'update';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UpdateOperation.prototype, "canRetryWrite", {
        get: function () {
            if (_super.prototype.canRetryWrite === false) {
                return false;
            }
            return this.statements.every(function (op) { return op.multi == null || op.multi === false; });
        },
        enumerable: false,
        configurable: true
    });
    UpdateOperation.prototype.execute = function (server, session) {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var options, ordered, command, unacknowledgedWrite, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = (_a = this.options) !== null && _a !== void 0 ? _a : {};
                        ordered = typeof options.ordered === 'boolean' ? options.ordered : true;
                        command = {
                            update: this.ns.collection,
                            updates: this.statements,
                            ordered: ordered
                        };
                        if (typeof options.bypassDocumentValidation === 'boolean') {
                            command.bypassDocumentValidation = options.bypassDocumentValidation;
                        }
                        if (options.let) {
                            command.let = options.let;
                        }
                        // we check for undefined specifically here to allow falsy values
                        // eslint-disable-next-line no-restricted-syntax
                        if (options.comment !== undefined) {
                            command.comment = options.comment;
                        }
                        unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;
                        if (unacknowledgedWrite) {
                            if (this.statements.find(function (o) { return o.hint; })) {
                                // TODO(NODE-3541): fix error for hint with unacknowledged writes
                                throw new error_1.MongoCompatibilityError("hint is not supported with unacknowledged writes");
                            }
                        }
                        return [4 /*yield*/, _super.prototype.executeCommand.call(this, server, session, command)];
                    case 1:
                        res = _b.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return UpdateOperation;
}(command_1.CommandOperation));
exports.UpdateOperation = UpdateOperation;
/** @internal */
var UpdateOneOperation = /** @class */ (function (_super) {
    __extends(UpdateOneOperation, _super);
    function UpdateOneOperation(collection, filter, update, options) {
        var _this = _super.call(this, collection.s.namespace, [makeUpdateStatement(filter, update, __assign(__assign({}, options), { multi: false }))], options) || this;
        if (!utils_1.hasAtomicOperators(update)) {
            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');
        }
        return _this;
    }
    UpdateOneOperation.prototype.execute = function (server, session) {
        var _a, _b;
        return __awaiter(this, void 0, Promise, function () {
            var res;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, _super.prototype.execute.call(this, server, session)];
                    case 1:
                        res = _c.sent();
                        if (this.explain != null)
                            return [2 /*return*/, res];
                        if (res.code)
                            throw new error_1.MongoServerError(res);
                        if (res.writeErrors)
                            throw new error_1.MongoServerError(res.writeErrors[0]);
                        return [2 /*return*/, {
                                acknowledged: ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0,
                                modifiedCount: (_b = res.nModified) !== null && _b !== void 0 ? _b : res.n,
                                upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,
                                upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,
                                matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n
                            }];
                }
            });
        });
    };
    return UpdateOneOperation;
}(UpdateOperation));
exports.UpdateOneOperation = UpdateOneOperation;
/** @internal */
var UpdateManyOperation = /** @class */ (function (_super) {
    __extends(UpdateManyOperation, _super);
    function UpdateManyOperation(collection, filter, update, options) {
        var _this = _super.call(this, collection.s.namespace, [makeUpdateStatement(filter, update, __assign(__assign({}, options), { multi: true }))], options) || this;
        if (!utils_1.hasAtomicOperators(update)) {
            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');
        }
        return _this;
    }
    UpdateManyOperation.prototype.execute = function (server, session) {
        var _a, _b;
        return __awaiter(this, void 0, Promise, function () {
            var res;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, _super.prototype.execute.call(this, server, session)];
                    case 1:
                        res = _c.sent();
                        if (this.explain != null)
                            return [2 /*return*/, res];
                        if (res.code)
                            throw new error_1.MongoServerError(res);
                        if (res.writeErrors)
                            throw new error_1.MongoServerError(res.writeErrors[0]);
                        return [2 /*return*/, {
                                acknowledged: ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0,
                                modifiedCount: (_b = res.nModified) !== null && _b !== void 0 ? _b : res.n,
                                upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,
                                upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,
                                matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n
                            }];
                }
            });
        });
    };
    return UpdateManyOperation;
}(UpdateOperation));
exports.UpdateManyOperation = UpdateManyOperation;
/** @internal */
var ReplaceOneOperation = /** @class */ (function (_super) {
    __extends(ReplaceOneOperation, _super);
    function ReplaceOneOperation(collection, filter, replacement, options) {
        var _this = _super.call(this, collection.s.namespace, [makeUpdateStatement(filter, replacement, __assign(__assign({}, options), { multi: false }))], options) || this;
        if (utils_1.hasAtomicOperators(replacement)) {
            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');
        }
        return _this;
    }
    ReplaceOneOperation.prototype.execute = function (server, session) {
        var _a, _b;
        return __awaiter(this, void 0, Promise, function () {
            var res;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, _super.prototype.execute.call(this, server, session)];
                    case 1:
                        res = _c.sent();
                        if (this.explain != null)
                            return [2 /*return*/, res];
                        if (res.code)
                            throw new error_1.MongoServerError(res);
                        if (res.writeErrors)
                            throw new error_1.MongoServerError(res.writeErrors[0]);
                        return [2 /*return*/, {
                                acknowledged: ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0,
                                modifiedCount: (_b = res.nModified) !== null && _b !== void 0 ? _b : res.n,
                                upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,
                                upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,
                                matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n
                            }];
                }
            });
        });
    };
    return ReplaceOneOperation;
}(UpdateOperation));
exports.ReplaceOneOperation = ReplaceOneOperation;
function makeUpdateStatement(filter, update, options) {
    if (filter == null || typeof filter !== 'object') {
        throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');
    }
    if (update == null || typeof update !== 'object') {
        throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');
    }
    var op = { q: filter, u: update };
    if (typeof options.upsert === 'boolean') {
        op.upsert = options.upsert;
    }
    if (options.multi) {
        op.multi = options.multi;
    }
    if (options.hint) {
        op.hint = options.hint;
    }
    if (options.arrayFilters) {
        op.arrayFilters = options.arrayFilters;
    }
    if (options.collation) {
        op.collation = options.collation;
    }
    return op;
}
exports.makeUpdateStatement = makeUpdateStatement;
operation_1.defineAspects(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);
operation_1.defineAspects(UpdateOneOperation, [
    operation_1.Aspect.RETRYABLE,
    operation_1.Aspect.WRITE_OPERATION,
    operation_1.Aspect.EXPLAINABLE,
    operation_1.Aspect.SKIP_COLLATION
]);
operation_1.defineAspects(UpdateManyOperation, [
    operation_1.Aspect.WRITE_OPERATION,
    operation_1.Aspect.EXPLAINABLE,
    operation_1.Aspect.SKIP_COLLATION
]);
operation_1.defineAspects(ReplaceOneOperation, [
    operation_1.Aspect.RETRYABLE,
    operation_1.Aspect.WRITE_OPERATION,
    operation_1.Aspect.SKIP_COLLATION
]);

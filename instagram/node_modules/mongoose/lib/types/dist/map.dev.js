'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Mixed = require('../schema/mixed');

var MongooseError = require('../error/mongooseError');

var clone = require('../helpers/clone');

var deepEqual = require('../utils').deepEqual;

var getConstructorName = require('../helpers/getConstructorName');

var handleSpreadDoc = require('../helpers/document/handleSpreadDoc');

var util = require('util');

var specialProperties = require('../helpers/specialProperties');

var isBsonType = require('../helpers/isBsonType');

var populateModelSymbol = require('../helpers/symbols').populateModelSymbol;
/*!
 * ignore
 */


var MongooseMap =
/*#__PURE__*/
function (_Map) {
  _inherits(MongooseMap, _Map);

  function MongooseMap(v, path, doc, schemaType) {
    var _this;

    _classCallCheck(this, MongooseMap);

    if (getConstructorName(v) === 'Object') {
      v = Object.keys(v).reduce(function (arr, key) {
        return arr.concat([[key, v[key]]]);
      }, []);
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MongooseMap).call(this, v));
    _this.$__parent = doc != null && doc.$__ != null ? doc : null;
    _this.$__path = path;
    _this.$__schemaType = schemaType == null ? new Mixed(path) : schemaType;

    _this.$__runDeferred();

    return _this;
  }

  _createClass(MongooseMap, [{
    key: "$init",
    value: function $init(key, value) {
      checkValidKey(key);

      _get(_getPrototypeOf(MongooseMap.prototype), "set", this).call(this, key, value);

      if (value != null && value.$isSingleNested) {
        value.$basePath = this.$__path + '.' + key;
      }
    }
  }, {
    key: "$__set",
    value: function $__set(key, value) {
      _get(_getPrototypeOf(MongooseMap.prototype), "set", this).call(this, key, value);
    }
    /**
     * Overwrites native Map's `get()` function to support Mongoose getters.
     *
     * @api public
     * @method get
     * @memberOf Map
     */

  }, {
    key: "get",
    value: function get(key, options) {
      if (isBsonType(key, 'ObjectId')) {
        key = key.toString();
      }

      options = options || {};

      if (options.getters === false) {
        return _get(_getPrototypeOf(MongooseMap.prototype), "get", this).call(this, key);
      }

      return this.$__schemaType.applyGetters(_get(_getPrototypeOf(MongooseMap.prototype), "get", this).call(this, key), this.$__parent);
    }
    /**
     * Overwrites native Map's `set()` function to support setters, `populate()`,
     * and change tracking. Note that Mongoose maps _only_ support strings and
     * ObjectIds as keys.
     *
     * Keys also cannot:
     * - be named after special properties `prototype`, `constructor`, and `__proto__`
     * - start with a dollar sign (`$`)
     * - contain any dots (`.`)
     *
     * #### Example:
     *
     *     doc.myMap.set('test', 42); // works
     *     doc.myMap.set({ obj: 42 }, 42); // Throws "Mongoose maps only support string keys"
     *     doc.myMap.set(10, 42); // Throws "Mongoose maps only support string keys"
     *     doc.myMap.set("$test", 42); // Throws "Mongoose maps do not support keys that start with "$", got "$test""
     *
     * @api public
     * @method set
     * @memberOf Map
     */

  }, {
    key: "set",
    value: function set(key, value) {
      if (isBsonType(key, 'ObjectId')) {
        key = key.toString();
      }

      checkValidKey(key);
      value = handleSpreadDoc(value); // Weird, but because you can't assign to `this` before calling `super()`
      // you can't get access to `$__schemaType` to cast in the initial call to
      // `set()` from the `super()` constructor.

      if (this.$__schemaType == null) {
        this.$__deferred = this.$__deferred || [];
        this.$__deferred.push({
          key: key,
          value: value
        });
        return;
      }

      var _fullPath;

      var parent = this.$__parent;
      var populated = parent != null && parent.$__ && parent.$__.populated ? parent.$populated(fullPath.call(this), true) || parent.$populated(this.$__path, true) : null;
      var priorVal = this.get(key);

      if (populated != null) {
        if (this.$__schemaType.$isSingleNested) {
          throw new MongooseError('Cannot manually populate single nested subdoc underneath Map ' + "at path \"".concat(this.$__path, "\". Try using an array instead of a Map."));
        }

        if (Array.isArray(value) && this.$__schemaType.$isMongooseArray) {
          value = value.map(function (v) {
            if (v.$__ == null) {
              v = new populated.options[populateModelSymbol](v);
            } // Doesn't support single nested "in-place" populate


            v.$__.wasPopulated = {
              value: v._doc._id
            };
            return v;
          });
        } else if (value != null) {
          if (value.$__ == null) {
            value = new populated.options[populateModelSymbol](value);
          } // Doesn't support single nested "in-place" populate


          value.$__.wasPopulated = {
            value: value._doc._id
          };
        }
      } else {
        try {
          var options = this.$__schemaType.$isMongooseDocumentArray || this.$__schemaType.$isSingleNested ? {
            path: fullPath.call(this)
          } : null;
          value = this.$__schemaType.applySetters(value, this.$__parent, false, this.get(key), options);
        } catch (error) {
          if (this.$__parent != null && this.$__parent.$__ != null) {
            this.$__parent.invalidate(fullPath.call(this), error);
            return;
          }

          throw error;
        }
      }

      _get(_getPrototypeOf(MongooseMap.prototype), "set", this).call(this, key, value);

      if (parent != null && parent.$__ != null && !deepEqual(value, priorVal)) {
        parent.markModified(fullPath.call(this));
      } // Delay calculating full path unless absolutely necessary, because string
      // concatenation is a bottleneck re: #13171


      function fullPath() {
        if (_fullPath) {
          return _fullPath;
        }

        _fullPath = this.$__path + '.' + key;
        return _fullPath;
      }
    }
    /**
     * Overwrites native Map's `clear()` function to support change tracking.
     *
     * @api public
     * @method clear
     * @memberOf Map
     */

  }, {
    key: "clear",
    value: function clear() {
      _get(_getPrototypeOf(MongooseMap.prototype), "clear", this).call(this);

      var parent = this.$__parent;

      if (parent != null) {
        parent.markModified(this.$__path);
      }
    }
    /**
     * Overwrites native Map's `delete()` function to support change tracking.
     *
     * @api public
     * @method delete
     * @memberOf Map
     */

  }, {
    key: "delete",
    value: function _delete(key) {
      if (isBsonType(key, 'ObjectId')) {
        key = key.toString();
      }

      this.set(key, undefined);
      return _get(_getPrototypeOf(MongooseMap.prototype), "delete", this).call(this, key);
    }
    /**
     * Converts this map to a native JavaScript Map so the MongoDB driver can serialize it.
     *
     * @api public
     * @method toBSON
     * @memberOf Map
     */

  }, {
    key: "toBSON",
    value: function toBSON() {
      return new Map(this);
    }
  }, {
    key: "toObject",
    value: function toObject(options) {
      if (options && options.flattenMaps) {
        var ret = {};
        var keys = this.keys();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;
            ret[key] = clone(this.get(key), options);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return ret;
      }

      return new Map(this);
    }
  }, {
    key: "$toObject",
    value: function $toObject() {
      return this.constructor.prototype.toObject.apply(this, arguments);
    }
    /**
     * Converts this map to a native JavaScript Map for `JSON.stringify()`. Set
     * the `flattenMaps` option to convert this map to a POJO instead.
     *
     * #### Example:
     *
     *     doc.myMap.toJSON() instanceof Map; // true
     *     doc.myMap.toJSON({ flattenMaps: true }) instanceof Map; // false
     *
     * @api public
     * @method toJSON
     * @param {Object} [options]
     * @param {Boolean} [options.flattenMaps=false] set to `true` to convert the map to a POJO rather than a native JavaScript map
     * @memberOf Map
     */

  }, {
    key: "toJSON",
    value: function toJSON(options) {
      if (typeof (options && options.flattenMaps) === 'boolean' ? options.flattenMaps : true) {
        var ret = {};
        var keys = this.keys();
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;
            ret[key] = clone(this.get(key), options);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return ret;
      }

      return new Map(this);
    }
  }, {
    key: "inspect",
    value: function inspect() {
      return new Map(this);
    }
  }, {
    key: "$__runDeferred",
    value: function $__runDeferred() {
      if (!this.$__deferred) {
        return;
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.$__deferred[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var keyValueObject = _step3.value;
          this.set(keyValueObject.key, keyValueObject.value);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.$__deferred = null;
    }
  }]);

  return MongooseMap;
}(_wrapNativeSuper(Map));

if (util.inspect.custom) {
  Object.defineProperty(MongooseMap.prototype, util.inspect.custom, {
    enumerable: false,
    writable: false,
    configurable: false,
    value: MongooseMap.prototype.inspect
  });
}

Object.defineProperty(MongooseMap.prototype, '$__set', {
  enumerable: false,
  writable: true,
  configurable: false
});
Object.defineProperty(MongooseMap.prototype, '$__parent', {
  enumerable: false,
  writable: true,
  configurable: false
});
Object.defineProperty(MongooseMap.prototype, '$__path', {
  enumerable: false,
  writable: true,
  configurable: false
});
Object.defineProperty(MongooseMap.prototype, '$__schemaType', {
  enumerable: false,
  writable: true,
  configurable: false
});
/**
 * Set to `true` for all Mongoose map instances
 *
 * @api public
 * @property $isMongooseMap
 * @memberOf MongooseMap
 * @instance
 */

Object.defineProperty(MongooseMap.prototype, '$isMongooseMap', {
  enumerable: false,
  writable: false,
  configurable: false,
  value: true
});
Object.defineProperty(MongooseMap.prototype, '$__deferredCalls', {
  enumerable: false,
  writable: false,
  configurable: false,
  value: true
});
/**
 * Since maps are stored as objects under the hood, keys must be strings
 * and can't contain any invalid characters
 * @param {String} key
 * @api private
 */

function checkValidKey(key) {
  var keyType = _typeof(key);

  if (keyType !== 'string') {
    throw new TypeError("Mongoose maps only support string keys, got ".concat(keyType));
  }

  if (key.startsWith('$')) {
    throw new Error("Mongoose maps do not support keys that start with \"$\", got \"".concat(key, "\""));
  }

  if (key.includes('.')) {
    throw new Error("Mongoose maps do not support keys that contain \".\", got \"".concat(key, "\""));
  }

  if (specialProperties.has(key)) {
    throw new Error("Mongoose maps do not support reserved key name \"".concat(key, "\""));
  }
}

module.exports = MongooseMap;
"use strict";
exports.__esModule = true;
exports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;
var constants_1 = require("../constants");
/**
 * Emitted when server description changes, but does NOT include changes to the RTT.
 * @public
 * @category Event
 */
var ServerDescriptionChangedEvent = /** @class */ (function () {
    /** @internal */
    function ServerDescriptionChangedEvent(topologyId, address, previousDescription, newDescription) {
        this.name = constants_1.SERVER_DESCRIPTION_CHANGED;
        this.topologyId = topologyId;
        this.address = address;
        this.previousDescription = previousDescription;
        this.newDescription = newDescription;
    }
    return ServerDescriptionChangedEvent;
}());
exports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;
/**
 * Emitted when server is initialized.
 * @public
 * @category Event
 */
var ServerOpeningEvent = /** @class */ (function () {
    /** @internal */
    function ServerOpeningEvent(topologyId, address) {
        /** @internal */
        this.name = constants_1.SERVER_OPENING;
        this.topologyId = topologyId;
        this.address = address;
    }
    return ServerOpeningEvent;
}());
exports.ServerOpeningEvent = ServerOpeningEvent;
/**
 * Emitted when server is closed.
 * @public
 * @category Event
 */
var ServerClosedEvent = /** @class */ (function () {
    /** @internal */
    function ServerClosedEvent(topologyId, address) {
        /** @internal */
        this.name = constants_1.SERVER_CLOSED;
        this.topologyId = topologyId;
        this.address = address;
    }
    return ServerClosedEvent;
}());
exports.ServerClosedEvent = ServerClosedEvent;
/**
 * Emitted when topology description changes.
 * @public
 * @category Event
 */
var TopologyDescriptionChangedEvent = /** @class */ (function () {
    /** @internal */
    function TopologyDescriptionChangedEvent(topologyId, previousDescription, newDescription) {
        /** @internal */
        this.name = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;
        this.topologyId = topologyId;
        this.previousDescription = previousDescription;
        this.newDescription = newDescription;
    }
    return TopologyDescriptionChangedEvent;
}());
exports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;
/**
 * Emitted when topology is initialized.
 * @public
 * @category Event
 */
var TopologyOpeningEvent = /** @class */ (function () {
    /** @internal */
    function TopologyOpeningEvent(topologyId) {
        /** @internal */
        this.name = constants_1.TOPOLOGY_OPENING;
        this.topologyId = topologyId;
    }
    return TopologyOpeningEvent;
}());
exports.TopologyOpeningEvent = TopologyOpeningEvent;
/**
 * Emitted when topology is closed.
 * @public
 * @category Event
 */
var TopologyClosedEvent = /** @class */ (function () {
    /** @internal */
    function TopologyClosedEvent(topologyId) {
        /** @internal */
        this.name = constants_1.TOPOLOGY_CLOSED;
        this.topologyId = topologyId;
    }
    return TopologyClosedEvent;
}());
exports.TopologyClosedEvent = TopologyClosedEvent;
/**
 * Emitted when the server monitor’s hello command is started - immediately before
 * the hello command is serialized into raw BSON and written to the socket.
 *
 * @public
 * @category Event
 */
var ServerHeartbeatStartedEvent = /** @class */ (function () {
    /** @internal */
    function ServerHeartbeatStartedEvent(connectionId, awaited) {
        /** @internal */
        this.name = constants_1.SERVER_HEARTBEAT_STARTED;
        this.connectionId = connectionId;
        this.awaited = awaited;
    }
    return ServerHeartbeatStartedEvent;
}());
exports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;
/**
 * Emitted when the server monitor’s hello succeeds.
 * @public
 * @category Event
 */
var ServerHeartbeatSucceededEvent = /** @class */ (function () {
    /** @internal */
    function ServerHeartbeatSucceededEvent(connectionId, duration, reply, awaited) {
        /** @internal */
        this.name = constants_1.SERVER_HEARTBEAT_SUCCEEDED;
        this.connectionId = connectionId;
        this.duration = duration;
        this.reply = reply !== null && reply !== void 0 ? reply : {};
        this.awaited = awaited;
    }
    return ServerHeartbeatSucceededEvent;
}());
exports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;
/**
 * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.
 * @public
 * @category Event
 */
var ServerHeartbeatFailedEvent = /** @class */ (function () {
    /** @internal */
    function ServerHeartbeatFailedEvent(connectionId, duration, failure, awaited) {
        /** @internal */
        this.name = constants_1.SERVER_HEARTBEAT_FAILED;
        this.connectionId = connectionId;
        this.duration = duration;
        this.failure = failure;
        this.awaited = awaited;
    }
    return ServerHeartbeatFailedEvent;
}());
exports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;

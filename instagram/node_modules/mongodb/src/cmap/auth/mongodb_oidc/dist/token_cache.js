"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.TokenCache = void 0;
var error_1 = require("../../../error");
var MongoOIDCError = /** @class */ (function (_super) {
    __extends(MongoOIDCError, _super);
    function MongoOIDCError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MongoOIDCError;
}(error_1.MongoDriverError));
/** @internal */
var TokenCache = /** @class */ (function () {
    function TokenCache() {
    }
    Object.defineProperty(TokenCache.prototype, "hasAccessToken", {
        get: function () {
            return !!this.accessToken;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TokenCache.prototype, "hasRefreshToken", {
        get: function () {
            return !!this.refreshToken;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TokenCache.prototype, "hasIdpInfo", {
        get: function () {
            return !!this.idpInfo;
        },
        enumerable: false,
        configurable: true
    });
    TokenCache.prototype.getAccessToken = function () {
        if (!this.accessToken) {
            throw new MongoOIDCError('Attempted to get an access token when none exists.');
        }
        return this.accessToken;
    };
    TokenCache.prototype.getRefreshToken = function () {
        if (!this.refreshToken) {
            throw new MongoOIDCError('Attempted to get a refresh token when none exists.');
        }
        return this.refreshToken;
    };
    TokenCache.prototype.getIdpInfo = function () {
        if (!this.idpInfo) {
            throw new MongoOIDCError('Attempted to get IDP information when none exists.');
        }
        return this.idpInfo;
    };
    TokenCache.prototype.put = function (response, idpInfo) {
        this.accessToken = response.accessToken;
        this.refreshToken = response.refreshToken;
        this.expiresInSeconds = response.expiresInSeconds;
        if (idpInfo) {
            this.idpInfo = idpInfo;
        }
    };
    TokenCache.prototype.removeAccessToken = function () {
        this.accessToken = undefined;
    };
    TokenCache.prototype.removeRefreshToken = function () {
        this.refreshToken = undefined;
    };
    return TokenCache;
}());
exports.TokenCache = TokenCache;

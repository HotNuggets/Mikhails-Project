'use strict';
/*!
 * Module dependencies.
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MongooseError = require('./mongooseError');

var util = require('util');
/**
 * Casting Error constructor.
 *
 * @param {String} type
 * @param {String} value
 * @inherits MongooseError
 * @api private
 */


var CastError =
/*#__PURE__*/
function (_MongooseError) {
  _inherits(CastError, _MongooseError);

  function CastError(type, value, path, reason, schemaType) {
    var _this;

    _classCallCheck(this, CastError);

    // If no args, assume we'll `init()` later.
    if (arguments.length > 0) {
      var valueType = getValueType(value);
      var messageFormat = getMessageFormat(schemaType);
      var msg = formatMessage(null, type, value, path, messageFormat, valueType, reason);
      _this = _possibleConstructorReturn(this, _getPrototypeOf(CastError).call(this, msg));

      _this.init(type, value, path, reason, schemaType);
    } else {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(CastError).call(this, formatMessage()));
    }

    return _possibleConstructorReturn(_this);
  }

  _createClass(CastError, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        stringValue: this.stringValue,
        valueType: this.valueType,
        kind: this.kind,
        value: this.value,
        path: this.path,
        reason: this.reason,
        name: this.name,
        message: this.message
      };
    }
    /*!
     * ignore
     */

  }, {
    key: "init",
    value: function init(type, value, path, reason, schemaType) {
      this.stringValue = getStringValue(value);
      this.messageFormat = getMessageFormat(schemaType);
      this.kind = type;
      this.value = value;
      this.path = path;
      this.reason = reason;
      this.valueType = getValueType(value);
    }
    /**
     * ignore
     * @param {Readonly<CastError>} other
     * @api private
     */

  }, {
    key: "copy",
    value: function copy(other) {
      this.messageFormat = other.messageFormat;
      this.stringValue = other.stringValue;
      this.kind = other.kind;
      this.value = other.value;
      this.path = other.path;
      this.reason = other.reason;
      this.message = other.message;
      this.valueType = other.valueType;
    }
    /*!
     * ignore
     */

  }, {
    key: "setModel",
    value: function setModel(model) {
      this.message = formatMessage(model, this.kind, this.value, this.path, this.messageFormat, this.valueType);
    }
  }]);

  return CastError;
}(MongooseError);

Object.defineProperty(CastError.prototype, 'name', {
  value: 'CastError'
});

function getStringValue(value) {
  var stringValue = util.inspect(value);
  stringValue = stringValue.replace(/^'|'$/g, '"');

  if (!stringValue.startsWith('"')) {
    stringValue = '"' + stringValue + '"';
  }

  return stringValue;
}

function getValueType(value) {
  if (value == null) {
    return '' + value;
  }

  var t = _typeof(value);

  if (t !== 'object') {
    return t;
  }

  if (typeof value.constructor !== 'function') {
    return t;
  }

  return value.constructor.name;
}

function getMessageFormat(schemaType) {
  var messageFormat = schemaType && schemaType._castErrorMessage || null;

  if (typeof messageFormat === 'string' || typeof messageFormat === 'function') {
    return messageFormat;
  }
}
/*!
 * ignore
 */


function formatMessage(model, kind, value, path, messageFormat, valueType, reason) {
  if (typeof messageFormat === 'string') {
    var stringValue = getStringValue(value);
    var ret = messageFormat.replace('{KIND}', kind).replace('{VALUE}', stringValue).replace('{PATH}', path);

    if (model != null) {
      ret = ret.replace('{MODEL}', model.modelName);
    }

    return ret;
  } else if (typeof messageFormat === 'function') {
    return messageFormat(value, path, model, kind);
  } else {
    var _stringValue = getStringValue(value);

    var valueTypeMsg = valueType ? ' (type ' + valueType + ')' : '';

    var _ret = 'Cast to ' + kind + ' failed for value ' + _stringValue + valueTypeMsg + ' at path "' + path + '"';

    if (model != null) {
      _ret += ' for model "' + model.modelName + '"';
    }

    if (reason != null && typeof reason.constructor === 'function' && reason.constructor.name !== 'AssertionError' && reason.constructor.name !== 'Error') {
      _ret += ' because of "' + reason.constructor.name + '"';
    }

    return _ret;
  }
}
/*!
 * exports
 */


module.exports = CastError;
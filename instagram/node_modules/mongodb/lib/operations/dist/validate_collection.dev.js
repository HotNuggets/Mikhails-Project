"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidateCollectionOperation = void 0;

var error_1 = require("../error");

var command_1 = require("./command");
/** @internal */


var ValidateCollectionOperation =
/*#__PURE__*/
function (_command_1$CommandOpe) {
  _inherits(ValidateCollectionOperation, _command_1$CommandOpe);

  function ValidateCollectionOperation(admin, collectionName, options) {
    var _this;

    _classCallCheck(this, ValidateCollectionOperation);

    // Decorate command with extra options
    var command = {
      validate: collectionName
    };
    var keys = Object.keys(options);

    for (var i = 0; i < keys.length; i++) {
      if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {
        command[keys[i]] = options[keys[i]];
      }
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValidateCollectionOperation).call(this, admin.s.db, options));
    _this.options = options;
    _this.command = command;
    _this.collectionName = collectionName;
    return _this;
  }

  _createClass(ValidateCollectionOperation, [{
    key: "execute",
    value: function execute(server, session) {
      var collectionName, doc;
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              collectionName = this.collectionName;
              _context.next = 3;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(ValidateCollectionOperation.prototype), "executeCommand", this).call(this, server, session, this.command));

            case 3:
              doc = _context.sent;

              if (!(doc.result != null && typeof doc.result !== 'string')) {
                _context.next = 6;
                break;
              }

              throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');

            case 6:
              if (!(doc.result != null && doc.result.match(/exception|corrupt/) != null)) {
                _context.next = 8;
                break;
              }

              throw new error_1.MongoUnexpectedServerResponseError("Invalid collection ".concat(collectionName));

            case 8:
              if (!(doc.valid != null && !doc.valid)) {
                _context.next = 10;
                break;
              }

              throw new error_1.MongoUnexpectedServerResponseError("Invalid collection ".concat(collectionName));

            case 10:
              return _context.abrupt("return", doc);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "commandName",
    get: function get() {
      return 'validate';
    }
  }]);

  return ValidateCollectionOperation;
}(command_1.CommandOperation);

exports.ValidateCollectionOperation = ValidateCollectionOperation;
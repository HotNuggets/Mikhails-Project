"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.ChangeStream = void 0;
var collection_1 = require("./collection");
var constants_1 = require("./constants");
var change_stream_cursor_1 = require("./cursor/change_stream_cursor");
var db_1 = require("./db");
var error_1 = require("./error");
var mongo_client_1 = require("./mongo_client");
var mongo_types_1 = require("./mongo_types");
var resource_management_1 = require("./resource_management");
var utils_1 = require("./utils");
/** @internal */
var kCursorStream = Symbol('cursorStream');
/** @internal */
var kClosed = Symbol('closed');
/** @internal */
var kMode = Symbol('mode');
var CHANGE_STREAM_OPTIONS = [
    'resumeAfter',
    'startAfter',
    'startAtOperationTime',
    'fullDocument',
    'fullDocumentBeforeChange',
    'showExpandedEvents'
];
var CHANGE_DOMAIN_TYPES = {
    COLLECTION: Symbol('Collection'),
    DATABASE: Symbol('Database'),
    CLUSTER: Symbol('Cluster')
};
var CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];
var NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';
var CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';
/**
 * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.
 * @public
 */
var ChangeStream = /** @class */ (function (_super) {
    __extends(ChangeStream, _super);
    /**
     * @internal
     *
     * @param parent - The parent object that created this change stream
     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents
     */
    function ChangeStream(parent, pipeline, options) {
        if (pipeline === void 0) { pipeline = []; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.pipeline = pipeline;
        _this.options = __assign({}, options);
        delete _this.options.writeConcern;
        if (parent instanceof collection_1.Collection) {
            _this.type = CHANGE_DOMAIN_TYPES.COLLECTION;
        }
        else if (parent instanceof db_1.Db) {
            _this.type = CHANGE_DOMAIN_TYPES.DATABASE;
        }
        else if (parent instanceof mongo_client_1.MongoClient) {
            _this.type = CHANGE_DOMAIN_TYPES.CLUSTER;
        }
        else {
            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');
        }
        _this.parent = parent;
        _this.namespace = parent.s.namespace;
        if (!_this.options.readPreference && parent.readPreference) {
            _this.options.readPreference = parent.readPreference;
        }
        // Create contained Change Stream cursor
        _this.cursor = _this._createChangeStreamCursor(options);
        _this[kClosed] = false;
        _this[kMode] = false;
        // Listen for any `change` listeners being added to ChangeStream
        _this.on('newListener', function (eventName) {
            if (eventName === 'change' && _this.cursor && _this.listenerCount('change') === 0) {
                _this._streamEvents(_this.cursor);
            }
        });
        _this.on('removeListener', function (eventName) {
            var _a;
            if (eventName === 'change' && _this.listenerCount('change') === 0 && _this.cursor) {
                (_a = _this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');
            }
        });
        return _this;
    }
    /** @internal */
    ChangeStream.prototype.asyncDispose = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.close()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(ChangeStream.prototype, "cursorStream", {
        /** @internal */
        get: function () {
            return this[kCursorStream];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChangeStream.prototype, "resumeToken", {
        /** The cached resume token that is used to resume after the most recently returned change. */
        get: function () {
            var _a;
            return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;
        },
        enumerable: false,
        configurable: true
    });
    /** Check if there is any document still available in the Change Stream */
    ChangeStream.prototype.hasNext = function () {
        return __awaiter(this, void 0, Promise, function () {
            var hasNext, error_2, error_3, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._setIsIterator();
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 14];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 13]);
                        return [4 /*yield*/, this.cursor.hasNext()];
                    case 3:
                        hasNext = _a.sent();
                        return [2 /*return*/, hasNext];
                    case 4:
                        error_2 = _a.sent();
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 12]);
                        return [4 /*yield*/, this._processErrorIteratorMode(error_2)];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 12];
                    case 7:
                        error_3 = _a.sent();
                        _a.label = 8;
                    case 8:
                        _a.trys.push([8, 10, , 11]);
                        return [4 /*yield*/, this.close()];
                    case 9:
                        _a.sent();
                        return [3 /*break*/, 11];
                    case 10:
                        error_4 = _a.sent();
                        utils_1.squashError(error_4);
                        return [3 /*break*/, 11];
                    case 11: throw error_3;
                    case 12: return [3 /*break*/, 13];
                    case 13: return [3 /*break*/, 1];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    /** Get the next available document from the Change Stream. */
    ChangeStream.prototype.next = function () {
        return __awaiter(this, void 0, Promise, function () {
            var change, processedChange, error_5, error_6, error_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._setIsIterator();
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 14];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 13]);
                        return [4 /*yield*/, this.cursor.next()];
                    case 3:
                        change = _a.sent();
                        processedChange = this._processChange(change !== null && change !== void 0 ? change : null);
                        return [2 /*return*/, processedChange];
                    case 4:
                        error_5 = _a.sent();
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 12]);
                        return [4 /*yield*/, this._processErrorIteratorMode(error_5)];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 12];
                    case 7:
                        error_6 = _a.sent();
                        _a.label = 8;
                    case 8:
                        _a.trys.push([8, 10, , 11]);
                        return [4 /*yield*/, this.close()];
                    case 9:
                        _a.sent();
                        return [3 /*break*/, 11];
                    case 10:
                        error_7 = _a.sent();
                        utils_1.squashError(error_7);
                        return [3 /*break*/, 11];
                    case 11: throw error_6;
                    case 12: return [3 /*break*/, 13];
                    case 13: return [3 /*break*/, 1];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned
     */
    ChangeStream.prototype.tryNext = function () {
        return __awaiter(this, void 0, Promise, function () {
            var change, error_8, error_9, error_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._setIsIterator();
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 14];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 13]);
                        return [4 /*yield*/, this.cursor.tryNext()];
                    case 3:
                        change = _a.sent();
                        return [2 /*return*/, change !== null && change !== void 0 ? change : null];
                    case 4:
                        error_8 = _a.sent();
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 12]);
                        return [4 /*yield*/, this._processErrorIteratorMode(error_8)];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 12];
                    case 7:
                        error_9 = _a.sent();
                        _a.label = 8;
                    case 8:
                        _a.trys.push([8, 10, , 11]);
                        return [4 /*yield*/, this.close()];
                    case 9:
                        _a.sent();
                        return [3 /*break*/, 11];
                    case 10:
                        error_10 = _a.sent();
                        utils_1.squashError(error_10);
                        return [3 /*break*/, 11];
                    case 11: throw error_9;
                    case 12: return [3 /*break*/, 13];
                    case 13: return [3 /*break*/, 1];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    ChangeStream.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var error_11;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.closed) return [3 /*break*/, 2];
                        return [4 /*yield*/, __await(void 0)];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        _b.trys.push([2, , 8, 12]);
                        _b.label = 3;
                    case 3:
                        if (!true) return [3 /*break*/, 7];
                        return [4 /*yield*/, __await(this.next())];
                    case 4: return [4 /*yield*/, __await.apply(void 0, [_b.sent()])];
                    case 5: return [4 /*yield*/, _b.sent()];
                    case 6:
                        _b.sent();
                        return [3 /*break*/, 3];
                    case 7: return [3 /*break*/, 12];
                    case 8:
                        _b.trys.push([8, 10, , 11]);
                        return [4 /*yield*/, __await(this.close())];
                    case 9:
                        _b.sent();
                        return [3 /*break*/, 11];
                    case 10:
                        error_11 = _b.sent();
                        utils_1.squashError(error_11);
                        return [3 /*break*/, 11];
                    case 11: return [7 /*endfinally*/];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(ChangeStream.prototype, "closed", {
        /** Is the cursor closed */
        get: function () {
            return this[kClosed] || this.cursor.closed;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Frees the internal resources used by the change stream.
     */
    ChangeStream.prototype.close = function () {
        return __awaiter(this, void 0, Promise, function () {
            var cursor;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this[kClosed] = true;
                        cursor = this.cursor;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 4]);
                        return [4 /*yield*/, cursor.close()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        this._endStream();
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Return a modified Readable stream including a possible transform method.
     *
     * NOTE: When using a Stream to process change stream events, the stream will
     * NOT automatically resume in the case a resumable error is encountered.
     *
     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed
     */
    ChangeStream.prototype.stream = function (options) {
        if (this.closed) {
            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);
        }
        this.streamOptions = options;
        return this.cursor.stream(options);
    };
    /** @internal */
    ChangeStream.prototype._setIsEmitter = function () {
        if (this[kMode] === 'iterator') {
            // TODO(NODE-3485): Replace with MongoChangeStreamModeError
            throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');
        }
        this[kMode] = 'emitter';
    };
    /** @internal */
    ChangeStream.prototype._setIsIterator = function () {
        if (this[kMode] === 'emitter') {
            // TODO(NODE-3485): Replace with MongoChangeStreamModeError
            throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');
        }
        this[kMode] = 'iterator';
    };
    /**
     * Create a new change stream cursor based on self's configuration
     * @internal
     */
    ChangeStream.prototype._createChangeStreamCursor = function (options) {
        var _this = this;
        var changeStreamStageOptions = utils_1.filterOptions(options, CHANGE_STREAM_OPTIONS);
        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {
            changeStreamStageOptions.allChangesForCluster = true;
        }
        var pipeline = __spreadArrays([{ $changeStream: changeStreamStageOptions }], this.pipeline);
        var client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER
            ? this.parent
            : this.type === CHANGE_DOMAIN_TYPES.DATABASE
                ? this.parent.client
                : this.type === CHANGE_DOMAIN_TYPES.COLLECTION
                    ? this.parent.client
                    : null;
        if (client == null) {
            // This should never happen because of the assertion in the constructor
            throw new error_1.MongoRuntimeError("Changestream type should only be one of cluster, database, collection. Found " + this.type.toString());
        }
        var changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);
        var _loop_1 = function (event) {
            changeStreamCursor.on(event, function (e) { return _this.emit(event, e); });
        };
        for (var _i = 0, CHANGE_STREAM_EVENTS_1 = CHANGE_STREAM_EVENTS; _i < CHANGE_STREAM_EVENTS_1.length; _i++) {
            var event = CHANGE_STREAM_EVENTS_1[_i];
            _loop_1(event);
        }
        if (this.listenerCount(ChangeStream.CHANGE) > 0) {
            this._streamEvents(changeStreamCursor);
        }
        return changeStreamCursor;
    };
    /** @internal */
    ChangeStream.prototype._closeEmitterModeWithError = function (error) {
        this.emit(ChangeStream.ERROR, error);
        this.close().then(undefined, utils_1.squashError);
    };
    /** @internal */
    ChangeStream.prototype._streamEvents = function (cursor) {
        var _this = this;
        var _a;
        this._setIsEmitter();
        var stream = (_a = this[kCursorStream]) !== null && _a !== void 0 ? _a : cursor.stream();
        this[kCursorStream] = stream;
        stream.on('data', function (change) {
            try {
                var processedChange = _this._processChange(change);
                _this.emit(ChangeStream.CHANGE, processedChange);
            }
            catch (error) {
                _this.emit(ChangeStream.ERROR, error);
            }
        });
        stream.on('error', function (error) { return _this._processErrorStreamMode(error); });
    };
    /** @internal */
    ChangeStream.prototype._endStream = function () {
        var cursorStream = this[kCursorStream];
        if (cursorStream) {
            ['data', 'close', 'end', 'error'].forEach(function (event) { return cursorStream.removeAllListeners(event); });
            cursorStream.destroy();
        }
        this[kCursorStream] = undefined;
    };
    /** @internal */
    ChangeStream.prototype._processChange = function (change) {
        if (this[kClosed]) {
            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError
            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);
        }
        // a null change means the cursor has been notified, implicitly closing the change stream
        if (change == null) {
            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError
            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);
        }
        if (change && !change._id) {
            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);
        }
        // cache the resume token
        this.cursor.cacheResumeToken(change._id);
        // wipe the startAtOperationTime if there was one so that there won't be a conflict
        // between resumeToken and startAtOperationTime if we need to reconnect the cursor
        this.options.startAtOperationTime = undefined;
        return change;
    };
    /** @internal */
    ChangeStream.prototype._processErrorStreamMode = function (changeStreamError) {
        var _this = this;
        // If the change stream has been closed explicitly, do not process error.
        if (this[kClosed])
            return;
        if (error_1.isResumableError(changeStreamError, this.cursor.maxWireVersion)) {
            this._endStream();
            this.cursor.close().then(undefined, utils_1.squashError);
            var topology = utils_1.getTopology(this.parent);
            topology
                .selectServer(this.cursor.readPreference, {
                operationName: 'reconnect topology in change stream'
            })
                .then(function () {
                _this.cursor = _this._createChangeStreamCursor(_this.cursor.resumeOptions);
            }, function () { return _this._closeEmitterModeWithError(changeStreamError); });
        }
        else {
            this._closeEmitterModeWithError(changeStreamError);
        }
    };
    /** @internal */
    ChangeStream.prototype._processErrorIteratorMode = function (changeStreamError) {
        return __awaiter(this, void 0, void 0, function () {
            var error_12, error_13, topology, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this[kClosed]) {
                            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError
                            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);
                        }
                        if (!!error_1.isResumableError(changeStreamError, this.cursor.maxWireVersion)) return [3 /*break*/, 5];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.close()];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_12 = _b.sent();
                        utils_1.squashError(error_12);
                        return [3 /*break*/, 4];
                    case 4: throw changeStreamError;
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.cursor.close()];
                    case 6:
                        _b.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        error_13 = _b.sent();
                        utils_1.squashError(error_13);
                        return [3 /*break*/, 8];
                    case 8:
                        topology = utils_1.getTopology(this.parent);
                        _b.label = 9;
                    case 9:
                        _b.trys.push([9, 11, , 13]);
                        return [4 /*yield*/, topology.selectServer(this.cursor.readPreference, {
                                operationName: 'reconnect topology in change stream'
                            })];
                    case 10:
                        _b.sent();
                        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);
                        return [3 /*break*/, 13];
                    case 11:
                        _a = _b.sent();
                        // if the topology can't reconnect, close the stream
                        return [4 /*yield*/, this.close()];
                    case 12:
                        // if the topology can't reconnect, close the stream
                        _b.sent();
                        throw changeStreamError;
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    /** @event */
    ChangeStream.RESPONSE = constants_1.RESPONSE;
    /** @event */
    ChangeStream.MORE = constants_1.MORE;
    /** @event */
    ChangeStream.INIT = constants_1.INIT;
    /** @event */
    ChangeStream.CLOSE = constants_1.CLOSE;
    /**
     * Fired for each new matching change in the specified namespace. Attaching a `change`
     * event listener to a Change Stream will switch the stream into flowing mode. Data will
     * then be passed as soon as it is available.
     * @event
     */
    ChangeStream.CHANGE = constants_1.CHANGE;
    /** @event */
    ChangeStream.END = constants_1.END;
    /** @event */
    ChangeStream.ERROR = constants_1.ERROR;
    /**
     * Emitted each time the change stream stores a new resume token.
     * @event
     */
    ChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;
    return ChangeStream;
}(mongo_types_1.TypedEventEmitter));
exports.ChangeStream = ChangeStream;
resource_management_1.configureResourceManagement(ChangeStream.prototype);

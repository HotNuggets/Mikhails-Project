"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
exports.__esModule = true;
exports.autoSelectSocketOptions = exports.ClientEncryption = void 0;
var bson_1 = require("../bson");
var deps_1 = require("../deps");
var utils_1 = require("../utils");
var cryptoCallbacks = require("./crypto_callbacks");
var errors_1 = require("./errors");
var index_1 = require("./providers/index");
var state_machine_1 = require("./state_machine");
/**
 * @public
 * The public interface for explicit in-use encryption
 */
var ClientEncryption = /** @class */ (function () {
    /**
     * Create a new encryption instance
     *
     * @example
     * ```ts
     * new ClientEncryption(mongoClient, {
     *   keyVaultNamespace: 'client.encryption',
     *   kmsProviders: {
     *     local: {
     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer
     *     }
     *   }
     * });
     * ```
     *
     * @example
     * ```ts
     * new ClientEncryption(mongoClient, {
     *   keyVaultNamespace: 'client.encryption',
     *   kmsProviders: {
     *     aws: {
     *       accessKeyId: AWS_ACCESS_KEY,
     *       secretAccessKey: AWS_SECRET_KEY
     *     }
     *   }
     * });
     * ```
     */
    function ClientEncryption(client, options) {
        var _a, _b;
        this._client = client;
        this._proxyOptions = (_a = options.proxyOptions) !== null && _a !== void 0 ? _a : {};
        this._tlsOptions = (_b = options.tlsOptions) !== null && _b !== void 0 ? _b : {};
        this._kmsProviders = options.kmsProviders || {};
        if (options.keyVaultNamespace == null) {
            throw new errors_1.MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');
        }
        var mongoCryptOptions = __assign(__assign({}, options), { cryptoCallbacks: cryptoCallbacks, kmsProviders: !Buffer.isBuffer(this._kmsProviders)
                ? bson_1.serialize(this._kmsProviders)
                : this._kmsProviders });
        this._keyVaultNamespace = options.keyVaultNamespace;
        this._keyVaultClient = options.keyVaultClient || client;
        var MongoCrypt = ClientEncryption.getMongoCrypt();
        this._mongoCrypt = new MongoCrypt(mongoCryptOptions);
    }
    /** @internal */
    ClientEncryption.getMongoCrypt = function () {
        var encryption = deps_1.getMongoDBClientEncryption();
        if ('kModuleError' in encryption) {
            throw encryption.kModuleError;
        }
        return encryption.MongoCrypt;
    };
    /**
     * Creates a data key used for explicit encryption and inserts it into the key vault namespace
     *
     * @example
     * ```ts
     * // Using async/await to create a local key
     * const dataKeyId = await clientEncryption.createDataKey('local');
     * ```
     *
     * @example
     * ```ts
     * // Using async/await to create an aws key
     * const dataKeyId = await clientEncryption.createDataKey('aws', {
     *   masterKey: {
     *     region: 'us-east-1',
     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here
     *   }
     * });
     * ```
     *
     * @example
     * ```ts
     * // Using async/await to create an aws key with a keyAltName
     * const dataKeyId = await clientEncryption.createDataKey('aws', {
     *   masterKey: {
     *     region: 'us-east-1',
     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here
     *   },
     *   keyAltNames: [ 'mySpecialKey' ]
     * });
     * ```
     */
    ClientEncryption.prototype.createDataKey = function (provider, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, Promise, function () {
            var keyAltNames, keyMaterial, dataKeyBson, context, stateMachine, dataKey, _a, _b, dbName, collectionName, insertedId;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {
                            throw new errors_1.MongoCryptInvalidArgumentError("Option \"keyAltNames\" must be an array of strings, but was of type " + typeof options.keyAltNames + ".");
                        }
                        keyAltNames = undefined;
                        if (options.keyAltNames && options.keyAltNames.length > 0) {
                            keyAltNames = options.keyAltNames.map(function (keyAltName, i) {
                                if (typeof keyAltName !== 'string') {
                                    throw new errors_1.MongoCryptInvalidArgumentError("Option \"keyAltNames\" must be an array of strings, but item at index " + i + " was of type " + typeof keyAltName);
                                }
                                return bson_1.serialize({ keyAltName: keyAltName });
                            });
                        }
                        keyMaterial = undefined;
                        if (options.keyMaterial) {
                            keyMaterial = bson_1.serialize({ keyMaterial: options.keyMaterial });
                        }
                        dataKeyBson = bson_1.serialize(__assign({ provider: provider }, options.masterKey));
                        context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {
                            keyAltNames: keyAltNames,
                            keyMaterial: keyMaterial
                        });
                        stateMachine = new state_machine_1.StateMachine({
                            proxyOptions: this._proxyOptions,
                            tlsOptions: this._tlsOptions,
                            socketOptions: autoSelectSocketOptions(this._client.options)
                        });
                        _a = bson_1.deserialize;
                        return [4 /*yield*/, stateMachine.execute(this, context)];
                    case 1:
                        dataKey = _a.apply(void 0, [_c.sent()]);
                        _b = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _b.db, collectionName = _b.collection;
                        return [4 /*yield*/, this._keyVaultClient
                                .db(dbName)
                                .collection(collectionName)
                                .insertOne(dataKey, { writeConcern: { w: 'majority' } })];
                    case 2:
                        insertedId = (_c.sent()).insertedId;
                        return [2 /*return*/, insertedId];
                }
            });
        });
    };
    /**
     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.
     *
     * If no matches are found, then no bulk write is performed.
     *
     * @example
     * ```ts
     * // rewrapping all data data keys (using a filter that matches all documents)
     * const filter = {};
     *
     * const result = await clientEncryption.rewrapManyDataKey(filter);
     * if (result.bulkWriteResult != null) {
     *  // keys were re-wrapped, results will be available in the bulkWrite object.
     * }
     * ```
     *
     * @example
     * ```ts
     * // attempting to rewrap all data keys with no matches
     * const filter = { _id: new Binary() } // assume _id matches no documents in the database
     * const result = await clientEncryption.rewrapManyDataKey(filter);
     *
     * if (result.bulkWriteResult == null) {
     *  // no keys matched, `bulkWriteResult` does not exist on the result object
     * }
     * ```
     */
    ClientEncryption.prototype.rewrapManyDataKey = function (filter, options) {
        return __awaiter(this, void 0, Promise, function () {
            var keyEncryptionKeyBson, keyEncryptionKey, filterBson, context, stateMachine, dataKeys, _a, _b, dbName, collectionName, replacements, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        keyEncryptionKeyBson = undefined;
                        if (options) {
                            keyEncryptionKey = Object.assign({ provider: options.provider }, options.masterKey);
                            keyEncryptionKeyBson = bson_1.serialize(keyEncryptionKey);
                        }
                        filterBson = bson_1.serialize(filter);
                        context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);
                        stateMachine = new state_machine_1.StateMachine({
                            proxyOptions: this._proxyOptions,
                            tlsOptions: this._tlsOptions,
                            socketOptions: autoSelectSocketOptions(this._client.options)
                        });
                        _a = bson_1.deserialize;
                        return [4 /*yield*/, stateMachine.execute(this, context)];
                    case 1:
                        dataKeys = _a.apply(void 0, [_c.sent()]).v;
                        if (dataKeys.length === 0) {
                            return [2 /*return*/, {}];
                        }
                        _b = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _b.db, collectionName = _b.collection;
                        replacements = dataKeys.map(function (key) { return ({
                            updateOne: {
                                filter: { _id: key._id },
                                update: {
                                    $set: {
                                        masterKey: key.masterKey,
                                        keyMaterial: key.keyMaterial
                                    },
                                    $currentDate: {
                                        updateDate: true
                                    }
                                }
                            }
                        }); });
                        return [4 /*yield*/, this._keyVaultClient
                                .db(dbName)
                                .collection(collectionName)
                                .bulkWrite(replacements, {
                                writeConcern: { w: 'majority' }
                            })];
                    case 2:
                        result = _c.sent();
                        return [2 /*return*/, { bulkWriteResult: result }];
                }
            });
        });
    };
    /**
     * Deletes the key with the provided id from the keyvault, if it exists.
     *
     * @example
     * ```ts
     * // delete a key by _id
     * const id = new Binary(); // id is a bson binary subtype 4 object
     * const { deletedCount } = await clientEncryption.deleteKey(id);
     *
     * if (deletedCount != null && deletedCount > 0) {
     *   // successful deletion
     * }
     * ```
     *
     */
    ClientEncryption.prototype.deleteKey = function (_id) {
        return __awaiter(this, void 0, Promise, function () {
            var _a, dbName, collectionName;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _a.db, collectionName = _a.collection;
                        return [4 /*yield*/, this._keyVaultClient
                                .db(dbName)
                                .collection(collectionName)
                                .deleteOne({ _id: _id }, { writeConcern: { w: 'majority' } })];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    /**
     * Finds all the keys currently stored in the keyvault.
     *
     * This method will not throw.
     *
     * @returns a FindCursor over all keys in the keyvault.
     * @example
     * ```ts
     * // fetching all keys
     * const keys = await clientEncryption.getKeys().toArray();
     * ```
     */
    ClientEncryption.prototype.getKeys = function () {
        var _a = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _a.db, collectionName = _a.collection;
        return this._keyVaultClient
            .db(dbName)
            .collection(collectionName)
            .find({}, { readConcern: { level: 'majority' } });
    };
    /**
     * Finds a key in the keyvault with the specified _id.
     *
     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents
     * match the id.  The promise rejects with an error if an error is thrown.
     * @example
     * ```ts
     * // getting a key by id
     * const id = new Binary(); // id is a bson binary subtype 4 object
     * const key = await clientEncryption.getKey(id);
     * if (!key) {
     *  // key is null if there was no matching key
     * }
     * ```
     */
    ClientEncryption.prototype.getKey = function (_id) {
        return __awaiter(this, void 0, Promise, function () {
            var _a, dbName, collectionName;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _a.db, collectionName = _a.collection;
                        return [4 /*yield*/, this._keyVaultClient
                                .db(dbName)
                                .collection(collectionName)
                                .findOne({ _id: _id }, { readConcern: { level: 'majority' } })];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    /**
     * Finds a key in the keyvault which has the specified keyAltName.
     *
     * @param keyAltName - a keyAltName to search for a key
     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents
     * match the keyAltName.  The promise rejects with an error if an error is thrown.
     * @example
     * ```ts
     * // get a key by alt name
     * const keyAltName = 'keyAltName';
     * const key = await clientEncryption.getKeyByAltName(keyAltName);
     * if (!key) {
     *  // key is null if there is no matching key
     * }
     * ```
     */
    ClientEncryption.prototype.getKeyByAltName = function (keyAltName) {
        return __awaiter(this, void 0, Promise, function () {
            var _a, dbName, collectionName;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _a.db, collectionName = _a.collection;
                        return [4 /*yield*/, this._keyVaultClient
                                .db(dbName)
                                .collection(collectionName)
                                .findOne({ keyAltNames: keyAltName }, { readConcern: { level: 'majority' } })];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    /**
     * Adds a keyAltName to a key identified by the provided _id.
     *
     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).
     *
     * @param _id - The id of the document to update.
     * @param keyAltName - a keyAltName to search for a key
     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents
     * match the id.  The promise rejects with an error if an error is thrown.
     * @example
     * ```ts
     * // adding an keyAltName to a data key
     * const id = new Binary();  // id is a bson binary subtype 4 object
     * const keyAltName = 'keyAltName';
     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);
     * if (!oldKey) {
     *  // null is returned if there is no matching document with an id matching the supplied id
     * }
     * ```
     */
    ClientEncryption.prototype.addKeyAltName = function (_id, keyAltName) {
        return __awaiter(this, void 0, Promise, function () {
            var _a, dbName, collectionName, value;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _a.db, collectionName = _a.collection;
                        return [4 /*yield*/, this._keyVaultClient
                                .db(dbName)
                                .collection(collectionName)
                                .findOneAndUpdate({ _id: _id }, { $addToSet: { keyAltNames: keyAltName } }, { writeConcern: { w: 'majority' }, returnDocument: 'before' })];
                    case 1:
                        value = _b.sent();
                        return [2 /*return*/, value];
                }
            });
        });
    };
    /**
     * Adds a keyAltName to a key identified by the provided _id.
     *
     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).
     *
     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.
     *
     * @param _id - The id of the document to update.
     * @param keyAltName - a keyAltName to search for a key
     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents
     * match the id.  The promise rejects with an error if an error is thrown.
     * @example
     * ```ts
     * // removing a key alt name from a data key
     * const id = new Binary();  // id is a bson binary subtype 4 object
     * const keyAltName = 'keyAltName';
     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);
     *
     * if (!oldKey) {
     *  // null is returned if there is no matching document with an id matching the supplied id
     * }
     * ```
     */
    ClientEncryption.prototype.removeKeyAltName = function (_id, keyAltName) {
        return __awaiter(this, void 0, Promise, function () {
            var _a, dbName, collectionName, pipeline, value;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _a.db, collectionName = _a.collection;
                        pipeline = [
                            {
                                $set: {
                                    keyAltNames: {
                                        $cond: [
                                            {
                                                $eq: ['$keyAltNames', [keyAltName]]
                                            },
                                            '$$REMOVE',
                                            {
                                                $filter: {
                                                    input: '$keyAltNames',
                                                    cond: {
                                                        $ne: ['$$this', keyAltName]
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        ];
                        return [4 /*yield*/, this._keyVaultClient
                                .db(dbName)
                                .collection(collectionName)
                                .findOneAndUpdate({ _id: _id }, pipeline, {
                                writeConcern: { w: 'majority' },
                                returnDocument: 'before'
                            })];
                    case 1:
                        value = _b.sent();
                        return [2 /*return*/, value];
                }
            });
        });
    };
    /**
     * A convenience method for creating an encrypted collection.
     * This method will create data keys for any encryptedFields that do not have a `keyId` defined
     * and then create a new collection with the full set of encryptedFields.
     *
     * @param db - A Node.js driver Db object with which to create the collection
     * @param name - The name of the collection to be created
     * @param options - Options for createDataKey and for createCollection
     * @returns created collection and generated encryptedFields
     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.
     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.
     */
    ClientEncryption.prototype.createEncryptedCollection = function (db, name, options) {
        return __awaiter(this, void 0, Promise, function () {
            var provider, masterKey, _a, encryptedFields, createCollectionOptions, createDataKeyPromises, createDataKeyResolutions, rejection, collection, cause_1;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        provider = options.provider, masterKey = options.masterKey, _a = options.createCollectionOptions, encryptedFields = __rest(_a.encryptedFields, []), createCollectionOptions = __rest(_a, ["encryptedFields"]);
                        if (!Array.isArray(encryptedFields.fields)) return [3 /*break*/, 2];
                        createDataKeyPromises = encryptedFields.fields.map(function (field) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b, _c;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        if (!(field == null || typeof field !== 'object' || field.keyId != null)) return [3 /*break*/, 1];
                                        _a = field;
                                        return [3 /*break*/, 3];
                                    case 1:
                                        _b = [__assign({}, field)];
                                        _c = {};
                                        return [4 /*yield*/, this.createDataKey(provider, { masterKey: masterKey })];
                                    case 2:
                                        _a = __assign.apply(void 0, _b.concat([(_c.keyId = _d.sent(), _c)]));
                                        _d.label = 3;
                                    case 3: return [2 /*return*/, _a];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.allSettled(createDataKeyPromises)];
                    case 1:
                        createDataKeyResolutions = _b.sent();
                        encryptedFields.fields = createDataKeyResolutions.map(function (resolution, index) {
                            return resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index];
                        });
                        rejection = createDataKeyResolutions.find(function (result) { return result.status === 'rejected'; });
                        if (rejection != null) {
                            throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, { cause: rejection.reason });
                        }
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, db.createCollection(name, __assign(__assign({}, createCollectionOptions), { encryptedFields: encryptedFields }))];
                    case 3:
                        collection = _b.sent();
                        return [2 /*return*/, { collection: collection, encryptedFields: encryptedFields }];
                    case 4:
                        cause_1 = _b.sent();
                        throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, { cause: cause_1 });
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must
     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.
     *
     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON
     * @param options -
     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.
     *
     * @example
     * ```ts
     * // Encryption with async/await api
     * async function encryptMyData(value) {
     *   const keyId = await clientEncryption.createDataKey('local');
     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });
     * }
     * ```
     *
     * @example
     * ```ts
     * // Encryption using a keyAltName
     * async function encryptMyData(value) {
     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });
     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });
     * }
     * ```
     */
    ClientEncryption.prototype.encrypt = function (value, options) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._encrypt(value, false, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Encrypts a Match Expression or Aggregate Expression to query a range index.
     *
     * Only supported when queryType is "range" and algorithm is "Range".
     *
     * @param expression - a BSON document of one of the following forms:
     *  1. A Match Expression of this form:
     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`
     *  2. An Aggregate Expression of this form:
     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`
     *
     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.
     *
     * @param options -
     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.
     */
    ClientEncryption.prototype.encryptExpression = function (expression, options) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._encrypt(expression, true, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Explicitly decrypt a provided encrypted value
     *
     * @param value - An encrypted value
     * @returns a Promise that either resolves with the decrypted value, or rejects with an error
     *
     * @example
     * ```ts
     * // Decrypting value with async/await API
     * async function decryptMyValue(value) {
     *   return clientEncryption.decrypt(value);
     * }
     * ```
     */
    ClientEncryption.prototype.decrypt = function (value) {
        return __awaiter(this, void 0, Promise, function () {
            var valueBuffer, context, stateMachine, v, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        valueBuffer = bson_1.serialize({ v: value });
                        context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);
                        stateMachine = new state_machine_1.StateMachine({
                            proxyOptions: this._proxyOptions,
                            tlsOptions: this._tlsOptions,
                            socketOptions: autoSelectSocketOptions(this._client.options)
                        });
                        _a = bson_1.deserialize;
                        return [4 /*yield*/, stateMachine.execute(this, context)];
                    case 1:
                        v = _a.apply(void 0, [_b.sent()]).v;
                        return [2 /*return*/, v];
                }
            });
        });
    };
    /**
     * @internal
     * Ask the user for KMS credentials.
     *
     * This returns anything that looks like the kmsProviders original input
     * option. It can be empty, and any provider specified here will override
     * the original ones.
     */
    ClientEncryption.prototype.askForKMSCredentials = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, index_1.refreshKMSCredentials(this._kmsProviders)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Object.defineProperty(ClientEncryption, "libmongocryptVersion", {
        get: function () {
            return ClientEncryption.getMongoCrypt().libmongocryptVersion;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @internal
     * A helper that perform explicit encryption of values and expressions.
     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must
     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.
     *
     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON
     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression
     * @param options - options to pass to encrypt
     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return
     *          value will be a bson document.  When false, the value will be a BSON Binary.
     *
     */
    ClientEncryption.prototype._encrypt = function (value, expressionMode, options) {
        return __awaiter(this, void 0, Promise, function () {
            var algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions, contextOptions, valueBuffer, stateMachine, context, v, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        algorithm = options.algorithm, keyId = options.keyId, keyAltName = options.keyAltName, contentionFactor = options.contentionFactor, queryType = options.queryType, rangeOptions = options.rangeOptions;
                        contextOptions = {
                            expressionMode: expressionMode,
                            algorithm: algorithm
                        };
                        if (keyId) {
                            contextOptions.keyId = keyId.buffer;
                        }
                        if (keyAltName) {
                            if (keyId) {
                                throw new errors_1.MongoCryptInvalidArgumentError("\"options\" cannot contain both \"keyId\" and \"keyAltName\"");
                            }
                            if (typeof keyAltName !== 'string') {
                                throw new errors_1.MongoCryptInvalidArgumentError("\"options.keyAltName\" must be of type string, but was of type " + typeof keyAltName);
                            }
                            contextOptions.keyAltName = bson_1.serialize({ keyAltName: keyAltName });
                        }
                        if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {
                            contextOptions.contentionFactor = contentionFactor;
                        }
                        if (typeof queryType === 'string') {
                            contextOptions.queryType = queryType;
                        }
                        if (typeof rangeOptions === 'object') {
                            contextOptions.rangeOptions = bson_1.serialize(rangeOptions);
                        }
                        valueBuffer = bson_1.serialize({ v: value });
                        stateMachine = new state_machine_1.StateMachine({
                            proxyOptions: this._proxyOptions,
                            tlsOptions: this._tlsOptions,
                            socketOptions: autoSelectSocketOptions(this._client.options)
                        });
                        context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);
                        _a = bson_1.deserialize;
                        return [4 /*yield*/, stateMachine.execute(this, context)];
                    case 1:
                        v = _a.apply(void 0, [_b.sent()]).v;
                        return [2 /*return*/, v];
                }
            });
        });
    };
    return ClientEncryption;
}());
exports.ClientEncryption = ClientEncryption;
/**
 * Get the socket options from the client.
 * @param baseOptions - The mongo client options.
 * @returns ClientEncryptionSocketOptions
 */
function autoSelectSocketOptions(baseOptions) {
    var options = { autoSelectFamily: true };
    if ('autoSelectFamily' in baseOptions) {
        options.autoSelectFamily = baseOptions.autoSelectFamily;
    }
    if ('autoSelectFamilyAttemptTimeout' in baseOptions) {
        options.autoSelectFamilyAttemptTimeout = baseOptions.autoSelectFamilyAttemptTimeout;
    }
    return options;
}
exports.autoSelectSocketOptions = autoSelectSocketOptions;

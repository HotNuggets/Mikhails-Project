"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.refreshKMSCredentials = exports.isEmptyCredentials = void 0;
var aws_1 = require("./aws");
var azure_1 = require("./azure");
var gcp_1 = require("./gcp");
"aws:" + string;
AWSKMSProviderConfiguration;
/**
 * Configuration options for using 'local' as your KMS provider
 */
local ?  : LocalKMSProviderConfiguration;
[key, "local:" + string];
LocalKMSProviderConfiguration;
/**
 * Configuration options for using 'kmip' as your KMS provider
 */
kmip ?  : KMIPKMSProviderConfiguration;
[key, "kmip:" + string];
KMIPKMSProviderConfiguration;
/**
 * Configuration options for using 'azure' as your KMS provider
 */
azure ?  : AzureKMSProviderConfiguration | Record();
[key, "azure:" + string];
AzureKMSProviderConfiguration;
/**
 * Configuration options for using 'gcp' as your KMS provider
 */
gcp ?  : GCPKMSProviderConfiguration | Record();
[key, "gcp:" + string];
GCPKMSProviderConfiguration;
/**
 * Auto credential fetching should only occur when the provider is defined on the kmsProviders map
 * and the settings are an empty object.
 *
 * This is distinct from a nullish provider key.
 *
 * @internal - exposed for testing purposes only
 */
function isEmptyCredentials(providerName, kmsProviders) {
    var provider = kmsProviders[providerName];
    if (provider == null) {
        return false;
    }
    return typeof provider === 'object' && Object.keys(provider).length === 0;
}
exports.isEmptyCredentials = isEmptyCredentials;
/**
 * Load cloud provider credentials for the user provided KMS providers.
 * Credentials will only attempt to get loaded if they do not exist
 * and no existing credentials will get overwritten.
 *
 * @internal
 */
function refreshKMSCredentials(kmsProviders) {
    return __awaiter(this, void 0, Promise, function () {
        var finalKMSProviders;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    finalKMSProviders = kmsProviders;
                    if (!isEmptyCredentials('aws', kmsProviders)) return [3 /*break*/, 2];
                    return [4 /*yield*/, aws_1.loadAWSCredentials(finalKMSProviders)];
                case 1:
                    finalKMSProviders = _a.sent();
                    _a.label = 2;
                case 2:
                    if (!isEmptyCredentials('gcp', kmsProviders)) return [3 /*break*/, 4];
                    return [4 /*yield*/, gcp_1.loadGCPCredentials(finalKMSProviders)];
                case 3:
                    finalKMSProviders = _a.sent();
                    _a.label = 4;
                case 4:
                    if (!isEmptyCredentials('azure', kmsProviders)) return [3 /*break*/, 6];
                    return [4 /*yield*/, azure_1.loadAzureCredentials(finalKMSProviders)];
                case 5:
                    finalKMSProviders = _a.sent();
                    _a.label = 6;
                case 6: return [2 /*return*/, finalKMSProviders];
            }
        });
    });
}
exports.refreshKMSCredentials = refreshKMSCredentials;

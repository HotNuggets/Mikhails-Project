"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.AggregationCursor = void 0;
var aggregate_1 = require("../operations/aggregate");
var execute_operation_1 = require("../operations/execute_operation");
var utils_1 = require("../utils");
var abstract_cursor_1 = require("./abstract_cursor");
/**
 * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB
 * allowing for iteration over the results returned from the underlying query. It supports
 * one by one document iteration, conversion to an array or can be iterated as a Node 4.X
 * or higher stream
 * @public
 */
var AggregationCursor = /** @class */ (function (_super) {
    __extends(AggregationCursor, _super);
    /** @internal */
    function AggregationCursor(client, namespace, pipeline, options) {
        if (pipeline === void 0) { pipeline = []; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, client, namespace, options) || this;
        _this.pipeline = pipeline;
        _this.aggregateOptions = options;
        return _this;
    }
    AggregationCursor.prototype.clone = function () {
        var clonedOptions = utils_1.mergeOptions({}, this.aggregateOptions);
        delete clonedOptions.session;
        return new AggregationCursor(this.client, this.namespace, this.pipeline, __assign({}, clonedOptions));
    };
    AggregationCursor.prototype.map = function (transform) {
        return _super.prototype.map.call(this, transform);
    };
    /** @internal */
    AggregationCursor.prototype._initialize = function (session) {
        return __awaiter(this, void 0, Promise, function () {
            var aggregateOperation, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, __assign(__assign(__assign({}, this.aggregateOptions), this.cursorOptions), { session: session }));
                        return [4 /*yield*/, execute_operation_1.executeOperation(this.client, aggregateOperation)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, { server: aggregateOperation.server, session: session, response: response }];
                }
            });
        });
    };
    /** Execute the explain for the cursor */
    AggregationCursor.prototype.explain = function (verbosity) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, execute_operation_1.executeOperation(this.client, new aggregate_1.AggregateOperation(this.namespace, this.pipeline, __assign(__assign(__assign({}, this.aggregateOptions), this.cursorOptions), { explain: verbosity !== null && verbosity !== void 0 ? verbosity : true })))];
                    case 1: return [2 /*return*/, (_a.sent()).shift(this.deserializationOptions)];
                }
            });
        });
    };
    AggregationCursor.prototype.addStage = function (stage) {
        this.throwIfInitialized();
        this.pipeline.push(stage);
        return this;
    };
    AggregationCursor.prototype.group = function ($group) {
        return this.addStage({ $group: $group });
    };
    /** Add a limit stage to the aggregation pipeline */
    AggregationCursor.prototype.limit = function ($limit) {
        return this.addStage({ $limit: $limit });
    };
    /** Add a match stage to the aggregation pipeline */
    AggregationCursor.prototype.match = function ($match) {
        return this.addStage({ $match: $match });
    };
    /** Add an out stage to the aggregation pipeline */
    AggregationCursor.prototype.out = function ($out) {
        return this.addStage({ $out: $out });
    };
    /**
     * Add a project stage to the aggregation pipeline
     *
     * @remarks
     * In order to strictly type this function you must provide an interface
     * that represents the effect of your projection on the result documents.
     *
     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.
     * You should specify a parameterized type to have assertions on your final results.
     *
     * @example
     * ```typescript
     * // Best way
     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });
     * // Flexible way
     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });
     * ```
     *
     * @remarks
     * In order to strictly type this function you must provide an interface
     * that represents the effect of your projection on the result documents.
     *
     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,
     * it **does not** return a new instance of a cursor. This means when calling project,
     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.
     * Take note of the following example:
     *
     * @example
     * ```typescript
     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);
     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });
     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();
     *
     * // or always use chaining and save the final cursor
     *
     * const cursor = coll.aggregate().project<{ a: string }>({
     *   _id: 0,
     *   a: { $convert: { input: '$a', to: 'string' }
     * }});
     * ```
     */
    AggregationCursor.prototype.project = function ($project) {
        return this.addStage({ $project: $project });
    };
    /** Add a lookup stage to the aggregation pipeline */
    AggregationCursor.prototype.lookup = function ($lookup) {
        return this.addStage({ $lookup: $lookup });
    };
    /** Add a redact stage to the aggregation pipeline */
    AggregationCursor.prototype.redact = function ($redact) {
        return this.addStage({ $redact: $redact });
    };
    /** Add a skip stage to the aggregation pipeline */
    AggregationCursor.prototype.skip = function ($skip) {
        return this.addStage({ $skip: $skip });
    };
    /** Add a sort stage to the aggregation pipeline */
    AggregationCursor.prototype.sort = function ($sort) {
        return this.addStage({ $sort: $sort });
    };
    /** Add a unwind stage to the aggregation pipeline */
    AggregationCursor.prototype.unwind = function ($unwind) {
        return this.addStage({ $unwind: $unwind });
    };
    /** Add a geoNear stage to the aggregation pipeline */
    AggregationCursor.prototype.geoNear = function ($geoNear) {
        return this.addStage({ $geoNear: $geoNear });
    };
    return AggregationCursor;
}(abstract_cursor_1.AbstractCursor));
exports.AggregationCursor = AggregationCursor;

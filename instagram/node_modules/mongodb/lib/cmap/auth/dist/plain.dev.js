"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Plain = void 0;

var bson_1 = require("../../bson");

var error_1 = require("../../error");

var utils_1 = require("../../utils");

var auth_provider_1 = require("./auth_provider");

var Plain =
/*#__PURE__*/
function (_auth_provider_1$Auth) {
  _inherits(Plain, _auth_provider_1$Auth);

  function Plain() {
    _classCallCheck(this, Plain);

    return _possibleConstructorReturn(this, _getPrototypeOf(Plain).apply(this, arguments));
  }

  _createClass(Plain, [{
    key: "auth",
    value: function auth(authContext) {
      var connection, credentials, username, password, payload, command;
      return regeneratorRuntime.async(function auth$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              connection = authContext.connection, credentials = authContext.credentials;

              if (credentials) {
                _context.next = 3;
                break;
              }

              throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');

            case 3:
              username = credentials.username, password = credentials.password;
              payload = new bson_1.Binary(Buffer.from("\0".concat(username, "\0").concat(password)));
              command = {
                saslStart: 1,
                mechanism: 'PLAIN',
                payload: payload,
                autoAuthorize: 1
              };
              _context.next = 8;
              return regeneratorRuntime.awrap(connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined));

            case 8:
            case "end":
              return _context.stop();
          }
        }
      });
    }
  }]);

  return Plain;
}(auth_provider_1.AuthProvider);

exports.Plain = Plain;
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnorderedBulkOperation = void 0;

var BSON = require("../bson");

var error_1 = require("../error");

var common_1 = require("./common");
/** @public */


var UnorderedBulkOperation =
/*#__PURE__*/
function (_common_1$BulkOperati) {
  _inherits(UnorderedBulkOperation, _common_1$BulkOperati);

  /** @internal */
  function UnorderedBulkOperation(collection, options) {
    _classCallCheck(this, UnorderedBulkOperation);

    return _possibleConstructorReturn(this, _getPrototypeOf(UnorderedBulkOperation).call(this, collection, options, false));
  }

  _createClass(UnorderedBulkOperation, [{
    key: "handleWriteError",
    value: function handleWriteError(writeResult) {
      if (this.s.batches.length) {
        return;
      }

      return _get(_getPrototypeOf(UnorderedBulkOperation.prototype), "handleWriteError", this).call(this, writeResult);
    }
  }, {
    key: "addToOperationsList",
    value: function addToOperationsList(batchType, document) {
      // Get the bsonSize
      var bsonSize = BSON.calculateObjectSize(document, {
        checkKeys: false,
        // Since we don't know what the user selected for BSON options here,
        // err on the safe side, and check the size with ignoreUndefined: false.
        ignoreUndefined: false
      }); // Throw error if the doc is bigger than the max BSON size

      if (bsonSize >= this.s.maxBsonObjectSize) {
        // TODO(NODE-3483): Change this to MongoBSONError
        throw new error_1.MongoInvalidArgumentError("Document is larger than the maximum size ".concat(this.s.maxBsonObjectSize));
      } // Holds the current batch


      this.s.currentBatch = undefined; // Get the right type of batch

      if (batchType === common_1.BatchType.INSERT) {
        this.s.currentBatch = this.s.currentInsertBatch;
      } else if (batchType === common_1.BatchType.UPDATE) {
        this.s.currentBatch = this.s.currentUpdateBatch;
      } else if (batchType === common_1.BatchType.DELETE) {
        this.s.currentBatch = this.s.currentRemoveBatch;
      }

      var maxKeySize = this.s.maxKeySize; // Create a new batch object if we don't have a current one

      if (this.s.currentBatch == null) {
        this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);
      } // Check if we need to create a new batch


      if ( // New batch if we exceed the max batch op size
      this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize || // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,
      // since we can't sent an empty batch
      this.s.currentBatch.size > 0 && this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes || // New batch if the new op does not have the same op type as the current batch
      this.s.currentBatch.batchType !== batchType) {
        // Save the batch to the execution stack
        this.s.batches.push(this.s.currentBatch); // Create a new batch

        this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);
      } // We have an array of documents


      if (Array.isArray(document)) {
        throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');
      }

      this.s.currentBatch.operations.push(document);
      this.s.currentBatch.originalIndexes.push(this.s.currentIndex);
      this.s.currentIndex = this.s.currentIndex + 1; // Save back the current Batch to the right type

      if (batchType === common_1.BatchType.INSERT) {
        this.s.currentInsertBatch = this.s.currentBatch;
        this.s.bulkResult.insertedIds.push({
          index: this.s.bulkResult.insertedIds.length,
          _id: document._id
        });
      } else if (batchType === common_1.BatchType.UPDATE) {
        this.s.currentUpdateBatch = this.s.currentBatch;
      } else if (batchType === common_1.BatchType.DELETE) {
        this.s.currentRemoveBatch = this.s.currentBatch;
      } // Update current batch size


      this.s.currentBatch.size += 1;
      this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;
      return this;
    }
  }]);

  return UnorderedBulkOperation;
}(common_1.BulkOperationBase);

exports.UnorderedBulkOperation = UnorderedBulkOperation;
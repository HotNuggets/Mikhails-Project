"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
exports.__esModule = true;
exports.CryptoConnection = exports.SizedMessageTransform = exports.Connection = exports.hasSessionSupport = void 0;
var stream_1 = require("stream");
var timers_1 = require("timers");
var bson_1 = require("../bson");
var constants_1 = require("../constants");
var error_1 = require("../error");
var mongo_logger_1 = require("../mongo_logger");
var mongo_types_1 = require("../mongo_types");
var read_preference_1 = require("../read_preference");
var common_1 = require("../sdam/common");
var sessions_1 = require("../sessions");
var utils_1 = require("../utils");
var command_monitoring_events_1 = require("./command_monitoring_events");
var commands_1 = require("./commands");
var stream_description_1 = require("./stream_description");
var compression_1 = require("./wire_protocol/compression");
var on_data_1 = require("./wire_protocol/on_data");
var responses_1 = require("./wire_protocol/responses");
var shared_1 = require("./wire_protocol/shared");
/** @internal */
function hasSessionSupport(conn) {
    var description = conn.description;
    return description.logicalSessionTimeoutMinutes != null;
}
exports.hasSessionSupport = hasSessionSupport;
function streamIdentifier(stream, options) {
    if (options.proxyHost) {
        // If proxy options are specified, the properties of `stream` itself
        // will not accurately reflect what endpoint this is connected to.
        return options.hostAddress.toString();
    }
    var remoteAddress = stream.remoteAddress, remotePort = stream.remotePort;
    if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {
        return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();
    }
    return utils_1.uuidV4().toString('hex');
}
/** @internal */
var Connection = /** @class */ (function (_super) {
    __extends(Connection, _super);
    function Connection(stream, options) {
        var _a;
        var _this = _super.call(this) || this;
        _this.lastHelloMS = -1;
        _this.helloOk = false;
        _this.delayedTimeoutId = null;
        /** Indicates that the connection (including underlying TCP socket) has been closed. */
        _this.closed = false;
        _this.clusterTime = null;
        _this.error = null;
        _this.dataEvents = null;
        _this.socket = stream;
        _this.id = options.id;
        _this.address = streamIdentifier(stream, options);
        _this.socketTimeoutMS = (_a = options.socketTimeoutMS) !== null && _a !== void 0 ? _a : 0;
        _this.monitorCommands = options.monitorCommands;
        _this.serverApi = options.serverApi;
        _this.mongoLogger = options.mongoLogger;
        _this.established = false;
        _this.description = new stream_description_1.StreamDescription(_this.address, options);
        _this.generation = options.generation;
        _this.lastUseTime = utils_1.now();
        _this.messageStream = _this.socket
            .on('error', _this.onError.bind(_this))
            .pipe(new SizedMessageTransform({ connection: _this }))
            .on('error', _this.onError.bind(_this));
        _this.socket.on('close', _this.onClose.bind(_this));
        _this.socket.on('timeout', _this.onTimeout.bind(_this));
        return _this;
    }
    Object.defineProperty(Connection.prototype, "hello", {
        get: function () {
            return this.description.hello;
        },
        // the `connect` method stores the result of the handshake hello on the connection
        set: function (response) {
            this.description.receiveResponse(response);
            Object.freeze(this.description);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "serviceId", {
        get: function () {
            var _a;
            return (_a = this.hello) === null || _a === void 0 ? void 0 : _a.serviceId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "loadBalanced", {
        get: function () {
            return this.description.loadBalanced;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "idleTime", {
        get: function () {
            return utils_1.calculateDurationInMs(this.lastUseTime);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "hasSessionSupport", {
        get: function () {
            return this.description.logicalSessionTimeoutMinutes != null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "supportsOpMsg", {
        get: function () {
            return (this.description != null &&
                utils_1.maxWireVersion(this) >= 6 &&
                !this.description.__nodejs_mock_server__);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "shouldEmitAndLogCommand", {
        get: function () {
            var _a, _b, _c;
            return ((_c = (this.monitorCommands ||
                (this.established &&
                    !((_a = this.authContext) === null || _a === void 0 ? void 0 : _a.reauthenticating) && ((_b = this.mongoLogger) === null || _b === void 0 ? void 0 : _b.willLog(mongo_logger_1.MongoLoggableComponent.COMMAND, mongo_logger_1.SeverityLevel.DEBUG))))) !== null && _c !== void 0 ? _c : false);
        },
        enumerable: false,
        configurable: true
    });
    Connection.prototype.markAvailable = function () {
        this.lastUseTime = utils_1.now();
    };
    Connection.prototype.onError = function (error) {
        this.cleanup(error);
    };
    Connection.prototype.onClose = function () {
        var message = "connection " + this.id + " to " + this.address + " closed";
        this.cleanup(new error_1.MongoNetworkError(message));
    };
    Connection.prototype.onTimeout = function () {
        var _this = this;
        this.delayedTimeoutId = timers_1.setTimeout(function () {
            var message = "connection " + _this.id + " to " + _this.address + " timed out";
            var beforeHandshake = _this.hello == null;
            _this.cleanup(new error_1.MongoNetworkTimeoutError(message, { beforeHandshake: beforeHandshake }));
        }, 1).unref(); // No need for this timer to hold the event loop open
    };
    Connection.prototype.destroy = function () {
        if (this.closed) {
            return;
        }
        // load balanced mode requires that these listeners remain on the connection
        // after cleanup on timeouts, errors or close so we remove them before calling
        // cleanup.
        this.removeAllListeners(Connection.PINNED);
        this.removeAllListeners(Connection.UNPINNED);
        var message = "connection " + this.id + " to " + this.address + " closed";
        this.cleanup(new error_1.MongoNetworkError(message));
    };
    /**
     * A method that cleans up the connection.  When `force` is true, this method
     * forcibly destroys the socket.
     *
     * If an error is provided, any in-flight operations will be closed with the error.
     *
     * This method does nothing if the connection is already closed.
     */
    Connection.prototype.cleanup = function (error) {
        var _a;
        if (this.closed) {
            return;
        }
        this.socket.destroy();
        this.error = error;
        (_a = this.dataEvents) === null || _a === void 0 ? void 0 : _a["throw"](error).then(undefined, utils_1.squashError);
        this.closed = true;
        this.emit(Connection.CLOSE);
    };
    Connection.prototype.prepareCommand = function (db, command, options) {
        var cmd = __assign({}, command);
        var readPreference = shared_1.getReadPreference(options);
        var session = options === null || options === void 0 ? void 0 : options.session;
        var clusterTime = this.clusterTime;
        if (this.serverApi) {
            var _a = this.serverApi, version = _a.version, strict = _a.strict, deprecationErrors = _a.deprecationErrors;
            cmd.apiVersion = version;
            if (strict != null)
                cmd.apiStrict = strict;
            if (deprecationErrors != null)
                cmd.apiDeprecationErrors = deprecationErrors;
        }
        if (this.hasSessionSupport && session) {
            if (session.clusterTime &&
                clusterTime &&
                session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {
                clusterTime = session.clusterTime;
            }
            var sessionError = sessions_1.applySession(session, cmd, options);
            if (sessionError)
                throw sessionError;
        }
        else if (session === null || session === void 0 ? void 0 : session.explicit) {
            throw new error_1.MongoCompatibilityError('Current topology does not support sessions');
        }
        // if we have a known cluster time, gossip it
        if (clusterTime) {
            cmd.$clusterTime = clusterTime;
        }
        // For standalone, drivers MUST NOT set $readPreference.
        if (this.description.type !== common_1.ServerType.Standalone) {
            if (!shared_1.isSharded(this) &&
                !this.description.loadBalanced &&
                this.supportsOpMsg &&
                options.directConnection === true &&
                (readPreference === null || readPreference === void 0 ? void 0 : readPreference.mode) === 'primary') {
                // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.
                // For all other types with a direct connection, if the read preference is 'primary'
                // (driver sets 'primary' as default if no read preference is configured),
                // the $readPreference MUST be set to 'primaryPreferred'
                // to ensure that any server type can handle the request.
                cmd.$readPreference = read_preference_1.ReadPreference.primaryPreferred.toJSON();
            }
            else if (shared_1.isSharded(this) && !this.supportsOpMsg && (readPreference === null || readPreference === void 0 ? void 0 : readPreference.mode) !== 'primary') {
                // When sending a read operation via OP_QUERY and the $readPreference modifier,
                // the query MUST be provided using the $query modifier.
                cmd = {
                    $query: cmd,
                    $readPreference: readPreference.toJSON()
                };
            }
            else if ((readPreference === null || readPreference === void 0 ? void 0 : readPreference.mode) !== 'primary') {
                // For mode 'primary', drivers MUST NOT set $readPreference.
                // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),
                // drivers MUST set $readPreference
                cmd.$readPreference = readPreference.toJSON();
            }
        }
        var commandOptions = __assign({ numberToSkip: 0, numberToReturn: -1, checkKeys: false, 
            // This value is not overridable
            secondaryOk: readPreference.secondaryOk() }, options);
        var message = this.supportsOpMsg
            ? new commands_1.OpMsgRequest(db, cmd, commandOptions)
            : new commands_1.OpQueryRequest(db, cmd, commandOptions);
        return message;
    };
    Connection.prototype.sendWire = function (message, options, responseType) {
        var _a;
        return __asyncGenerator(this, arguments, function sendWire_1() {
            var _b, _c, response, bson, document, e_1_1;
            var e_1, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        this.throwIfAborted();
                        if (typeof options.socketTimeoutMS === 'number') {
                            this.socket.setTimeout(options.socketTimeoutMS);
                        }
                        else if (this.socketTimeoutMS !== 0) {
                            this.socket.setTimeout(this.socketTimeoutMS);
                        }
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, , 21, 22]);
                        return [4 /*yield*/, __await(this.writeCommand(message, {
                                agreedCompressor: (_a = this.description.compressor) !== null && _a !== void 0 ? _a : 'none',
                                zlibCompressionLevel: this.description.zlibCompressionLevel
                            }))];
                    case 2:
                        _e.sent();
                        if (!options.noResponse) return [3 /*break*/, 6];
                        return [4 /*yield*/, __await(responses_1.MongoDBResponse.empty)];
                    case 3: return [4 /*yield*/, _e.sent()];
                    case 4:
                        _e.sent();
                        return [4 /*yield*/, __await(void 0)];
                    case 5: return [2 /*return*/, _e.sent()];
                    case 6:
                        this.throwIfAborted();
                        _e.label = 7;
                    case 7:
                        _e.trys.push([7, 14, 15, 20]);
                        _b = __asyncValues(this.readMany());
                        _e.label = 8;
                    case 8: return [4 /*yield*/, __await(_b.next())];
                    case 9:
                        if (!(_c = _e.sent(), !_c.done)) return [3 /*break*/, 13];
                        response = _c.value;
                        this.socket.setTimeout(0);
                        bson = response.parse();
                        document = (responseType !== null && responseType !== void 0 ? responseType : responses_1.MongoDBResponse).make(bson);
                        return [4 /*yield*/, __await(document)];
                    case 10: return [4 /*yield*/, _e.sent()];
                    case 11:
                        _e.sent();
                        this.throwIfAborted();
                        if (typeof options.socketTimeoutMS === 'number') {
                            this.socket.setTimeout(options.socketTimeoutMS);
                        }
                        else if (this.socketTimeoutMS !== 0) {
                            this.socket.setTimeout(this.socketTimeoutMS);
                        }
                        _e.label = 12;
                    case 12: return [3 /*break*/, 8];
                    case 13: return [3 /*break*/, 20];
                    case 14:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 20];
                    case 15:
                        _e.trys.push([15, , 18, 19]);
                        if (!(_c && !_c.done && (_d = _b["return"]))) return [3 /*break*/, 17];
                        return [4 /*yield*/, __await(_d.call(_b))];
                    case 16:
                        _e.sent();
                        _e.label = 17;
                    case 17: return [3 /*break*/, 19];
                    case 18:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 19: return [7 /*endfinally*/];
                    case 20: return [3 /*break*/, 22];
                    case 21:
                        this.socket.setTimeout(0);
                        return [7 /*endfinally*/];
                    case 22: return [2 /*return*/];
                }
            });
        });
    };
    Connection.prototype.sendCommand = function (ns, command, options, responseType) {
        return __asyncGenerator(this, arguments, function sendCommand_1() {
            var message, started, bsonOptions, document, object, _a, _b, e_2_1, error_2;
            var _c;
            var e_2, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        message = this.prepareCommand(ns.db, command, options);
                        started = 0;
                        if (this.shouldEmitAndLogCommand) {
                            started = utils_1.now();
                            this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_STARTED, message.databaseName, this.established, new command_monitoring_events_1.CommandStartedEvent(this, message, this.description.serverConnectionId));
                        }
                        bsonOptions = options.documentsReturnedIn == null || !options.raw
                            ? options
                            : __assign(__assign({}, options), { raw: false, fieldsAsRaw: (_c = {}, _c[options.documentsReturnedIn] = true, _c) });
                        document = undefined;
                        object = undefined;
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 20, , 21]);
                        this.throwIfAborted();
                        _e.label = 2;
                    case 2:
                        _e.trys.push([2, 13, 14, 19]);
                        _a = __asyncValues(this.sendWire(message, options, responseType));
                        _e.label = 3;
                    case 3: return [4 /*yield*/, __await(_a.next())];
                    case 4:
                        if (!(_b = _e.sent(), !_b.done)) return [3 /*break*/, 12];
                        document = _b.value;
                        object = undefined;
                        if (options.session != null) {
                            sessions_1.updateSessionFromResponse(options.session, document);
                        }
                        if (document.$clusterTime) {
                            this.clusterTime = document.$clusterTime;
                            this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);
                        }
                        if (document.ok === 0) {
                            throw new error_1.MongoServerError((object !== null && object !== void 0 ? object : ) = document.toObject(bsonOptions));
                            ;
                        }
                        if (this.shouldEmitAndLogCommand) {
                            this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse ? undefined : (object !== null && object !== void 0 ? object : ) = document.toObject(bsonOptions)), started, this.description.serverConnectionId);
                            ;
                        }
                        if (!(responseType == null)) return [3 /*break*/, 7];
                        return [4 /*yield*/, __await((object !== null && object !== void 0 ? object : ) = document.toObject(bsonOptions))];
                    case 5: return [4 /*yield*/, _e.sent()];
                    case 6:
                        _e.sent();
                        ;
                        return [3 /*break*/, 10];
                    case 7: return [4 /*yield*/, __await(document)];
                    case 8: return [4 /*yield*/, _e.sent()];
                    case 9:
                        _e.sent();
                        _e.label = 10;
                    case 10:
                        this.throwIfAborted();
                        _e.label = 11;
                    case 11: return [3 /*break*/, 3];
                    case 12: return [3 /*break*/, 19];
                    case 13:
                        e_2_1 = _e.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 19];
                    case 14:
                        _e.trys.push([14, , 17, 18]);
                        if (!(_b && !_b.done && (_d = _a["return"]))) return [3 /*break*/, 16];
                        return [4 /*yield*/, __await(_d.call(_a))];
                    case 15:
                        _e.sent();
                        _e.label = 16;
                    case 16: return [3 /*break*/, 18];
                    case 17:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 18: return [7 /*endfinally*/];
                    case 19: return [3 /*break*/, 21];
                    case 20:
                        error_2 = _e.sent();
                        if (this.shouldEmitAndLogCommand) {
                            this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_FAILED, message.databaseName, this.established, new command_monitoring_events_1.CommandFailedEvent(this, message, error_2, started, this.description.serverConnectionId));
                        }
                        throw error_2;
                    case 21: return [2 /*return*/];
                }
            });
        });
    };
    Connection.prototype.command = function (ns, command, options, responseType) {
        var e_3, _a;
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, Promise, function () {
            var _b, _c, document, e_3_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.throwIfAborted();
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 12]);
                        _b = __asyncValues(this.sendCommand(ns, command, options, responseType));
                        _d.label = 2;
                    case 2: return [4 /*yield*/, _b.next()];
                    case 3:
                        if (!(_c = _d.sent(), !_c.done)) return [3 /*break*/, 5];
                        document = _c.value;
                        return [2 /*return*/, document];
                    case 4: return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        e_3_1 = _d.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 12];
                    case 7:
                        _d.trys.push([7, , 10, 11]);
                        if (!(_c && !_c.done && (_a = _b["return"]))) return [3 /*break*/, 9];
                        return [4 /*yield*/, _a.call(_b)];
                    case 8:
                        _d.sent();
                        _d.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (e_3) throw e_3.error;
                        return [7 /*endfinally*/];
                    case 11: return [7 /*endfinally*/];
                    case 12: throw new error_1.MongoUnexpectedServerResponseError('Unable to get response from server');
                }
            });
        });
    };
    Connection.prototype.exhaustCommand = function (ns, command, options, replyListener) {
        var _this = this;
        var exhaustLoop = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b, reply, e_4_1;
            var e_4, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.throwIfAborted();
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 12]);
                        _a = __asyncValues(this.sendCommand(ns, command, options));
                        _d.label = 2;
                    case 2: return [4 /*yield*/, _a.next()];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 5];
                        reply = _b.value;
                        replyListener(undefined, reply);
                        this.throwIfAborted();
                        _d.label = 4;
                    case 4: return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        e_4_1 = _d.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 12];
                    case 7:
                        _d.trys.push([7, , 10, 11]);
                        if (!(_b && !_b.done && (_c = _a["return"]))) return [3 /*break*/, 9];
                        return [4 /*yield*/, _c.call(_a)];
                    case 8:
                        _d.sent();
                        _d.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (e_4) throw e_4.error;
                        return [7 /*endfinally*/];
                    case 11: return [7 /*endfinally*/];
                    case 12: throw new error_1.MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');
                }
            });
        }); };
        exhaustLoop().then(undefined, replyListener);
    };
    Connection.prototype.throwIfAborted = function () {
        if (this.error)
            throw this.error;
    };
    /**
     * @internal
     *
     * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method
     * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).
     */
    Connection.prototype.writeCommand = function (command, options) {
        var _a, _b;
        return __awaiter(this, void 0, Promise, function () {
            var finalCommand, buffer, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        finalCommand = options.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)
                            ? command
                            : new commands_1.OpCompressedRequest(command, {
                                agreedCompressor: (_a = options.agreedCompressor) !== null && _a !== void 0 ? _a : 'none',
                                zlibCompressionLevel: (_b = options.zlibCompressionLevel) !== null && _b !== void 0 ? _b : 0
                            });
                        _d = (_c = Buffer).concat;
                        return [4 /*yield*/, finalCommand.toBin()];
                    case 1:
                        buffer = _d.apply(_c, [_e.sent()]);
                        if (this.socket.write(buffer))
                            return [2 /*return*/];
                        return [4 /*yield*/, utils_1.once(this.socket, 'drain')];
                    case 2: return [2 /*return*/, _e.sent()];
                }
            });
        });
    };
    /**
     * @internal
     *
     * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function
     * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request
     * by calling `return` on the generator.
     *
     * Note that `for-await` loops call `return` automatically when the loop is exited.
     */
    Connection.prototype.readMany = function () {
        return __asyncGenerator(this, arguments, function readMany_1() {
            var _a, _b, message, response, e_5_1;
            var e_5, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, , 17, 18]);
                        this.dataEvents = on_data_1.onData(this.messageStream);
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 10, 11, 16]);
                        _a = __asyncValues(this.dataEvents);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 9];
                        message = _b.value;
                        return [4 /*yield*/, __await(compression_1.decompressResponse(message))];
                    case 4:
                        response = _d.sent();
                        return [4 /*yield*/, __await(response)];
                    case 5: return [4 /*yield*/, _d.sent()];
                    case 6:
                        _d.sent();
                        if (!!response.moreToCome) return [3 /*break*/, 8];
                        return [4 /*yield*/, __await(void 0)];
                    case 7: return [2 /*return*/, _d.sent()];
                    case 8: return [3 /*break*/, 2];
                    case 9: return [3 /*break*/, 16];
                    case 10:
                        e_5_1 = _d.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 16];
                    case 11:
                        _d.trys.push([11, , 14, 15]);
                        if (!(_b && !_b.done && (_c = _a["return"]))) return [3 /*break*/, 13];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 12:
                        _d.sent();
                        _d.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        if (e_5) throw e_5.error;
                        return [7 /*endfinally*/];
                    case 15: return [7 /*endfinally*/];
                    case 16: return [3 /*break*/, 18];
                    case 17:
                        this.dataEvents = null;
                        this.throwIfAborted();
                        return [7 /*endfinally*/];
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    /** @event */
    Connection.COMMAND_STARTED = constants_1.COMMAND_STARTED;
    /** @event */
    Connection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;
    /** @event */
    Connection.COMMAND_FAILED = constants_1.COMMAND_FAILED;
    /** @event */
    Connection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;
    /** @event */
    Connection.CLOSE = constants_1.CLOSE;
    /** @event */
    Connection.PINNED = constants_1.PINNED;
    /** @event */
    Connection.UNPINNED = constants_1.UNPINNED;
    return Connection;
}(mongo_types_1.TypedEventEmitter));
exports.Connection = Connection;
/** @internal */
var SizedMessageTransform = /** @class */ (function (_super) {
    __extends(SizedMessageTransform, _super);
    function SizedMessageTransform(_a) {
        var connection = _a.connection;
        var _this = _super.call(this, { objectMode: false }) || this;
        _this.bufferPool = new utils_1.BufferPool();
        _this.connection = connection;
        return _this;
    }
    SizedMessageTransform.prototype._transform = function (chunk, encoding, callback) {
        if (this.connection.delayedTimeoutId != null) {
            timers_1.clearTimeout(this.connection.delayedTimeoutId);
            this.connection.delayedTimeoutId = null;
        }
        this.bufferPool.append(chunk);
        var sizeOfMessage = this.bufferPool.getInt32();
        if (sizeOfMessage == null) {
            return callback();
        }
        if (sizeOfMessage < 0) {
            return callback(new error_1.MongoParseError("Invalid message size: " + sizeOfMessage + ", too small"));
        }
        if (sizeOfMessage > this.bufferPool.length) {
            return callback();
        }
        var message = this.bufferPool.read(sizeOfMessage);
        return callback(null, message);
    };
    return SizedMessageTransform;
}(stream_1.Transform));
exports.SizedMessageTransform = SizedMessageTransform;
/** @internal */
var CryptoConnection = /** @class */ (function (_super) {
    __extends(CryptoConnection, _super);
    function CryptoConnection(stream, options) {
        var _this = _super.call(this, stream, options) || this;
        _this.autoEncrypter = options.autoEncrypter;
        return _this;
    }
    CryptoConnection.prototype.command = function (ns, cmd, options, responseType) {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var autoEncrypter, serverWireVersion, sort, indexKeys, encrypted, _i, _b, _c, offset, index, encryptedResponse, result, decryptedResponse;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        autoEncrypter = this.autoEncrypter;
                        if (!autoEncrypter) {
                            // TODO(NODE-6065): throw a MongoRuntimeError in Node V7
                            // @ts-expect-error No cause provided because there is no underlying error.
                            throw new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption', {
                                dependencyName: 'n/a'
                            });
                        }
                        serverWireVersion = utils_1.maxWireVersion(this);
                        if (!(serverWireVersion === 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, _super.prototype.command.call(this, ns, cmd, options, responseType)];
                    case 1: 
                    // This means the initial handshake hasn't happened yet
                    return [2 /*return*/, _d.sent()];
                    case 2:
                        if (serverWireVersion < 8) {
                            throw new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2');
                        }
                        sort = cmd.find || cmd.findAndModify ? cmd.sort : null;
                        indexKeys = cmd.createIndexes
                            ? cmd.indexes.map(function (index) { return index.key; })
                            : null;
                        return [4 /*yield*/, autoEncrypter.encrypt(ns.toString(), cmd, options)];
                    case 3:
                        encrypted = _d.sent();
                        // Replace the saved values
                        if (sort != null && (cmd.find || cmd.findAndModify)) {
                            encrypted.sort = sort;
                        }
                        if (indexKeys != null && cmd.createIndexes) {
                            for (_i = 0, _b = indexKeys.entries(); _i < _b.length; _i++) {
                                _c = _b[_i], offset = _c[0], index = _c[1];
                                // @ts-expect-error `encrypted` is a generic "command", but we've narrowed for only `createIndexes` commands here
                                encrypted.indexes[offset].key = index;
                            }
                        }
                        return [4 /*yield*/, _super.prototype.command.call(this, ns, encrypted, options, 
                            // Eventually we want to require `responseType` which means we would satisfy `T` as the return type.
                            // In the meantime, we want encryptedResponse to always be _at least_ a MongoDBResponse if not a more specific subclass
                            // So that we can ensure we have access to the on-demand APIs for decorate response
                            responseType !== null && 
                            // Eventually we want to require `responseType` which means we would satisfy `T` as the return type.
                            // In the meantime, we want encryptedResponse to always be _at least_ a MongoDBResponse if not a more specific subclass
                            // So that we can ensure we have access to the on-demand APIs for decorate response
                            responseType !== void 0 ? 
                            // Eventually we want to require `responseType` which means we would satisfy `T` as the return type.
                            // In the meantime, we want encryptedResponse to always be _at least_ a MongoDBResponse if not a more specific subclass
                            // So that we can ensure we have access to the on-demand APIs for decorate response
                            responseType : responses_1.MongoDBResponse)];
                    case 4:
                        encryptedResponse = _d.sent();
                        return [4 /*yield*/, autoEncrypter.decrypt(encryptedResponse.toBytes(), options)];
                    case 5:
                        result = _d.sent();
                        decryptedResponse = (_a = responseType === null || responseType === void 0 ? void 0 : responseType.make(result)) !== null && _a !== void 0 ? _a : bson_1.deserialize(result, options);
                        if (autoEncrypter[constants_1.kDecorateResult]) {
                            if (responseType == null) {
                                utils_1.decorateDecryptionResult(decryptedResponse, encryptedResponse.toObject(), true);
                            }
                            else if (decryptedResponse instanceof responses_1.CursorResponse) {
                                decryptedResponse.encryptedResponse = encryptedResponse;
                            }
                        }
                        return [2 /*return*/, decryptedResponse];
                }
            });
        });
    };
    return CryptoConnection;
}(Connection));
exports.CryptoConnection = CryptoConnection;

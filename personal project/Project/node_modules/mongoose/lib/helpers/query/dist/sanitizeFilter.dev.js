'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var hasDollarKeys = require('./hasDollarKeys');

var _require = require('./trusted'),
    trustedSymbol = _require.trustedSymbol;

module.exports = function sanitizeFilter(filter) {
  if (filter == null || _typeof(filter) !== 'object') {
    return filter;
  }

  if (Array.isArray(filter)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = filter[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var subfilter = _step.value;
        sanitizeFilter(subfilter);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return filter;
  }

  var filterKeys = Object.keys(filter);

  for (var _i = 0, _filterKeys = filterKeys; _i < _filterKeys.length; _i++) {
    var key = _filterKeys[_i];
    var value = filter[key];

    if (value != null && value[trustedSymbol]) {
      continue;
    }

    if (key === '$and' || key === '$or') {
      sanitizeFilter(value);
      continue;
    }

    if (hasDollarKeys(value)) {
      var keys = Object.keys(value);

      if (keys.length === 1 && keys[0] === '$eq') {
        continue;
      }

      filter[key] = {
        $eq: filter[key]
      };
    }
  }

  return filter;
};
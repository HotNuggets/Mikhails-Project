"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListCollectionsCursor = void 0;

var execute_operation_1 = require("../operations/execute_operation");

var list_collections_1 = require("../operations/list_collections");

var abstract_cursor_1 = require("./abstract_cursor");
/** @public */


var ListCollectionsCursor =
/*#__PURE__*/
function (_abstract_cursor_1$Ab) {
  _inherits(ListCollectionsCursor, _abstract_cursor_1$Ab);

  function ListCollectionsCursor(db, filter, options) {
    var _this;

    _classCallCheck(this, ListCollectionsCursor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListCollectionsCursor).call(this, db.client, db.s.namespace, options));
    _this.parent = db;
    _this.filter = filter;
    _this.options = options;
    return _this;
  }

  _createClass(ListCollectionsCursor, [{
    key: "clone",
    value: function clone() {
      return new ListCollectionsCursor(this.parent, this.filter, _objectSpread({}, this.options, {}, this.cursorOptions));
    }
    /** @internal */

  }, {
    key: "_initialize",
    value: function _initialize(session) {
      var operation, response;
      return regeneratorRuntime.async(function _initialize$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, _objectSpread({}, this.cursorOptions, {}, this.options, {
                session: session
              }));
              _context.next = 3;
              return regeneratorRuntime.awrap((0, execute_operation_1.executeOperation)(this.parent.client, operation));

            case 3:
              response = _context.sent;
              return _context.abrupt("return", {
                server: operation.server,
                session: session,
                response: response
              });

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }]);

  return ListCollectionsCursor;
}(abstract_cursor_1.AbstractCursor);

exports.ListCollectionsCursor = ListCollectionsCursor;
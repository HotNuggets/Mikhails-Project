"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.loadAzureCredentials = exports.fetchAzureKMSToken = exports.prepareRequest = exports.addAzureParams = exports.tokenCache = exports.AzureCredentialCache = exports.AZURE_BASE_URL = void 0;
var error_1 = require("../../error");
var utils_1 = require("../../utils");
var errors_1 = require("../errors");
var MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS = 6000;
/** Base URL for getting Azure tokens. */
exports.AZURE_BASE_URL = 'http://169.254.169.254/metadata/identity/oauth2/token?';
/**
 * @internal
 */
var AzureCredentialCache = /** @class */ (function () {
    function AzureCredentialCache() {
        this.cachedToken = null;
    }
    AzureCredentialCache.prototype.getToken = function () {
        return __awaiter(this, void 0, Promise, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.cachedToken == null || this.needsRefresh(this.cachedToken))) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this._getToken()];
                    case 1:
                        _a.cachedToken = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, { accessToken: this.cachedToken.accessToken }];
                }
            });
        });
    };
    AzureCredentialCache.prototype.needsRefresh = function (token) {
        var timeUntilExpirationMS = token.expiresOnTimestamp - Date.now();
        return timeUntilExpirationMS <= MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS;
    };
    /**
     * exposed for testing
     */
    AzureCredentialCache.prototype.resetCache = function () {
        this.cachedToken = null;
    };
    /**
     * exposed for testing
     */
    AzureCredentialCache.prototype._getToken = function () {
        return fetchAzureKMSToken();
    };
    return AzureCredentialCache;
}());
exports.AzureCredentialCache = AzureCredentialCache;
/** @internal */
exports.tokenCache = new AzureCredentialCache();
/** @internal */
function parseResponse(response) {
    return __awaiter(this, void 0, Promise, function () {
        var status, rawBody, body, expiresInMS;
        return __generator(this, function (_a) {
            status = response.status, rawBody = response.body;
            body = (function () {
                try {
                    return JSON.parse(rawBody);
                }
                catch (_a) {
                    throw new errors_1.MongoCryptAzureKMSRequestError('Malformed JSON body in GET request.');
                }
            })();
            if (status !== 200) {
                throw new errors_1.MongoCryptAzureKMSRequestError('Unable to complete request.', body);
            }
            if (!body.access_token) {
                throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `access_token`.');
            }
            if (!body.expires_in) {
                throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `expires_in`.');
            }
            expiresInMS = Number(body.expires_in) * 1000;
            if (Number.isNaN(expiresInMS)) {
                throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - unable to parse int from `expires_in` field.');
            }
            return [2 /*return*/, {
                    accessToken: body.access_token,
                    expiresOnTimestamp: Date.now() + expiresInMS
                }];
        });
    });
}
/**
 * @internal
 * Get the Azure endpoint URL.
 */
function addAzureParams(url, resource, username) {
    url.searchParams.append('api-version', '2018-02-01');
    url.searchParams.append('resource', resource);
    if (username) {
        url.searchParams.append('client_id', username);
    }
    return url;
}
exports.addAzureParams = addAzureParams;
/**
 * @internal
 *
 * parses any options provided by prose tests to `fetchAzureKMSToken` and merges them with
 * the default values for headers and the request url.
 */
function prepareRequest(options) {
    var _a, _b;
    var url = new URL((_b = (_a = options.url) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : exports.AZURE_BASE_URL);
    addAzureParams(url, 'https://vault.azure.net');
    var headers = __assign(__assign({}, options.headers), { 'Content-Type': 'application/json', Metadata: true });
    return { headers: headers, url: url };
}
exports.prepareRequest = prepareRequest;
/**
 * @internal
 *
 * `AzureKMSRequestOptions` allows prose tests to modify the http request sent to the idms
 * servers.  This is required to simulate different server conditions.  No options are expected to
 * be set outside of tests.
 *
 * exposed for CSFLE
 * [prose test 18](https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#azure-imds-credentials)
 */
function fetchAzureKMSToken(options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, Promise, function () {
        var _a, headers, url, response, error_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = prepareRequest(options), headers = _a.headers, url = _a.url;
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, utils_1.get(url, { headers: headers })];
                case 2:
                    response = _b.sent();
                    return [4 /*yield*/, parseResponse(response)];
                case 3: return [2 /*return*/, _b.sent()];
                case 4:
                    error_2 = _b.sent();
                    if (error_2 instanceof error_1.MongoNetworkTimeoutError) {
                        throw new errors_1.MongoCryptAzureKMSRequestError("[Azure KMS] " + error_2.message);
                    }
                    throw error_2;
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.fetchAzureKMSToken = fetchAzureKMSToken;
/**
 * @internal
 *
 * @throws Will reject with a `MongoCryptError` if the http request fails or the http response is malformed.
 */
function loadAzureCredentials(kmsProviders) {
    return __awaiter(this, void 0, Promise, function () {
        var azure;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, exports.tokenCache.getToken()];
                case 1:
                    azure = _a.sent();
                    return [2 /*return*/, __assign(__assign({}, kmsProviders), { azure: azure })];
            }
        });
    });
}
exports.loadAzureCredentials = loadAzureCredentials;

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableReadError = exports.isRetryableWriteError = exports.needsRetryableWriteLabel = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoGCPError = exports.MongoAzureError = exports.MongoOIDCError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;
/** @internal */
var kErrorLabels = Symbol('errorLabels');
/**
 * @internal
 * The legacy error message from the server that indicates the node is not a writable primary
 * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering
 */
exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');
/**
 * @internal
 * The legacy error message from the server that indicates the node is not a primary or secondary
 * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering
 */
exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');
/**
 * @internal
 * The error message from the server that indicates the node is recovering
 * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering
 */
exports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');
/** @internal MongoDB Error Codes */
exports.MONGODB_ERROR_CODES = Object.freeze({
    HostUnreachable: 6,
    HostNotFound: 7,
    AuthenticationFailed: 18,
    NetworkTimeout: 89,
    ShutdownInProgress: 91,
    PrimarySteppedDown: 189,
    ExceededTimeLimit: 262,
    SocketException: 9001,
    NotWritablePrimary: 10107,
    InterruptedAtShutdown: 11600,
    InterruptedDueToReplStateChange: 11602,
    NotPrimaryNoSecondaryOk: 13435,
    NotPrimaryOrSecondary: 13436,
    StaleShardVersion: 63,
    StaleEpoch: 150,
    StaleConfig: 13388,
    RetryChangeStream: 234,
    FailedToSatisfyReadPreference: 133,
    CursorNotFound: 43,
    LegacyNotPrimary: 10058,
    WriteConcernFailed: 64,
    NamespaceNotFound: 26,
    IllegalOperation: 20,
    MaxTimeMSExpired: 50,
    UnknownReplWriteConcern: 79,
    UnsatisfiableWriteConcern: 100,
    Reauthenticate: 391,
    ReadConcernMajorityNotAvailableYet: 134
});
// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error
exports.GET_MORE_RESUMABLE_CODES = new Set([
    exports.MONGODB_ERROR_CODES.HostUnreachable,
    exports.MONGODB_ERROR_CODES.HostNotFound,
    exports.MONGODB_ERROR_CODES.NetworkTimeout,
    exports.MONGODB_ERROR_CODES.ShutdownInProgress,
    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,
    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,
    exports.MONGODB_ERROR_CODES.SocketException,
    exports.MONGODB_ERROR_CODES.NotWritablePrimary,
    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,
    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,
    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,
    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,
    exports.MONGODB_ERROR_CODES.StaleShardVersion,
    exports.MONGODB_ERROR_CODES.StaleEpoch,
    exports.MONGODB_ERROR_CODES.StaleConfig,
    exports.MONGODB_ERROR_CODES.RetryChangeStream,
    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,
    exports.MONGODB_ERROR_CODES.CursorNotFound
]);
/** @public */
exports.MongoErrorLabel = Object.freeze({
    RetryableWriteError: 'RetryableWriteError',
    TransientTransactionError: 'TransientTransactionError',
    UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',
    ResumableChangeStreamError: 'ResumableChangeStreamError',
    HandshakeError: 'HandshakeError',
    ResetPool: 'ResetPool',
    PoolRequstedRetry: 'PoolRequstedRetry',
    InterruptInUseConnections: 'InterruptInUseConnections',
    NoWritesPerformed: 'NoWritesPerformed'
});
function isAggregateError(e) {
    return e != null && typeof e === 'object' && 'errors' in e && Array.isArray(e.errors);
}
/**
 * @public
 * @category Error
 *
 * @privateRemarks
 * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument
 */
var MongoError = /** @class */ (function (_super) {
    __extends(MongoError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoError(message, options) {
        var _this = _super.call(this, message, options) || this;
        _this[kErrorLabels] = new Set();
        return _this;
    }
    /** @internal */
    MongoError.buildErrorMessage = function (e) {
        if (typeof e === 'string') {
            return e;
        }
        if (isAggregateError(e) && e.message.length === 0) {
            return e.errors.length === 0
                ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.'
                : e.errors.map(function (_a) {
                    var message = _a.message;
                    return message;
                }).join(', ');
        }
        return e != null && typeof e === 'object' && 'message' in e && typeof e.message === 'string'
            ? e.message
            : 'empty error message';
    };
    Object.defineProperty(MongoError.prototype, "name", {
        get: function () {
            return 'MongoError';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MongoError.prototype, "errmsg", {
        /** Legacy name for server error responses */
        get: function () {
            return this.message;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Checks the error to see if it has an error label
     *
     * @param label - The error label to check for
     * @returns returns true if the error has the provided error label
     */
    MongoError.prototype.hasErrorLabel = function (label) {
        return this[kErrorLabels].has(label);
    };
    MongoError.prototype.addErrorLabel = function (label) {
        this[kErrorLabels].add(label);
    };
    Object.defineProperty(MongoError.prototype, "errorLabels", {
        get: function () {
            return Array.from(this[kErrorLabels]);
        },
        enumerable: false,
        configurable: true
    });
    return MongoError;
}(Error));
exports.MongoError = MongoError;
/**
 * An error coming from the mongo server
 *
 * @public
 * @category Error
 */
var MongoServerError = /** @class */ (function (_super) {
    __extends(MongoServerError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoServerError(message) {
        var _this = _super.call(this, message.message || message.errmsg || message.$err || 'n/a') || this;
        if (message.errorLabels) {
            _this[kErrorLabels] = new Set(message.errorLabels);
        }
        _this.errorResponse = message;
        for (var name in message) {
            if (name !== 'errorLabels' &&
                name !== 'errmsg' &&
                name !== 'message' &&
                name !== 'errorResponse') {
                _this[name] = message[name];
            }
        }
        return _this;
    }
    Object.defineProperty(MongoServerError.prototype, "name", {
        get: function () {
            return 'MongoServerError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoServerError;
}(MongoError));
exports.MongoServerError = MongoServerError;
/**
 * An error generated by the driver
 *
 * @public
 * @category Error
 */
var MongoDriverError = /** @class */ (function (_super) {
    __extends(MongoDriverError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoDriverError(message, options) {
        return _super.call(this, message, options) || this;
    }
    Object.defineProperty(MongoDriverError.prototype, "name", {
        get: function () {
            return 'MongoDriverError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoDriverError;
}(MongoError));
exports.MongoDriverError = MongoDriverError;
/**
 * An error generated when the driver API is used incorrectly
 *
 * @privateRemarks
 * Should **never** be directly instantiated
 *
 * @public
 * @category Error
 */
var MongoAPIError = /** @class */ (function (_super) {
    __extends(MongoAPIError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoAPIError(message, options) {
        return _super.call(this, message, options) || this;
    }
    Object.defineProperty(MongoAPIError.prototype, "name", {
        get: function () {
            return 'MongoAPIError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoAPIError;
}(MongoDriverError));
exports.MongoAPIError = MongoAPIError;
/**
 * An error generated when the driver encounters unexpected input
 * or reaches an unexpected/invalid internal state
 *
 * @privateRemarks
 * Should **never** be directly instantiated.
 *
 * @public
 * @category Error
 */
var MongoRuntimeError = /** @class */ (function (_super) {
    __extends(MongoRuntimeError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoRuntimeError(message, options) {
        return _super.call(this, message, options) || this;
    }
    Object.defineProperty(MongoRuntimeError.prototype, "name", {
        get: function () {
            return 'MongoRuntimeError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoRuntimeError;
}(MongoDriverError));
exports.MongoRuntimeError = MongoRuntimeError;
/**
 * An error generated when a batch command is re-executed after one of the commands in the batch
 * has failed
 *
 * @public
 * @category Error
 */
var MongoBatchReExecutionError = /** @class */ (function (_super) {
    __extends(MongoBatchReExecutionError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoBatchReExecutionError(message) {
        if (message === void 0) { message = 'This batch has already been executed, create new batch to execute'; }
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoBatchReExecutionError.prototype, "name", {
        get: function () {
            return 'MongoBatchReExecutionError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoBatchReExecutionError;
}(MongoAPIError));
exports.MongoBatchReExecutionError = MongoBatchReExecutionError;
/**
 * An error generated when the driver fails to decompress
 * data received from the server.
 *
 * @public
 * @category Error
 */
var MongoDecompressionError = /** @class */ (function (_super) {
    __extends(MongoDecompressionError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoDecompressionError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoDecompressionError.prototype, "name", {
        get: function () {
            return 'MongoDecompressionError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoDecompressionError;
}(MongoRuntimeError));
exports.MongoDecompressionError = MongoDecompressionError;
/**
 * An error thrown when the user attempts to operate on a database or collection through a MongoClient
 * that has not yet successfully called the "connect" method
 *
 * @public
 * @category Error
 */
var MongoNotConnectedError = /** @class */ (function (_super) {
    __extends(MongoNotConnectedError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoNotConnectedError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoNotConnectedError.prototype, "name", {
        get: function () {
            return 'MongoNotConnectedError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoNotConnectedError;
}(MongoAPIError));
exports.MongoNotConnectedError = MongoNotConnectedError;
/**
 * An error generated when the user makes a mistake in the usage of transactions.
 * (e.g. attempting to commit a transaction with a readPreference other than primary)
 *
 * @public
 * @category Error
 */
var MongoTransactionError = /** @class */ (function (_super) {
    __extends(MongoTransactionError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoTransactionError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoTransactionError.prototype, "name", {
        get: function () {
            return 'MongoTransactionError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoTransactionError;
}(MongoAPIError));
exports.MongoTransactionError = MongoTransactionError;
/**
 * An error generated when the user attempts to operate
 * on a session that has expired or has been closed.
 *
 * @public
 * @category Error
 */
var MongoExpiredSessionError = /** @class */ (function (_super) {
    __extends(MongoExpiredSessionError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoExpiredSessionError(message) {
        if (message === void 0) { message = 'Cannot use a session that has ended'; }
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoExpiredSessionError.prototype, "name", {
        get: function () {
            return 'MongoExpiredSessionError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoExpiredSessionError;
}(MongoAPIError));
exports.MongoExpiredSessionError = MongoExpiredSessionError;
/**
 * A error generated when the user attempts to authenticate
 * via Kerberos, but fails to connect to the Kerberos client.
 *
 * @public
 * @category Error
 */
var MongoKerberosError = /** @class */ (function (_super) {
    __extends(MongoKerberosError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoKerberosError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoKerberosError.prototype, "name", {
        get: function () {
            return 'MongoKerberosError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoKerberosError;
}(MongoRuntimeError));
exports.MongoKerberosError = MongoKerberosError;
/**
 * A error generated when the user attempts to authenticate
 * via AWS, but fails
 *
 * @public
 * @category Error
 */
var MongoAWSError = /** @class */ (function (_super) {
    __extends(MongoAWSError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoAWSError(message, options) {
        return _super.call(this, message, options) || this;
    }
    Object.defineProperty(MongoAWSError.prototype, "name", {
        get: function () {
            return 'MongoAWSError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoAWSError;
}(MongoRuntimeError));
exports.MongoAWSError = MongoAWSError;
/**
 * A error generated when the user attempts to authenticate
 * via OIDC callbacks, but fails.
 *
 * @public
 * @category Error
 */
var MongoOIDCError = /** @class */ (function (_super) {
    __extends(MongoOIDCError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoOIDCError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoOIDCError.prototype, "name", {
        get: function () {
            return 'MongoOIDCError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoOIDCError;
}(MongoRuntimeError));
exports.MongoOIDCError = MongoOIDCError;
/**
 * A error generated when the user attempts to authenticate
 * via Azure, but fails.
 *
 * @public
 * @category Error
 */
var MongoAzureError = /** @class */ (function (_super) {
    __extends(MongoAzureError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoAzureError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoAzureError.prototype, "name", {
        get: function () {
            return 'MongoAzureError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoAzureError;
}(MongoOIDCError));
exports.MongoAzureError = MongoAzureError;
/**
 * A error generated when the user attempts to authenticate
 * via GCP, but fails.
 *
 * @public
 * @category Error
 */
var MongoGCPError = /** @class */ (function (_super) {
    __extends(MongoGCPError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoGCPError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoGCPError.prototype, "name", {
        get: function () {
            return 'MongoGCPError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoGCPError;
}(MongoOIDCError));
exports.MongoGCPError = MongoGCPError;
/**
 * An error generated when a ChangeStream operation fails to execute.
 *
 * @public
 * @category Error
 */
var MongoChangeStreamError = /** @class */ (function (_super) {
    __extends(MongoChangeStreamError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoChangeStreamError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoChangeStreamError.prototype, "name", {
        get: function () {
            return 'MongoChangeStreamError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoChangeStreamError;
}(MongoRuntimeError));
exports.MongoChangeStreamError = MongoChangeStreamError;
/**
 * An error thrown when the user calls a function or method not supported on a tailable cursor
 *
 * @public
 * @category Error
 */
var MongoTailableCursorError = /** @class */ (function (_super) {
    __extends(MongoTailableCursorError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoTailableCursorError(message) {
        if (message === void 0) { message = 'Tailable cursor does not support this operation'; }
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoTailableCursorError.prototype, "name", {
        get: function () {
            return 'MongoTailableCursorError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoTailableCursorError;
}(MongoAPIError));
exports.MongoTailableCursorError = MongoTailableCursorError;
/** An error generated when a GridFSStream operation fails to execute.
 *
 * @public
 * @category Error
 */
var MongoGridFSStreamError = /** @class */ (function (_super) {
    __extends(MongoGridFSStreamError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoGridFSStreamError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoGridFSStreamError.prototype, "name", {
        get: function () {
            return 'MongoGridFSStreamError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoGridFSStreamError;
}(MongoRuntimeError));
exports.MongoGridFSStreamError = MongoGridFSStreamError;
/**
 * An error generated when a malformed or invalid chunk is
 * encountered when reading from a GridFSStream.
 *
 * @public
 * @category Error
 */
var MongoGridFSChunkError = /** @class */ (function (_super) {
    __extends(MongoGridFSChunkError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoGridFSChunkError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoGridFSChunkError.prototype, "name", {
        get: function () {
            return 'MongoGridFSChunkError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoGridFSChunkError;
}(MongoRuntimeError));
exports.MongoGridFSChunkError = MongoGridFSChunkError;
/**
 * An error generated when a **parsable** unexpected response comes from the server.
 * This is generally an error where the driver in a state expecting a certain behavior to occur in
 * the next message from MongoDB but it receives something else.
 * This error **does not** represent an issue with wire message formatting.
 *
 * #### Example
 * When an operation fails, it is the driver's job to retry it. It must perform serverSelection
 * again to make sure that it attempts the operation against a server in a good state. If server
 * selection returns a server that does not support retryable operations, this error is used.
 * This scenario is unlikely as retryable support would also have been determined on the first attempt
 * but it is possible the state change could report a selectable server that does not support retries.
 *
 * @public
 * @category Error
 */
var MongoUnexpectedServerResponseError = /** @class */ (function (_super) {
    __extends(MongoUnexpectedServerResponseError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoUnexpectedServerResponseError(message, options) {
        return _super.call(this, message, options) || this;
    }
    Object.defineProperty(MongoUnexpectedServerResponseError.prototype, "name", {
        get: function () {
            return 'MongoUnexpectedServerResponseError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoUnexpectedServerResponseError;
}(MongoRuntimeError));
exports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;
/**
 * An error thrown when the user attempts to add options to a cursor that has already been
 * initialized
 *
 * @public
 * @category Error
 */
var MongoCursorInUseError = /** @class */ (function (_super) {
    __extends(MongoCursorInUseError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoCursorInUseError(message) {
        if (message === void 0) { message = 'Cursor is already initialized'; }
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoCursorInUseError.prototype, "name", {
        get: function () {
            return 'MongoCursorInUseError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoCursorInUseError;
}(MongoAPIError));
exports.MongoCursorInUseError = MongoCursorInUseError;
/**
 * An error generated when an attempt is made to operate
 * on a closed/closing server.
 *
 * @public
 * @category Error
 */
var MongoServerClosedError = /** @class */ (function (_super) {
    __extends(MongoServerClosedError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoServerClosedError(message) {
        if (message === void 0) { message = 'Server is closed'; }
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoServerClosedError.prototype, "name", {
        get: function () {
            return 'MongoServerClosedError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoServerClosedError;
}(MongoAPIError));
exports.MongoServerClosedError = MongoServerClosedError;
/**
 * An error thrown when an attempt is made to read from a cursor that has been exhausted
 *
 * @public
 * @category Error
 */
var MongoCursorExhaustedError = /** @class */ (function (_super) {
    __extends(MongoCursorExhaustedError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoCursorExhaustedError(message) {
        return _super.call(this, message || 'Cursor is exhausted') || this;
    }
    Object.defineProperty(MongoCursorExhaustedError.prototype, "name", {
        get: function () {
            return 'MongoCursorExhaustedError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoCursorExhaustedError;
}(MongoAPIError));
exports.MongoCursorExhaustedError = MongoCursorExhaustedError;
/**
 * An error generated when an attempt is made to operate on a
 * dropped, or otherwise unavailable, database.
 *
 * @public
 * @category Error
 */
var MongoTopologyClosedError = /** @class */ (function (_super) {
    __extends(MongoTopologyClosedError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoTopologyClosedError(message) {
        if (message === void 0) { message = 'Topology is closed'; }
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoTopologyClosedError.prototype, "name", {
        get: function () {
            return 'MongoTopologyClosedError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoTopologyClosedError;
}(MongoAPIError));
exports.MongoTopologyClosedError = MongoTopologyClosedError;
/** @internal */
var kBeforeHandshake = Symbol('beforeHandshake');
function isNetworkErrorBeforeHandshake(err) {
    return err[kBeforeHandshake] === true;
}
exports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;
/**
 * An error indicating an issue with the network, including TCP errors and timeouts.
 * @public
 * @category Error
 */
var MongoNetworkError = /** @class */ (function (_super) {
    __extends(MongoNetworkError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoNetworkError(message, options) {
        var _this = _super.call(this, message, { cause: options === null || options === void 0 ? void 0 : options.cause }) || this;
        if (options && typeof options.beforeHandshake === 'boolean') {
            _this[kBeforeHandshake] = options.beforeHandshake;
        }
        return _this;
    }
    Object.defineProperty(MongoNetworkError.prototype, "name", {
        get: function () {
            return 'MongoNetworkError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoNetworkError;
}(MongoError));
exports.MongoNetworkError = MongoNetworkError;
/**
 * An error indicating a network timeout occurred
 * @public
 * @category Error
 *
 * @privateRemarks
 * mongodb-client-encryption has a dependency on this error with an instanceof check
 */
var MongoNetworkTimeoutError = /** @class */ (function (_super) {
    __extends(MongoNetworkTimeoutError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoNetworkTimeoutError(message, options) {
        return _super.call(this, message, options) || this;
    }
    Object.defineProperty(MongoNetworkTimeoutError.prototype, "name", {
        get: function () {
            return 'MongoNetworkTimeoutError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoNetworkTimeoutError;
}(MongoNetworkError));
exports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;
/**
 * An error used when attempting to parse a value (like a connection string)
 * @public
 * @category Error
 */
var MongoParseError = /** @class */ (function (_super) {
    __extends(MongoParseError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoParseError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoParseError.prototype, "name", {
        get: function () {
            return 'MongoParseError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoParseError;
}(MongoDriverError));
exports.MongoParseError = MongoParseError;
/**
 * An error generated when the user supplies malformed or unexpected arguments
 * or when a required argument or field is not provided.
 *
 *
 * @public
 * @category Error
 */
var MongoInvalidArgumentError = /** @class */ (function (_super) {
    __extends(MongoInvalidArgumentError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoInvalidArgumentError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoInvalidArgumentError.prototype, "name", {
        get: function () {
            return 'MongoInvalidArgumentError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoInvalidArgumentError;
}(MongoAPIError));
exports.MongoInvalidArgumentError = MongoInvalidArgumentError;
/**
 * An error generated when a feature that is not enabled or allowed for the current server
 * configuration is used
 *
 *
 * @public
 * @category Error
 */
var MongoCompatibilityError = /** @class */ (function (_super) {
    __extends(MongoCompatibilityError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoCompatibilityError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoCompatibilityError.prototype, "name", {
        get: function () {
            return 'MongoCompatibilityError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoCompatibilityError;
}(MongoAPIError));
exports.MongoCompatibilityError = MongoCompatibilityError;
/**
 * An error generated when the user fails to provide authentication credentials before attempting
 * to connect to a mongo server instance.
 *
 *
 * @public
 * @category Error
 */
var MongoMissingCredentialsError = /** @class */ (function (_super) {
    __extends(MongoMissingCredentialsError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoMissingCredentialsError(message) {
        return _super.call(this, message) || this;
    }
    Object.defineProperty(MongoMissingCredentialsError.prototype, "name", {
        get: function () {
            return 'MongoMissingCredentialsError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoMissingCredentialsError;
}(MongoAPIError));
exports.MongoMissingCredentialsError = MongoMissingCredentialsError;
/**
 * An error generated when a required module or dependency is not present in the local environment
 *
 * @public
 * @category Error
 */
var MongoMissingDependencyError = /** @class */ (function (_super) {
    __extends(MongoMissingDependencyError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoMissingDependencyError(message, options) {
        var _this = _super.call(this, message, options) || this;
        _this.dependencyName = options.dependencyName;
        return _this;
    }
    Object.defineProperty(MongoMissingDependencyError.prototype, "name", {
        get: function () {
            return 'MongoMissingDependencyError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoMissingDependencyError;
}(MongoAPIError));
exports.MongoMissingDependencyError = MongoMissingDependencyError;
/**
 * An error signifying a general system issue
 * @public
 * @category Error
 */
var MongoSystemError = /** @class */ (function (_super) {
    __extends(MongoSystemError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoSystemError(message, reason) {
        var _a;
        var _this = this;
        if (reason && reason.error) {
            _this = _super.call(this, MongoError.buildErrorMessage(reason.error.message || reason.error), {
                cause: reason.error
            }) || this;
        }
        else {
            _this = _super.call(this, message) || this;
        }
        if (reason) {
            _this.reason = reason;
        }
        _this.code = (_a = reason.error) === null || _a === void 0 ? void 0 : _a.code;
        return _this;
    }
    Object.defineProperty(MongoSystemError.prototype, "name", {
        get: function () {
            return 'MongoSystemError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoSystemError;
}(MongoError));
exports.MongoSystemError = MongoSystemError;
/**
 * An error signifying a client-side server selection error
 * @public
 * @category Error
 */
var MongoServerSelectionError = /** @class */ (function (_super) {
    __extends(MongoServerSelectionError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoServerSelectionError(message, reason) {
        return _super.call(this, message, reason) || this;
    }
    Object.defineProperty(MongoServerSelectionError.prototype, "name", {
        get: function () {
            return 'MongoServerSelectionError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoServerSelectionError;
}(MongoSystemError));
exports.MongoServerSelectionError = MongoServerSelectionError;
/**
 * An error thrown when the server reports a writeConcernError
 * @public
 * @category Error
 */
var MongoWriteConcernError = /** @class */ (function (_super) {
    __extends(MongoWriteConcernError, _super);
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    function MongoWriteConcernError(result) {
        var _this = _super.call(this, __assign(__assign({}, result.writeConcernError), result)) || this;
        _this.errInfo = result.writeConcernError.errInfo;
        _this.result = result;
        return _this;
    }
    Object.defineProperty(MongoWriteConcernError.prototype, "name", {
        get: function () {
            return 'MongoWriteConcernError';
        },
        enumerable: false,
        configurable: true
    });
    return MongoWriteConcernError;
}(MongoServerError));
exports.MongoWriteConcernError = MongoWriteConcernError;
// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error
var RETRYABLE_READ_ERROR_CODES = new Set([
    exports.MONGODB_ERROR_CODES.HostUnreachable,
    exports.MONGODB_ERROR_CODES.HostNotFound,
    exports.MONGODB_ERROR_CODES.NetworkTimeout,
    exports.MONGODB_ERROR_CODES.ShutdownInProgress,
    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,
    exports.MONGODB_ERROR_CODES.SocketException,
    exports.MONGODB_ERROR_CODES.NotWritablePrimary,
    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,
    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,
    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,
    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,
    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,
    exports.MONGODB_ERROR_CODES.ReadConcernMajorityNotAvailableYet
]);
// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms
var RETRYABLE_WRITE_ERROR_CODES = RETRYABLE_READ_ERROR_CODES;
function needsRetryableWriteLabel(error, maxWireVersion, serverType) {
    var _a, _b;
    // pre-4.4 server, then the driver adds an error label for every valid case
    // execute operation will only inspect the label, code/message logic is handled here
    if (error instanceof MongoNetworkError) {
        return true;
    }
    if (error instanceof MongoError) {
        if ((maxWireVersion >= 9 || isRetryableWriteError(error)) &&
            !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {
            // If we already have the error label no need to add it again. 4.4+ servers add the label.
            // In the case where we have a handshake error, need to fall down to the logic checking
            // the codes.
            return false;
        }
    }
    if (error instanceof MongoWriteConcernError) {
        if (serverType === 'Mongos' && maxWireVersion < 9) {
            // use original top-level code from server response
            return RETRYABLE_WRITE_ERROR_CODES.has((_a = error.result.code) !== null && _a !== void 0 ? _a : 0);
        }
        var code = (_b = error.result.writeConcernError.code) !== null && _b !== void 0 ? _b : Number(error.code);
        return RETRYABLE_WRITE_ERROR_CODES.has(Number.isNaN(code) ? 0 : code);
    }
    if (error instanceof MongoError) {
        return RETRYABLE_WRITE_ERROR_CODES.has(Number(error.code));
    }
    var isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);
    if (isNotWritablePrimaryError) {
        return true;
    }
    var isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);
    if (isNodeIsRecoveringError) {
        return true;
    }
    return false;
}
exports.needsRetryableWriteLabel = needsRetryableWriteLabel;
function isRetryableWriteError(error) {
    return (error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError) ||
        error.hasErrorLabel(exports.MongoErrorLabel.PoolRequstedRetry));
}
exports.isRetryableWriteError = isRetryableWriteError;
/** Determines whether an error is something the driver should attempt to retry */
function isRetryableReadError(error) {
    var hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;
    if (hasRetryableErrorCode) {
        return true;
    }
    if (error instanceof MongoNetworkError) {
        return true;
    }
    var isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);
    if (isNotWritablePrimaryError) {
        return true;
    }
    var isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);
    if (isNodeIsRecoveringError) {
        return true;
    }
    return false;
}
exports.isRetryableReadError = isRetryableReadError;
var SDAM_RECOVERING_CODES = new Set([
    exports.MONGODB_ERROR_CODES.ShutdownInProgress,
    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,
    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,
    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,
    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary
]);
var SDAM_NOT_PRIMARY_CODES = new Set([
    exports.MONGODB_ERROR_CODES.NotWritablePrimary,
    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,
    exports.MONGODB_ERROR_CODES.LegacyNotPrimary
]);
var SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([
    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,
    exports.MONGODB_ERROR_CODES.ShutdownInProgress
]);
function isRecoveringError(err) {
    if (typeof err.code === 'number') {
        // If any error code exists, we ignore the error.message
        return SDAM_RECOVERING_CODES.has(err.code);
    }
    return (exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||
        exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message));
}
function isNotWritablePrimaryError(err) {
    if (typeof err.code === 'number') {
        // If any error code exists, we ignore the error.message
        return SDAM_NOT_PRIMARY_CODES.has(err.code);
    }
    if (isRecoveringError(err)) {
        return false;
    }
    return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);
}
function isNodeShuttingDownError(err) {
    return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));
}
exports.isNodeShuttingDownError = isNodeShuttingDownError;
/**
 * Determines whether SDAM can recover from a given error. If it cannot
 * then the pool will be cleared, and server state will completely reset
 * locally.
 *
 * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering
 */
function isSDAMUnrecoverableError(error) {
    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or
    //       close event are considered unrecoverable
    if (error instanceof MongoParseError || error == null) {
        return true;
    }
    return isRecoveringError(error) || isNotWritablePrimaryError(error);
}
exports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;
function isNetworkTimeoutError(err) {
    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));
}
exports.isNetworkTimeoutError = isNetworkTimeoutError;
function isResumableError(error, wireVersion) {
    if (error == null || !(error instanceof MongoError)) {
        return false;
    }
    if (error instanceof MongoNetworkError) {
        return true;
    }
    if (wireVersion != null && wireVersion >= 9) {
        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable
        if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {
            return true;
        }
        return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);
    }
    if (typeof error.code === 'number') {
        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);
    }
    return false;
}
exports.isResumableError = isResumableError;

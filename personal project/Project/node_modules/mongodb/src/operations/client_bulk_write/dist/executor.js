"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.ClientBulkWriteExecutor = void 0;
var client_bulk_write_cursor_1 = require("../../cursor/client_bulk_write_cursor");
var error_1 = require("../../error");
var write_concern_1 = require("../../write_concern");
var execute_operation_1 = require("../execute_operation");
var client_bulk_write_1 = require("./client_bulk_write");
var command_builder_1 = require("./command_builder");
var results_merger_1 = require("./results_merger");
/**
 * Responsible for executing a client bulk write.
 * @internal
 */
var ClientBulkWriteExecutor = /** @class */ (function () {
    /**
     * Instantiate the executor.
     * @param client - The mongo client.
     * @param operations - The user supplied bulk write models.
     * @param options - The bulk write options.
     */
    function ClientBulkWriteExecutor(client, operations, options) {
        var _a;
        if (operations.length === 0) {
            throw new error_1.MongoClientBulkWriteExecutionError('No client bulk write models were provided.');
        }
        this.client = client;
        this.operations = operations;
        this.options = __assign({ ordered: true, bypassDocumentValidation: false, verboseResults: false }, options);
        // If no write concern was provided, we inherit one from the client.
        if (!this.options.writeConcern) {
            this.options.writeConcern = write_concern_1.WriteConcern.fromOptions(this.client.options);
        }
        if (((_a = this.options.writeConcern) === null || _a === void 0 ? void 0 : _a.w) === 0) {
            if (this.options.verboseResults) {
                throw new error_1.MongoInvalidArgumentError('Cannot request unacknowledged write concern and verbose results');
            }
            if (this.options.ordered) {
                throw new error_1.MongoInvalidArgumentError('Cannot request unacknowledged write concern and ordered writes');
            }
        }
    }
    /**
     * Execute the client bulk write. Will split commands into batches and exhaust the cursors
     * for each, then merge the results into one.
     * @returns The result.
     */
    ClientBulkWriteExecutor.prototype.execute = function () {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var pkFactory, commandBuilder, operation, resultsMerger, cursor, error_2, bulkWriteError, error;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        pkFactory = this.client.s.options.pkFactory;
                        commandBuilder = new command_builder_1.ClientBulkWriteCommandBuilder(this.operations, this.options, pkFactory);
                        if (!(((_a = this.options.writeConcern) === null || _a === void 0 ? void 0 : _a.w) === 0)) return [3 /*break*/, 4];
                        _b.label = 1;
                    case 1:
                        if (!commandBuilder.hasNextBatch()) return [3 /*break*/, 3];
                        operation = new client_bulk_write_1.ClientBulkWriteOperation(commandBuilder, this.options);
                        return [4 /*yield*/, execute_operation_1.executeOperation(this.client, operation)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/, results_merger_1.ClientBulkWriteResultsMerger.unacknowledged()];
                    case 4:
                        resultsMerger = new results_merger_1.ClientBulkWriteResultsMerger(this.options);
                        _b.label = 5;
                    case 5:
                        if (!commandBuilder.hasNextBatch()) return [3 /*break*/, 10];
                        cursor = new client_bulk_write_cursor_1.ClientBulkWriteCursor(this.client, commandBuilder, this.options);
                        _b.label = 6;
                    case 6:
                        _b.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, resultsMerger.merge(cursor)];
                    case 7:
                        _b.sent();
                        return [3 /*break*/, 9];
                    case 8:
                        error_2 = _b.sent();
                        // Write concern errors are recorded in the writeConcernErrors field on MongoClientBulkWriteError.
                        // When a write concern error is encountered, it should not terminate execution of the bulk write
                        // for either ordered or unordered bulk writes. However, drivers MUST throw an exception at the end
                        // of execution if any write concern errors were observed.
                        if (error_2 instanceof error_1.MongoServerError && !(error_2 instanceof error_1.MongoClientBulkWriteError)) {
                            bulkWriteError = new error_1.MongoClientBulkWriteError({
                                message: 'Mongo client bulk write encountered an error during execution'
                            });
                            bulkWriteError.cause = error_2;
                            bulkWriteError.partialResult = resultsMerger.bulkWriteResult;
                            throw bulkWriteError;
                        }
                        else {
                            // Client side errors are just thrown.
                            throw error_2;
                        }
                        return [3 /*break*/, 9];
                    case 9: return [3 /*break*/, 5];
                    case 10:
                        // If we have write concern errors or unordered write errors at the end we throw.
                        if (resultsMerger.writeConcernErrors.length > 0 || resultsMerger.writeErrors.size > 0) {
                            error = new error_1.MongoClientBulkWriteError({
                                message: 'Mongo client bulk write encountered errors during execution.'
                            });
                            error.writeConcernErrors = resultsMerger.writeConcernErrors;
                            error.writeErrors = resultsMerger.writeErrors;
                            error.partialResult = resultsMerger.bulkWriteResult;
                            throw error;
                        }
                        return [2 /*return*/, resultsMerger.bulkWriteResult];
                }
            });
        });
    };
    return ClientBulkWriteExecutor;
}());
exports.ClientBulkWriteExecutor = ClientBulkWriteExecutor;

"use strict";
exports.__esModule = true;
exports.getStylizeFunction = exports.defaultInspect = exports.isDate = exports.isMap = exports.isRegExp = exports.isBigUInt64Array = exports.isBigInt64Array = exports.isUint8Array = exports.isAnyArrayBuffer = void 0;
var map = new WeakMap();
var TYPES = {
    ArrayBuffer: '[object ArrayBuffer]',
    SharedArrayBuffer: '[object SharedArrayBuffer]',
    Uint8Array: '[object Uint8Array]',
    BigInt64Array: '[object BigInt64Array]',
    BigUint64Array: '[object BigUint64Array]',
    RegExp: '[object RegExp]',
    Map: '[object Map]',
    Date: '[object Date]'
};
/**
 * Retrieves the prototype.toString() of a value.
 * If the value is an object, it will cache the result in a WeakMap for future use.
 */
function getPrototypeString(value) {
    var str = map.get(value);
    if (!str) {
        str = Object.prototype.toString.call(value);
        if (value !== null && typeof value === 'object') {
            map.set(value, str);
        }
    }
    return str;
}
function isAnyArrayBuffer(value) {
    var type = getPrototypeString(value);
    return type === TYPES.ArrayBuffer || type === TYPES.SharedArrayBuffer;
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;
function isUint8Array(value) {
    var type = getPrototypeString(value);
    return type === TYPES.Uint8Array;
}
exports.isUint8Array = isUint8Array;
function isBigInt64Array(value) {
    var type = getPrototypeString(value);
    return type === TYPES.BigInt64Array;
}
exports.isBigInt64Array = isBigInt64Array;
function isBigUInt64Array(value) {
    var type = getPrototypeString(value);
    return type === TYPES.BigUint64Array;
}
exports.isBigUInt64Array = isBigUInt64Array;
function isRegExp(d) {
    var type = getPrototypeString(d);
    return type === TYPES.RegExp;
}
exports.isRegExp = isRegExp;
function isMap(d) {
    var type = getPrototypeString(d);
    return type === TYPES.Map;
}
exports.isMap = isMap;
function isDate(d) {
    var type = getPrototypeString(d);
    return type === TYPES.Date;
}
exports.isDate = isDate;
function defaultInspect(x, _options) {
    return JSON.stringify(x, function (k, v) {
        if (typeof v === 'bigint') {
            return { $numberLong: "" + v };
        }
        else if (isMap(v)) {
            return Object.fromEntries(v);
        }
        return v;
    });
}
exports.defaultInspect = defaultInspect;
/** @internal */
function getStylizeFunction(options) {
    var stylizeExists = options != null &&
        typeof options === 'object' &&
        'stylize' in options &&
        typeof options.stylize === 'function';
    if (stylizeExists) {
        return options.stylize;
    }
}
exports.getStylizeFunction = getStylizeFunction;

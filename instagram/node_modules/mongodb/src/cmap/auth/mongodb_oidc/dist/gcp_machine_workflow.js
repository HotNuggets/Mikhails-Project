"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.GCPMachineWorkflow = void 0;
var error_1 = require("../../../error");
var utils_1 = require("../../../utils");
var machine_workflow_1 = require("./machine_workflow");
/** GCP base URL. */
var GCP_BASE_URL = 'http://metadata/computeMetadata/v1/instance/service-accounts/default/identity';
/** GCP request headers. */
var GCP_HEADERS = Object.freeze({ 'Metadata-Flavor': 'Google' });
/** Error for when the token audience is missing in the environment. */
var TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is gcp.';
var GCPMachineWorkflow = /** @class */ (function (_super) {
    __extends(GCPMachineWorkflow, _super);
    /**
     * Instantiate the machine workflow.
     */
    function GCPMachineWorkflow(cache) {
        return _super.call(this, cache) || this;
    }
    /**
     * Get the token from the environment.
     */
    GCPMachineWorkflow.prototype.getToken = function (credentials) {
        return __awaiter(this, void 0, Promise, function () {
            var tokenAudience;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenAudience = credentials === null || credentials === void 0 ? void 0 : credentials.mechanismProperties.TOKEN_RESOURCE;
                        if (!tokenAudience) {
                            throw new error_1.MongoGCPError(TOKEN_RESOURCE_MISSING_ERROR);
                        }
                        return [4 /*yield*/, getGcpTokenData(tokenAudience)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return GCPMachineWorkflow;
}(machine_workflow_1.MachineWorkflow));
exports.GCPMachineWorkflow = GCPMachineWorkflow;
/**
 * Hit the GCP endpoint to get the token data.
 */
function getGcpTokenData(tokenAudience) {
    return __awaiter(this, void 0, Promise, function () {
        var url, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = new URL(GCP_BASE_URL);
                    url.searchParams.append('audience', tokenAudience);
                    return [4 /*yield*/, utils_1.get(url, {
                            headers: GCP_HEADERS
                        })];
                case 1:
                    response = _a.sent();
                    if (response.status !== 200) {
                        throw new error_1.MongoGCPError("Status code " + response.status + " returned from the GCP endpoint. Response body: " + response.body);
                    }
                    return [2 /*return*/, { access_token: response.body }];
            }
        });
    });
}

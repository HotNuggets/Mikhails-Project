"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.MongoDBOIDC = exports.OIDC_WORKFLOWS = exports.OIDC_VERSION = void 0;
var error_1 = require("../../error");
var auth_provider_1 = require("./auth_provider");
var azure_machine_workflow_1 = require("./mongodb_oidc/azure_machine_workflow");
var gcp_machine_workflow_1 = require("./mongodb_oidc/gcp_machine_workflow");
var token_cache_1 = require("./mongodb_oidc/token_cache");
var token_machine_workflow_1 = require("./mongodb_oidc/token_machine_workflow");
/** Error when credentials are missing. */
var MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';
/** The current version of OIDC implementation. */
exports.OIDC_VERSION = 1;
/** @internal */
exports.OIDC_WORKFLOWS = new Map();
exports.OIDC_WORKFLOWS.set('test', function () { return new token_machine_workflow_1.TokenMachineWorkflow(new token_cache_1.TokenCache()); });
exports.OIDC_WORKFLOWS.set('azure', function () { return new azure_machine_workflow_1.AzureMachineWorkflow(new token_cache_1.TokenCache()); });
exports.OIDC_WORKFLOWS.set('gcp', function () { return new gcp_machine_workflow_1.GCPMachineWorkflow(new token_cache_1.TokenCache()); });
/**
 * OIDC auth provider.
 */
var MongoDBOIDC = /** @class */ (function (_super) {
    __extends(MongoDBOIDC, _super);
    /**
     * Instantiate the auth provider.
     */
    function MongoDBOIDC(workflow) {
        var _this = _super.call(this) || this;
        if (!workflow) {
            throw new error_1.MongoInvalidArgumentError('No workflow provided to the OIDC auth provider.');
        }
        _this.workflow = workflow;
        return _this;
    }
    MongoDBOIDC.prototype.auth = function (authContext) {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var connection, reauthenticating, response, credentials;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        connection = authContext.connection, reauthenticating = authContext.reauthenticating, response = authContext.response;
                        if ((_a = response === null || response === void 0 ? void 0 : response.speculativeAuthenticate) === null || _a === void 0 ? void 0 : _a.done) {
                            return [2 /*return*/];
                        }
                        credentials = getCredentials(authContext);
                        if (!reauthenticating) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.workflow.reauthenticate(connection, credentials)];
                    case 1:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.workflow.execute(connection, credentials, response)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MongoDBOIDC.prototype.prepare = function (handshakeDoc, authContext) {
        return __awaiter(this, void 0, Promise, function () {
            var connection, credentials, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        connection = authContext.connection;
                        credentials = getCredentials(authContext);
                        return [4 /*yield*/, this.workflow.speculativeAuth(connection, credentials)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, __assign(__assign({}, handshakeDoc), result)];
                }
            });
        });
    };
    return MongoDBOIDC;
}(auth_provider_1.AuthProvider));
exports.MongoDBOIDC = MongoDBOIDC;
/**
 * Get credentials from the auth context, throwing if they do not exist.
 */
function getCredentials(authContext) {
    var credentials = authContext.credentials;
    if (!credentials) {
        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);
    }
    return credentials;
}

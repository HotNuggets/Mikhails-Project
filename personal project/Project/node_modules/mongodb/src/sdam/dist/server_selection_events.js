"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;
var utils_1 = require(".././utils");
var constants_1 = require("../constants");
/**
 * The base export class for all logs published from server selection
 * @internal
 * @category Log Type
 */
var ServerSelectionEvent = /** @class */ (function () {
    /** @internal */
    function ServerSelectionEvent(selector, topologyDescription, operation) {
        this.selector = selector;
        this.operation = operation;
        this.topologyDescription = topologyDescription;
    }
    return ServerSelectionEvent;
}());
exports.ServerSelectionEvent = ServerSelectionEvent;
/**
 * An event published when server selection starts
 * @internal
 * @category Event
 */
var ServerSelectionStartedEvent = /** @class */ (function (_super) {
    __extends(ServerSelectionStartedEvent, _super);
    /** @internal */
    function ServerSelectionStartedEvent(selector, topologyDescription, operation) {
        var _this = _super.call(this, selector, topologyDescription, operation) || this;
        /** @internal */
        _this.name = constants_1.SERVER_SELECTION_STARTED;
        _this.message = 'Server selection started';
        return _this;
    }
    return ServerSelectionStartedEvent;
}(ServerSelectionEvent));
exports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;
/**
 * An event published when a server selection fails
 * @internal
 * @category Event
 */
var ServerSelectionFailedEvent = /** @class */ (function (_super) {
    __extends(ServerSelectionFailedEvent, _super);
    /** @internal */
    function ServerSelectionFailedEvent(selector, topologyDescription, error, operation) {
        var _this = _super.call(this, selector, topologyDescription, operation) || this;
        /** @internal */
        _this.name = constants_1.SERVER_SELECTION_FAILED;
        _this.message = 'Server selection failed';
        _this.failure = error;
        return _this;
    }
    return ServerSelectionFailedEvent;
}(ServerSelectionEvent));
exports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;
/**
 * An event published when server selection succeeds
 * @internal
 * @category Event
 */
var ServerSelectionSucceededEvent = /** @class */ (function (_super) {
    __extends(ServerSelectionSucceededEvent, _super);
    /** @internal */
    function ServerSelectionSucceededEvent(selector, topologyDescription, address, operation) {
        var _this = _super.call(this, selector, topologyDescription, operation) || this;
        /** @internal */
        _this.name = constants_1.SERVER_SELECTION_SUCCEEDED;
        _this.message = 'Server selection succeeded';
        var _a = utils_1.HostAddress.fromString(address).toHostPort(), host = _a.host, port = _a.port;
        _this.serverHost = host;
        _this.serverPort = port;
        return _this;
    }
    return ServerSelectionSucceededEvent;
}(ServerSelectionEvent));
exports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;
/**
 * An event published when server selection is waiting for a suitable server to become available
 * @internal
 * @category Event
 */
var WaitingForSuitableServerEvent = /** @class */ (function (_super) {
    __extends(WaitingForSuitableServerEvent, _super);
    /** @internal */
    function WaitingForSuitableServerEvent(selector, topologyDescription, remainingTimeMS, operation) {
        var _this = _super.call(this, selector, topologyDescription, operation) || this;
        /** @internal */
        _this.name = constants_1.WAITING_FOR_SUITABLE_SERVER;
        _this.message = 'Waiting for suitable server to become available';
        _this.remainingTimeMS = remainingTimeMS;
        return _this;
    }
    return WaitingForSuitableServerEvent;
}(ServerSelectionEvent));
exports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent;

"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MongoCR = void 0;

var crypto = require("crypto");

var error_1 = require("../../error");

var utils_1 = require("../../utils");

var auth_provider_1 = require("./auth_provider");

var MongoCR =
/*#__PURE__*/
function (_auth_provider_1$Auth) {
  _inherits(MongoCR, _auth_provider_1$Auth);

  function MongoCR() {
    _classCallCheck(this, MongoCR);

    return _possibleConstructorReturn(this, _getPrototypeOf(MongoCR).apply(this, arguments));
  }

  _createClass(MongoCR, [{
    key: "auth",
    value: function auth(authContext) {
      var connection, credentials, username, password, source, _ref, nonce, hashPassword, key, authenticateCommand;

      return regeneratorRuntime.async(function auth$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              connection = authContext.connection, credentials = authContext.credentials;

              if (credentials) {
                _context.next = 3;
                break;
              }

              throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');

            case 3:
              username = credentials.username, password = credentials.password, source = credentials.source;
              _context.next = 6;
              return regeneratorRuntime.awrap(connection.command((0, utils_1.ns)("".concat(source, ".$cmd")), {
                getnonce: 1
              }, undefined));

            case 6:
              _ref = _context.sent;
              nonce = _ref.nonce;
              hashPassword = crypto.createHash('md5').update("".concat(username, ":mongo:").concat(password), 'utf8').digest('hex'); // Final key

              key = crypto.createHash('md5').update("".concat(nonce).concat(username).concat(hashPassword), 'utf8').digest('hex');
              authenticateCommand = {
                authenticate: 1,
                user: username,
                nonce: nonce,
                key: key
              };
              _context.next = 13;
              return regeneratorRuntime.awrap(connection.command((0, utils_1.ns)("".concat(source, ".$cmd")), authenticateCommand, undefined));

            case 13:
            case "end":
              return _context.stop();
          }
        }
      });
    }
  }]);

  return MongoCR;
}(auth_provider_1.AuthProvider);

exports.MongoCR = MongoCR;
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.parseUtf8ValidationOption = exports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.toUTF8 = exports.getBigInt64LE = exports.getFloat64LE = exports.getInt32LE = exports.parseToElementsToArray = void 0;
/* eslint-disable no-restricted-imports */
var bson_1 = require("bson");
var bson_2 = require("bson");
__createBinding(exports, bson_2, "Binary");
__createBinding(exports, bson_2, "BSON");
__createBinding(exports, bson_2, "BSONError");
__createBinding(exports, bson_2, "BSONRegExp");
__createBinding(exports, bson_2, "BSONSymbol");
__createBinding(exports, bson_2, "BSONType");
__createBinding(exports, bson_2, "calculateObjectSize");
__createBinding(exports, bson_2, "Code");
__createBinding(exports, bson_2, "DBRef");
__createBinding(exports, bson_2, "Decimal128");
__createBinding(exports, bson_2, "deserialize");
__createBinding(exports, bson_2, "type");
__createBinding(exports, bson_2, "Double");
__createBinding(exports, bson_2, "EJSON");
__createBinding(exports, bson_2, "Int32");
__createBinding(exports, bson_2, "Long");
__createBinding(exports, bson_2, "MaxKey");
__createBinding(exports, bson_2, "MinKey");
__createBinding(exports, bson_2, "ObjectId");
__createBinding(exports, bson_2, "type");
__createBinding(exports, bson_2, "serialize");
__createBinding(exports, bson_2, "Timestamp");
__createBinding(exports, bson_2, "UUID");
function parseToElementsToArray(bytes, offset) {
    var res = bson_1.BSON.onDemand.parseToElements(bytes, offset);
    return Array.isArray(res) ? res : __spreadArrays(res);
}
exports.parseToElementsToArray = parseToElementsToArray;
exports.getInt32LE = bson_1.BSON.onDemand.NumberUtils.getInt32LE;
exports.getFloat64LE = bson_1.BSON.onDemand.NumberUtils.getFloat64LE;
exports.getBigInt64LE = bson_1.BSON.onDemand.NumberUtils.getBigInt64LE;
exports.toUTF8 = bson_1.BSON.onDemand.ByteUtils.toUTF8;
function pluckBSONSerializeOptions(options) {
    var fieldsAsRaw = options.fieldsAsRaw, useBigInt64 = options.useBigInt64, promoteValues = options.promoteValues, promoteBuffers = options.promoteBuffers, promoteLongs = options.promoteLongs, serializeFunctions = options.serializeFunctions, ignoreUndefined = options.ignoreUndefined, bsonRegExp = options.bsonRegExp, raw = options.raw, enableUtf8Validation = options.enableUtf8Validation;
    return {
        fieldsAsRaw: fieldsAsRaw,
        useBigInt64: useBigInt64,
        promoteValues: promoteValues,
        promoteBuffers: promoteBuffers,
        promoteLongs: promoteLongs,
        serializeFunctions: serializeFunctions,
        ignoreUndefined: ignoreUndefined,
        bsonRegExp: bsonRegExp,
        raw: raw,
        enableUtf8Validation: enableUtf8Validation
    };
}
exports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;
/**
 * Merge the given BSONSerializeOptions, preferring options over the parent's options, and
 * substituting defaults for values not set.
 *
 * @internal
 */
function resolveBSONOptions(options, parent) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
    var parentOptions = parent === null || parent === void 0 ? void 0 : parent.bsonOptions;
    return {
        raw: (_b = (_a = options === null || options === void 0 ? void 0 : options.raw) !== null && _a !== void 0 ? _a : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.raw) !== null && _b !== void 0 ? _b : false,
        useBigInt64: (_d = (_c = options === null || options === void 0 ? void 0 : options.useBigInt64) !== null && _c !== void 0 ? _c : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.useBigInt64) !== null && _d !== void 0 ? _d : false,
        promoteLongs: (_f = (_e = options === null || options === void 0 ? void 0 : options.promoteLongs) !== null && _e !== void 0 ? _e : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteLongs) !== null && _f !== void 0 ? _f : true,
        promoteValues: (_h = (_g = options === null || options === void 0 ? void 0 : options.promoteValues) !== null && _g !== void 0 ? _g : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteValues) !== null && _h !== void 0 ? _h : true,
        promoteBuffers: (_k = (_j = options === null || options === void 0 ? void 0 : options.promoteBuffers) !== null && _j !== void 0 ? _j : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteBuffers) !== null && _k !== void 0 ? _k : false,
        ignoreUndefined: (_m = (_l = options === null || options === void 0 ? void 0 : options.ignoreUndefined) !== null && _l !== void 0 ? _l : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.ignoreUndefined) !== null && _m !== void 0 ? _m : false,
        bsonRegExp: (_p = (_o = options === null || options === void 0 ? void 0 : options.bsonRegExp) !== null && _o !== void 0 ? _o : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.bsonRegExp) !== null && _p !== void 0 ? _p : false,
        serializeFunctions: (_r = (_q = options === null || options === void 0 ? void 0 : options.serializeFunctions) !== null && _q !== void 0 ? _q : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.serializeFunctions) !== null && _r !== void 0 ? _r : false,
        fieldsAsRaw: (_t = (_s = options === null || options === void 0 ? void 0 : options.fieldsAsRaw) !== null && _s !== void 0 ? _s : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.fieldsAsRaw) !== null && _t !== void 0 ? _t : {},
        enableUtf8Validation: (_v = (_u = options === null || options === void 0 ? void 0 : options.enableUtf8Validation) !== null && _u !== void 0 ? _u : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.enableUtf8Validation) !== null && _v !== void 0 ? _v : true
    };
}
exports.resolveBSONOptions = resolveBSONOptions;
/** @internal */
function parseUtf8ValidationOption(options) {
    var enableUtf8Validation = options === null || options === void 0 ? void 0 : options.enableUtf8Validation;
    if (enableUtf8Validation === false) {
        return { utf8: false };
    }
    return { utf8: { writeErrors: false } };
}
exports.parseUtf8ValidationOption = parseUtf8ValidationOption;

'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function lookupLocalFields(cur, path, val) {
  if (cur == null) {
    return cur;
  }

  if (cur._doc != null) {
    cur = cur._doc;
  }

  if (arguments.length >= 3) {
    if (_typeof(cur) !== 'object') {
      return void 0;
    }

    if (val === void 0) {
      return void 0;
    }

    if (cur instanceof Map) {
      cur.set(path, val);
    } else {
      cur[path] = val;
    }

    return val;
  } // Support populating paths under maps using `map.$*.subpath`


  if (path === '$*') {
    return cur instanceof Map ? Array.from(cur.values()) : Object.keys(cur).map(function (key) {
      return cur[key];
    });
  }

  if (cur instanceof Map) {
    return cur.get(path);
  }

  return cur[path];
};
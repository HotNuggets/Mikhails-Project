"use strict";

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthProvider = exports.AuthContext = void 0;

var error_1 = require("../../error");
/**
 * Context used during authentication
 * @internal
 */


var AuthContext = function AuthContext(connection, credentials, options) {
  _classCallCheck(this, AuthContext);

  /** If the context is for reauthentication. */
  this.reauthenticating = false;
  this.connection = connection;
  this.credentials = credentials;
  this.options = options;
};

exports.AuthContext = AuthContext;
/**
 * Provider used during authentication.
 * @internal
 */

var AuthProvider =
/*#__PURE__*/
function () {
  function AuthProvider() {
    _classCallCheck(this, AuthProvider);
  }

  _createClass(AuthProvider, [{
    key: "prepare",

    /**
     * Prepare the handshake document before the initial handshake.
     *
     * @param handshakeDoc - The document used for the initial handshake on a connection
     * @param authContext - Context for authentication flow
     */
    value: function prepare(handshakeDoc, _authContext) {
      return regeneratorRuntime.async(function prepare$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", handshakeDoc);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      });
    }
    /**
     * Reauthenticate.
     * @param context - The shared auth context.
     */

  }, {
    key: "reauth",
    value: function reauth(context) {
      return regeneratorRuntime.async(function reauth$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!context.reauthenticating) {
                _context2.next = 2;
                break;
              }

              throw new error_1.MongoRuntimeError('Reauthentication already in progress.');

            case 2:
              _context2.prev = 2;
              context.reauthenticating = true;
              _context2.next = 6;
              return regeneratorRuntime.awrap(this.auth(context));

            case 6:
              _context2.prev = 6;
              context.reauthenticating = false;
              return _context2.finish(6);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[2,, 6, 9]]);
    }
  }]);

  return AuthProvider;
}();

exports.AuthProvider = AuthProvider;
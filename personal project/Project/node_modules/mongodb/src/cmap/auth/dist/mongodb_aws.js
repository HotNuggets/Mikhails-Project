"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.MongoDBAWS = void 0;
var BSON = require("../../bson");
var deps_1 = require("../../deps");
var error_1 = require("../../error");
var utils_1 = require("../../utils");
var auth_provider_1 = require("./auth_provider");
var aws_temporary_credentials_1 = require("./aws_temporary_credentials");
var mongo_credentials_1 = require("./mongo_credentials");
var providers_1 = require("./providers");
var ASCII_N = 110;
var bsonOptions = {
    useBigInt64: false,
    promoteLongs: true,
    promoteValues: true,
    promoteBuffers: false,
    bsonRegExp: false
};
var MongoDBAWS = /** @class */ (function (_super) {
    __extends(MongoDBAWS, _super);
    function MongoDBAWS() {
        var _this = _super.call(this) || this;
        _this.credentialFetcher = aws_temporary_credentials_1.AWSTemporaryCredentialProvider.isAWSSDKInstalled
            ? new aws_temporary_credentials_1.AWSSDKCredentialProvider()
            : new aws_temporary_credentials_1.LegacyAWSTemporaryCredentialProvider();
        return _this;
    }
    MongoDBAWS.prototype.auth = function (authContext) {
        return __awaiter(this, void 0, Promise, function () {
            var connection, sign, _a, credentials, accessKeyId, secretAccessKey, sessionToken, awsCredentials, db, nonce, saslStart, saslStartResponse, serverResponse, host, serverNonce, body, options, payload, saslContinue;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        connection = authContext.connection;
                        if (!authContext.credentials) {
                            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');
                        }
                        if ('kModuleError' in deps_1.aws4) {
                            throw deps_1.aws4['kModuleError'];
                        }
                        sign = deps_1.aws4.sign;
                        if (utils_1.maxWireVersion(connection) < 9) {
                            throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');
                        }
                        if (!!authContext.credentials.username) return [3 /*break*/, 2];
                        _a = authContext;
                        return [4 /*yield*/, makeTempCredentials(authContext.credentials, this.credentialFetcher)];
                    case 1:
                        _a.credentials = _b.sent();
                        _b.label = 2;
                    case 2:
                        credentials = authContext.credentials;
                        accessKeyId = credentials.username;
                        secretAccessKey = credentials.password;
                        sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;
                        awsCredentials = accessKeyId && secretAccessKey && sessionToken
                            ? { accessKeyId: accessKeyId, secretAccessKey: secretAccessKey, sessionToken: sessionToken }
                            : accessKeyId && secretAccessKey
                                ? { accessKeyId: accessKeyId, secretAccessKey: secretAccessKey }
                                : undefined;
                        db = credentials.source;
                        return [4 /*yield*/, utils_1.randomBytes(32)];
                    case 3:
                        nonce = _b.sent();
                        saslStart = {
                            saslStart: 1,
                            mechanism: 'MONGODB-AWS',
                            payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)
                        };
                        return [4 /*yield*/, connection.command(utils_1.ns(db + ".$cmd"), saslStart, undefined)];
                    case 4:
                        saslStartResponse = _b.sent();
                        serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);
                        host = serverResponse.h;
                        serverNonce = serverResponse.s.buffer;
                        if (serverNonce.length !== 64) {
                            // TODO(NODE-3483)
                            throw new error_1.MongoRuntimeError("Invalid server nonce length " + serverNonce.length + ", expected 64");
                        }
                        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {
                            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes
                            // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11
                            // TODO(NODE-3483)
                            throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');
                        }
                        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {
                            // TODO(NODE-3483)
                            throw new error_1.MongoRuntimeError("Server returned an invalid host: \"" + host + "\"");
                        }
                        body = 'Action=GetCallerIdentity&Version=2011-06-15';
                        options = sign({
                            method: 'POST',
                            host: host,
                            region: deriveRegion(serverResponse.h),
                            service: 'sts',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Content-Length': body.length,
                                'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),
                                'X-MongoDB-GS2-CB-Flag': 'n'
                            },
                            path: '/',
                            body: body
                        }, awsCredentials);
                        payload = {
                            a: options.headers.Authorization,
                            d: options.headers['X-Amz-Date']
                        };
                        if (sessionToken) {
                            payload.t = sessionToken;
                        }
                        saslContinue = {
                            saslContinue: 1,
                            conversationId: 1,
                            payload: BSON.serialize(payload, bsonOptions)
                        };
                        return [4 /*yield*/, connection.command(utils_1.ns(db + ".$cmd"), saslContinue, undefined)];
                    case 5:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return MongoDBAWS;
}(auth_provider_1.AuthProvider));
exports.MongoDBAWS = MongoDBAWS;
function makeTempCredentials(credentials, awsCredentialFetcher) {
    return __awaiter(this, void 0, Promise, function () {
        function makeMongoCredentialsFromAWSTemp(creds) {
            // The AWS session token (creds.Token) may or may not be set.
            if (!creds.AccessKeyId || !creds.SecretAccessKey) {
                throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');
            }
            return new mongo_credentials_1.MongoCredentials({
                username: creds.AccessKeyId,
                password: creds.SecretAccessKey,
                source: credentials.source,
                mechanism: providers_1.AuthMechanism.MONGODB_AWS,
                mechanismProperties: {
                    AWS_SESSION_TOKEN: creds.Token
                }
            });
        }
        var temporaryCredentials;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, awsCredentialFetcher.getCredentials()];
                case 1:
                    temporaryCredentials = _a.sent();
                    return [2 /*return*/, makeMongoCredentialsFromAWSTemp(temporaryCredentials)];
            }
        });
    });
}
function deriveRegion(host) {
    var parts = host.split('.');
    if (parts.length === 1 || parts[1] === 'amazonaws') {
        return 'us-east-1';
    }
    return parts[1];
}

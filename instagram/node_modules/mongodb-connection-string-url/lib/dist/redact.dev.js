"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);

  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }

  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.redactConnectionString = exports.redactValidConnectionString = void 0;

var index_1 = __importStar(require("./index"));

function redactValidConnectionString(inputUrl, options) {
  var _a, _b;

  var url = inputUrl.clone();
  var replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '_credentials_';
  var redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;

  if ((url.username || url.password) && redactUsernames) {
    url.username = replacementString;
    url.password = '';
  } else if (url.password) {
    url.password = replacementString;
  }

  if (url.searchParams.has('authMechanismProperties')) {
    var props = new index_1.CommaAndColonSeparatedRecord(url.searchParams.get('authMechanismProperties'));

    if (props.get('AWS_SESSION_TOKEN')) {
      props.set('AWS_SESSION_TOKEN', replacementString);
      url.searchParams.set('authMechanismProperties', props.toString());
    }
  }

  if (url.searchParams.has('tlsCertificateKeyFilePassword')) {
    url.searchParams.set('tlsCertificateKeyFilePassword', replacementString);
  }

  if (url.searchParams.has('proxyUsername') && redactUsernames) {
    url.searchParams.set('proxyUsername', replacementString);
  }

  if (url.searchParams.has('proxyPassword')) {
    url.searchParams.set('proxyPassword', replacementString);
  }

  return url;
}

exports.redactValidConnectionString = redactValidConnectionString;

function redactConnectionString(uri, options) {
  var _a, _b;

  var replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '<credentials>';
  var redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;
  var parsed;

  try {
    parsed = new index_1["default"](uri);
  } catch (_c) {}

  if (parsed) {
    options = _objectSpread({}, options, {
      replacementString: '___credentials___'
    });
    return parsed.redact(options).toString().replace(/___credentials___/g, replacementString);
  }

  var R = replacementString;
  var replacements = [function (uri) {
    return uri.replace(redactUsernames ? /(\/\/)(.*)(@)/g : /(\/\/[^@]*:)(.*)(@)/g, "$1".concat(R, "$3"));
  }, function (uri) {
    return uri.replace(/(AWS_SESSION_TOKEN(:|%3A))([^,&]+)/gi, "$1".concat(R));
  }, function (uri) {
    return uri.replace(/(tlsCertificateKeyFilePassword=)([^&]+)/gi, "$1".concat(R));
  }, function (uri) {
    return redactUsernames ? uri.replace(/(proxyUsername=)([^&]+)/gi, "$1".concat(R)) : uri;
  }, function (uri) {
    return uri.replace(/(proxyPassword=)([^&]+)/gi, "$1".concat(R));
  }];

  for (var _i = 0, _replacements = replacements; _i < _replacements.length; _i++) {
    var replacer = _replacements[_i];
    uri = replacer(uri);
  }

  return uri;
}

exports.redactConnectionString = redactConnectionString;
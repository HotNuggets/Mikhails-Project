'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = applyEmbeddedDiscriminators;

function applyEmbeddedDiscriminators(schema) {
  var seen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new WeakSet();
  var overwriteExisting = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (seen.has(schema)) {
    return;
  }

  seen.add(schema);

  for (var _i = 0, _Object$keys = Object.keys(schema.paths); _i < _Object$keys.length; _i++) {
    var path = _Object$keys[_i];
    var schemaType = schema.paths[path];

    if (!schemaType.schema) {
      continue;
    }

    applyEmbeddedDiscriminators(schemaType.schema, seen);

    if (!schemaType.schema._applyDiscriminators) {
      continue;
    }

    if (schemaType._appliedDiscriminators && !overwriteExisting) {
      continue;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = schemaType.schema._applyDiscriminators.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var discriminatorKey = _step.value;

        var _schemaType$schema$_a = schemaType.schema._applyDiscriminators.get(discriminatorKey),
            discriminatorSchema = _schemaType$schema$_a.schema,
            options = _schemaType$schema$_a.options;

        applyEmbeddedDiscriminators(discriminatorSchema, seen);
        schemaType.discriminator(discriminatorKey, discriminatorSchema, overwriteExisting ? _objectSpread({}, options, {
          overwriteExisting: true
        }) : options);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    schemaType._appliedDiscriminators = true;
  }
}
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.FindAndModifyOperation = exports.ReturnDocument = void 0;
var error_1 = require("../error");
var read_preference_1 = require("../read_preference");
var sort_1 = require("../sort");
var utils_1 = require("../utils");
var command_1 = require("./command");
var operation_1 = require("./operation");
/** @public */
exports.ReturnDocument = Object.freeze({
    BEFORE: 'before',
    AFTER: 'after'
});
function configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {
    cmdBase["new"] = options.returnDocument === exports.ReturnDocument.AFTER;
    cmdBase.upsert = options.upsert === true;
    if (options.bypassDocumentValidation === true) {
        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;
    }
    return cmdBase;
}
/** @internal */
var FindAndModifyOperation = /** @class */ (function (_super) {
    __extends(FindAndModifyOperation, _super);
    function FindAndModifyOperation(collection, query, options) {
        var _a;
        var _this = _super.call(this, collection, options) || this;
        _this.options = options !== null && options !== void 0 ? options : {};
        _this.cmdBase = {
            remove: false,
            "new": false,
            upsert: false
        };
        (_a = options.includeResultMetadata) !== null && _a !== void 0 ? _a : ;
        false;
        var sort = sort_1.formatSort(options.sort);
        if (sort) {
            _this.cmdBase.sort = sort;
        }
        if (options.projection) {
            _this.cmdBase.fields = options.projection;
        }
        if (options.maxTimeMS) {
            _this.cmdBase.maxTimeMS = options.maxTimeMS;
        }
        // Decorate the findAndModify command with the write Concern
        if (options.writeConcern) {
            _this.cmdBase.writeConcern = options.writeConcern;
        }
        if (options.let) {
            _this.cmdBase.let = options.let;
        }
        // we check for undefined specifically here to allow falsy values
        // eslint-disable-next-line no-restricted-syntax
        if (options.comment !== undefined) {
            _this.cmdBase.comment = options.comment;
        }
        // force primary read preference
        _this.readPreference = read_preference_1.ReadPreference.primary;
        _this.collection = collection;
        _this.query = query;
        return _this;
    }
    Object.defineProperty(FindAndModifyOperation.prototype, "commandName", {
        get: function () {
            return 'findAndModify';
        },
        enumerable: false,
        configurable: true
    });
    FindAndModifyOperation.prototype.execute = function (server, session) {
        var _a, _b;
        return __awaiter(this, void 0, Promise, function () {
            var coll, query, options, cmd, unacknowledgedWrite, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        coll = this.collection;
                        query = this.query;
                        options = __assign(__assign({}, this.options), this.bsonOptions);
                        cmd = __assign({ findAndModify: coll.collectionName, query: query }, this.cmdBase);
                        utils_1.decorateWithCollation(cmd, coll, options);
                        if (options.hint) {
                            unacknowledgedWrite = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) === 0;
                            if (unacknowledgedWrite || utils_1.maxWireVersion(server) < 8) {
                                throw new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands');
                            }
                            cmd.hint = options.hint;
                        }
                        return [4 /*yield*/, _super.prototype.executeCommand.call(this, server, session, cmd)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, options.includeResultMetadata ? result : ((_b = result.value) !== null && _b !== void 0 ? _b : null)];
                }
            });
        });
    };
    return FindAndModifyOperation;
}(command_1.CommandOperation));
exports.FindAndModifyOperation = FindAndModifyOperation;
/** @internal */
var FindOneAndDeleteOperation = /** @class */ (function (_super) {
    __extends(FindOneAndDeleteOperation, _super);
    function FindOneAndDeleteOperation(collection, filter, options) {
        var _this = this;
        // Basic validation
        if (filter == null || typeof filter !== 'object') {
            throw new error_1.MongoInvalidArgumentError('Argument "filter" must be an object');
        }
        _this = _super.call(this, collection, filter, options) || this;
        _this.cmdBase.remove = true;
        return _this;
    }
    return FindOneAndDeleteOperation;
}(FindAndModifyOperation));
exports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;
/** @internal */
var FindOneAndReplaceOperation = /** @class */ (function (_super) {
    __extends(FindOneAndReplaceOperation, _super);
    function FindOneAndReplaceOperation(collection, filter, replacement, options) {
        var _this = this;
        if (filter == null || typeof filter !== 'object') {
            throw new error_1.MongoInvalidArgumentError('Argument "filter" must be an object');
        }
        if (replacement == null || typeof replacement !== 'object') {
            throw new error_1.MongoInvalidArgumentError('Argument "replacement" must be an object');
        }
        if (utils_1.hasAtomicOperators(replacement)) {
            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');
        }
        _this = _super.call(this, collection, filter, options) || this;
        _this.cmdBase.update = replacement;
        configureFindAndModifyCmdBaseUpdateOpts(_this.cmdBase, options);
        return _this;
    }
    return FindOneAndReplaceOperation;
}(FindAndModifyOperation));
exports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;
/** @internal */
var FindOneAndUpdateOperation = /** @class */ (function (_super) {
    __extends(FindOneAndUpdateOperation, _super);
    function FindOneAndUpdateOperation(collection, filter, update, options) {
        var _this = this;
        if (filter == null || typeof filter !== 'object') {
            throw new error_1.MongoInvalidArgumentError('Argument "filter" must be an object');
        }
        if (update == null || typeof update !== 'object') {
            throw new error_1.MongoInvalidArgumentError('Argument "update" must be an object');
        }
        if (!utils_1.hasAtomicOperators(update)) {
            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');
        }
        _this = _super.call(this, collection, filter, options) || this;
        _this.cmdBase.update = update;
        configureFindAndModifyCmdBaseUpdateOpts(_this.cmdBase, options);
        if (options.arrayFilters) {
            _this.cmdBase.arrayFilters = options.arrayFilters;
        }
        return _this;
    }
    return FindOneAndUpdateOperation;
}(FindAndModifyOperation));
exports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;
operation_1.defineAspects(FindAndModifyOperation, [
    operation_1.Aspect.WRITE_OPERATION,
    operation_1.Aspect.RETRYABLE,
    operation_1.Aspect.EXPLAINABLE
]);

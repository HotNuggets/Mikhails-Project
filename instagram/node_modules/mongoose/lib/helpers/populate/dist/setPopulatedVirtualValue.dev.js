'use strict';
/**
 * Set a populated virtual value on a document's `$$populatedVirtuals` value
 *
 * @param {*} populatedVirtuals A document's `$$populatedVirtuals`
 * @param {*} name The virtual name
 * @param {*} v The result of the populate query
 * @param {*} options The populate options. This function handles `justOne` and `count` options.
 * @returns {Array<Document>|Document|Object|Array<Object>} the populated virtual value that was set
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function setPopulatedVirtualValue(populatedVirtuals, name, v, options) {
  if (options.justOne || options.count) {
    populatedVirtuals[name] = Array.isArray(v) ? v[0] : v;

    if (_typeof(populatedVirtuals[name]) !== 'object') {
      populatedVirtuals[name] = options.count ? v : null;
    }
  } else {
    populatedVirtuals[name] = Array.isArray(v) ? v : v == null ? [] : [v];
    populatedVirtuals[name] = populatedVirtuals[name].filter(function (doc) {
      return doc && _typeof(doc) === 'object';
    });
  }

  return populatedVirtuals[name];
};
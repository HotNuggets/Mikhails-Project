"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridFSBucket = void 0;

var error_1 = require("../error");

var mongo_types_1 = require("../mongo_types");

var write_concern_1 = require("../write_concern");

var download_1 = require("./download");

var upload_1 = require("./upload");

var DEFAULT_GRIDFS_BUCKET_OPTIONS = {
  bucketName: 'fs',
  chunkSizeBytes: 255 * 1024
};
/**
 * Constructor for a streaming GridFS interface
 * @public
 */

var GridFSBucket =
/*#__PURE__*/
function (_mongo_types_1$TypedE) {
  _inherits(GridFSBucket, _mongo_types_1$TypedE);

  function GridFSBucket(db, options) {
    var _this;

    _classCallCheck(this, GridFSBucket);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GridFSBucket).call(this));

    _this.setMaxListeners(0);

    var privateOptions = _objectSpread({}, DEFAULT_GRIDFS_BUCKET_OPTIONS, {}, options, {
      writeConcern: write_concern_1.WriteConcern.fromOptions(options)
    });

    _this.s = {
      db: db,
      options: privateOptions,
      _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),
      _filesCollection: db.collection(privateOptions.bucketName + '.files'),
      checkedIndexes: false,
      calledOpenUploadStream: false
    };
    return _this;
  }
  /**
   * Returns a writable stream (GridFSBucketWriteStream) for writing
   * buffers to GridFS. The stream's 'id' property contains the resulting
   * file's id.
   *
   * @param filename - The value of the 'filename' key in the files doc
   * @param options - Optional settings.
   */


  _createClass(GridFSBucket, [{
    key: "openUploadStream",
    value: function openUploadStream(filename, options) {
      return new upload_1.GridFSBucketWriteStream(this, filename, options);
    }
    /**
     * Returns a writable stream (GridFSBucketWriteStream) for writing
     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting
     * file's id.
     */

  }, {
    key: "openUploadStreamWithId",
    value: function openUploadStreamWithId(id, filename, options) {
      return new upload_1.GridFSBucketWriteStream(this, filename, _objectSpread({}, options, {
        id: id
      }));
    }
    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */

  }, {
    key: "openDownloadStream",
    value: function openDownloadStream(id, options) {
      return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {
        _id: id
      }, options);
    }
    /**
     * Deletes a file with the given id
     *
     * @param id - The id of the file doc
     */

  }, {
    key: "delete",
    value: function _delete(id) {
      var _ref, deletedCount;

      return regeneratorRuntime.async(function _delete$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(this.s._filesCollection.deleteOne({
                _id: id
              }));

            case 2:
              _ref = _context.sent;
              deletedCount = _ref.deletedCount;
              _context.next = 6;
              return regeneratorRuntime.awrap(this.s._chunksCollection.deleteMany({
                files_id: id
              }));

            case 6:
              if (!(deletedCount === 0)) {
                _context.next = 8;
                break;
              }

              throw new error_1.MongoRuntimeError("File not found for id ".concat(id));

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
    /** Convenience wrapper around find on the files collection */

  }, {
    key: "find",
    value: function find() {
      var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.s._filesCollection.find(filter, options);
    }
    /**
     * Returns a readable stream (GridFSBucketReadStream) for streaming the
     * file with the given name from GridFS. If there are multiple files with
     * the same name, this will stream the most recent file with the given name
     * (as determined by the `uploadDate` field). You can set the `revision`
     * option to change this behavior.
     */

  }, {
    key: "openDownloadStreamByName",
    value: function openDownloadStreamByName(filename, options) {
      var sort = {
        uploadDate: -1
      };
      var skip = undefined;

      if (options && options.revision != null) {
        if (options.revision >= 0) {
          sort = {
            uploadDate: 1
          };
          skip = options.revision;
        } else {
          skip = -options.revision - 1;
        }
      }

      return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {
        filename: filename
      }, _objectSpread({}, options, {
        sort: sort,
        skip: skip
      }));
    }
    /**
     * Renames the file with the given _id to the given string
     *
     * @param id - the id of the file to rename
     * @param filename - new name for the file
     */

  }, {
    key: "rename",
    value: function rename(id, filename) {
      var filter, update, _ref2, matchedCount;

      return regeneratorRuntime.async(function rename$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              filter = {
                _id: id
              };
              update = {
                $set: {
                  filename: filename
                }
              };
              _context2.next = 4;
              return regeneratorRuntime.awrap(this.s._filesCollection.updateOne(filter, update));

            case 4:
              _ref2 = _context2.sent;
              matchedCount = _ref2.matchedCount;

              if (!(matchedCount === 0)) {
                _context2.next = 8;
                break;
              }

              throw new error_1.MongoRuntimeError("File with id ".concat(id, " not found"));

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
    /** Removes this bucket's files collection, followed by its chunks collection. */

  }, {
    key: "drop",
    value: function drop() {
      return regeneratorRuntime.async(function drop$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return regeneratorRuntime.awrap(this.s._filesCollection.drop());

            case 2:
              _context3.next = 4;
              return regeneratorRuntime.awrap(this.s._chunksCollection.drop());

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }]);

  return GridFSBucket;
}(mongo_types_1.TypedEventEmitter);

exports.GridFSBucket = GridFSBucket;
/**
 * When the first call to openUploadStream is made, the upload stream will
 * check to see if it needs to create the proper indexes on the chunks and
 * files collections. This event is fired either when 1) it determines that
 * no index creation is necessary, 2) when it successfully creates the
 * necessary indexes.
 * @event
 */

GridFSBucket.INDEX = 'index';
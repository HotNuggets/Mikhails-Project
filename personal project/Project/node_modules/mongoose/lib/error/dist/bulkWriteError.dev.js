/*!
 * Module dependencies.
 */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MongooseError = require('./');
/**
 * If `bulkWrite()` or `insertMany()` has validation errors, but
 * all valid operations succeed, and 'throwOnValidationError' is true,
 * Mongoose will throw this error.
 *
 * @api private
 */


var MongooseBulkWriteError =
/*#__PURE__*/
function (_MongooseError) {
  _inherits(MongooseBulkWriteError, _MongooseError);

  function MongooseBulkWriteError(validationErrors, results, rawResult, operation) {
    var _this;

    _classCallCheck(this, MongooseBulkWriteError);

    var preview = validationErrors.map(function (e) {
      return e.message;
    }).join(', ');

    if (preview.length > 200) {
      preview = preview.slice(0, 200) + '...';
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MongooseBulkWriteError).call(this, "".concat(operation, " failed with ").concat(validationErrors.length, " Mongoose validation errors: ").concat(preview)));
    _this.validationErrors = validationErrors;
    _this.results = results;
    _this.rawResult = rawResult;
    _this.operation = operation;
    return _this;
  }

  return MongooseBulkWriteError;
}(MongooseError);

Object.defineProperty(MongooseBulkWriteError.prototype, 'name', {
  value: 'MongooseBulkWriteError'
});
/*!
 * exports
 */

module.exports = MongooseBulkWriteError;
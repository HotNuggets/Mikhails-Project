'use strict';
/*!
 * ignore
 */

module.exports = function cleanModifiedSubpaths(doc, path, options) {
  options = options || {};
  var skipDocArrays = options.skipDocArrays;
  var deleted = 0;

  if (!doc) {
    return deleted;
  }

  for (var _i = 0, _Object$keys = Object.keys(doc.$__.activePaths.getStatePaths('modify')); _i < _Object$keys.length; _i++) {
    var modifiedPath = _Object$keys[_i];

    if (skipDocArrays) {
      var schemaType = doc.$__schema.path(modifiedPath);

      if (schemaType && schemaType.$isMongooseDocumentArray) {
        continue;
      }
    }

    if (modifiedPath.startsWith(path + '.')) {
      doc.$__.activePaths.clearPath(modifiedPath);
      ++deleted;

      if (doc.$isSubdocument) {
        cleanParent(doc, modifiedPath);
      }
    }
  }

  return deleted;
};

function cleanParent(doc, path) {
  var seen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();

  if (seen.has(doc)) {
    throw new Error('Infinite subdocument loop: subdoc with _id ' + doc._id + ' is a parent of itself');
  }

  var parent = doc.$parent();
  var newPath = doc.$__pathRelativeToParent(void 0, false) + '.' + path;
  parent.$__.activePaths.clearPath(newPath);

  if (parent.$isSubdocument) {
    cleanParent(parent, newPath, seen);
  }
}
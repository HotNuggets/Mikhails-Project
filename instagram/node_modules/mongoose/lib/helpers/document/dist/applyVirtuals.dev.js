'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var mpath = require('mpath');

module.exports = applyVirtuals;
/**
 * Apply a given schema's virtuals to a given POJO
 *
 * @param {Schema} schema
 * @param {Object} obj
 * @param {Array<string>} [virtuals] optional whitelist of virtuals to apply
 * @returns
 */

function applyVirtuals(schema, obj, virtuals) {
  if (obj == null) {
    return obj;
  }

  var virtualsForChildren = virtuals;
  var toApply = null;

  if (Array.isArray(virtuals)) {
    virtualsForChildren = [];
    toApply = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = virtuals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var virtual = _step.value;

        if (virtual.length === 1) {
          toApply.push(virtual[0]);
        } else {
          virtualsForChildren.push(virtual);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  applyVirtualsToChildren(schema, obj, virtualsForChildren);
  return applyVirtualsToDoc(schema, obj, toApply);
}
/**
 * Apply virtuals to any subdocuments
 *
 * @param {Schema} schema subdocument schema
 * @param {Object} res subdocument
 * @param {Array<String>} [virtuals] optional whitelist of virtuals to apply
 */


function applyVirtualsToChildren(schema, res, virtuals) {
  var attachedVirtuals = false;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = schema.childSchemas[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var childSchema = _step2.value;
      var _path = childSchema.model.path;
      var _schema = childSchema.schema;

      if (!_path) {
        continue;
      }

      var _obj = mpath.get(_path, res);

      if (_obj == null || Array.isArray(_obj) && _obj.flat(Infinity).length === 0) {
        continue;
      }

      var virtualsForChild = null;

      if (Array.isArray(virtuals)) {
        virtualsForChild = [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = virtuals[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var virtual = _step3.value;

            if (virtual[0] == _path) {
              virtualsForChild.push(virtual.slice(1));
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        if (virtualsForChild.length === 0) {
          continue;
        }
      }

      applyVirtuals(_schema, _obj, virtualsForChild);
      attachedVirtuals = true;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  if (virtuals && virtuals.length && !attachedVirtuals) {
    applyVirtualsToDoc(schema, res, virtuals);
  }
}
/**
 * Apply virtuals to a given document. Does not apply virtuals to subdocuments: use `applyVirtualsToChildren` instead
 *
 * @param {Schema} schema
 * @param {Object} doc
 * @param {Array<String>} [virtuals] optional whitelist of virtuals to apply
 * @returns
 */


function applyVirtualsToDoc(schema, obj, virtuals) {
  if (obj == null || _typeof(obj) !== 'object') {
    return;
  }

  if (Array.isArray(obj)) {
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = obj[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var el = _step4.value;
        applyVirtualsToDoc(schema, el, virtuals);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
          _iterator4["return"]();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return;
  }

  if (schema.discriminators && Object.keys(schema.discriminators).length > 0) {
    for (var _i = 0, _Object$keys = Object.keys(schema.discriminators); _i < _Object$keys.length; _i++) {
      var discriminatorKey = _Object$keys[_i];
      var discriminator = schema.discriminators[discriminatorKey];
      var key = discriminator.discriminatorMapping.key;
      var value = discriminator.discriminatorMapping.value;

      if (obj[key] == value) {
        schema = discriminator;
        break;
      }
    }
  }

  if (virtuals == null) {
    virtuals = Object.keys(schema.virtuals);
  }

  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = virtuals[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var virtual = _step5.value;

      if (schema.virtuals[virtual] == null) {
        continue;
      }

      var virtualType = schema.virtuals[virtual];
      var sp = Array.isArray(virtual) ? virtual : virtual.indexOf('.') === -1 ? [virtual] : virtual.split('.');
      var cur = obj;

      for (var i = 0; i < sp.length - 1; ++i) {
        cur[sp[i]] = sp[i] in cur ? cur[sp[i]] : {};
        cur = cur[sp[i]];
      }

      var val = virtualType.applyGetters(cur[sp[sp.length - 1]], obj);
      var isPopulateVirtual = virtualType.options && (virtualType.options.ref || virtualType.options.refPath);

      if (isPopulateVirtual && val === undefined) {
        if (virtualType.options.justOne) {
          val = null;
        } else {
          val = [];
        }
      }

      cur[sp[sp.length - 1]] = val;
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }
}
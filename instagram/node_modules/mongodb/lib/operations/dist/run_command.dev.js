"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;

var utils_1 = require("../utils");

var operation_1 = require("./operation");
/** @internal */


var RunCommandOperation =
/*#__PURE__*/
function (_operation_1$Abstract) {
  _inherits(RunCommandOperation, _operation_1$Abstract);

  function RunCommandOperation(parent, command, options) {
    var _this;

    _classCallCheck(this, RunCommandOperation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RunCommandOperation).call(this, options));
    _this.command = command;
    _this.options = options;
    _this.ns = parent.s.namespace.withCollection('$cmd');
    return _this;
  }

  _createClass(RunCommandOperation, [{
    key: "execute",
    value: function execute(server, session) {
      var res;
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server = server;
              _context.next = 3;
              return regeneratorRuntime.awrap(server.command(this.ns, this.command, _objectSpread({}, this.options, {
                readPreference: this.readPreference,
                session: session
              }), this.options.responseType));

            case 3:
              res = _context.sent;
              return _context.abrupt("return", res);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "commandName",
    get: function get() {
      return 'runCommand';
    }
  }]);

  return RunCommandOperation;
}(operation_1.AbstractOperation);

exports.RunCommandOperation = RunCommandOperation;

var RunAdminCommandOperation =
/*#__PURE__*/
function (_operation_1$Abstract2) {
  _inherits(RunAdminCommandOperation, _operation_1$Abstract2);

  function RunAdminCommandOperation(command, options) {
    var _this2;

    _classCallCheck(this, RunAdminCommandOperation);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(RunAdminCommandOperation).call(this, options));
    _this2.command = command;
    _this2.options = options;
    _this2.ns = new utils_1.MongoDBNamespace('admin', '$cmd');
    return _this2;
  }

  _createClass(RunAdminCommandOperation, [{
    key: "execute",
    value: function execute(server, session) {
      var res;
      return regeneratorRuntime.async(function execute$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.server = server;
              _context2.next = 3;
              return regeneratorRuntime.awrap(server.command(this.ns, this.command, _objectSpread({}, this.options, {
                readPreference: this.readPreference,
                session: session
              })));

            case 3:
              res = _context2.sent;
              return _context2.abrupt("return", res);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "commandName",
    get: function get() {
      return 'runCommand';
    }
  }]);

  return RunAdminCommandOperation;
}(operation_1.AbstractOperation);

exports.RunAdminCommandOperation = RunAdminCommandOperation;
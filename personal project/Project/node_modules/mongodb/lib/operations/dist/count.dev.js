"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CountOperation = void 0;

var command_1 = require("./command");

var operation_1 = require("./operation");
/** @internal */


var CountOperation =
/*#__PURE__*/
function (_command_1$CommandOpe) {
  _inherits(CountOperation, _command_1$CommandOpe);

  function CountOperation(namespace, filter, options) {
    var _this;

    _classCallCheck(this, CountOperation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CountOperation).call(this, {
      s: {
        namespace: namespace
      }
    }, options));
    _this.options = options;
    _this.collectionName = namespace.collection;
    _this.query = filter;
    return _this;
  }

  _createClass(CountOperation, [{
    key: "execute",
    value: function execute(server, session) {
      var options, cmd, result;
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = this.options;
              cmd = {
                count: this.collectionName,
                query: this.query
              };

              if (typeof options.limit === 'number') {
                cmd.limit = options.limit;
              }

              if (typeof options.skip === 'number') {
                cmd.skip = options.skip;
              }

              if (options.hint != null) {
                cmd.hint = options.hint;
              }

              if (typeof options.maxTimeMS === 'number') {
                cmd.maxTimeMS = options.maxTimeMS;
              }

              _context.next = 8;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(CountOperation.prototype), "executeCommand", this).call(this, server, session, cmd));

            case 8:
              result = _context.sent;
              return _context.abrupt("return", result ? result.n : 0);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "commandName",
    get: function get() {
      return 'count';
    }
  }]);

  return CountOperation;
}(command_1.CommandOperation);

exports.CountOperation = CountOperation;
(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.MachineWorkflow = void 0;
var promises_1 = require("timers/promises");
var utils_1 = require("../../../utils");
var command_builders_1 = require("./command_builders");
/** The time to throttle callback calls. */
var THROTTLE_MS = 100;
/**
 * Common behaviour for OIDC machine workflows.
 * @internal
 */
var MachineWorkflow = /** @class */ (function () {
    /**
     * Instantiate the machine workflow.
     */
    function MachineWorkflow(cache) {
        this.cache = cache;
        this.callback = this.withLock(this.getToken.bind(this));
        this.lastExecutionTime = Date.now() - THROTTLE_MS;
    }
    /**
     * Execute the workflow. Gets the token from the subclass implementation.
     */
    MachineWorkflow.prototype.execute = function (connection, credentials) {
        return __awaiter(this, void 0, Promise, function () {
            var token, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTokenFromCacheOrEnv(connection, credentials)];
                    case 1:
                        token = _a.sent();
                        command = command_builders_1.finishCommandDocument(token);
                        return [4 /*yield*/, connection.command(utils_1.ns(credentials.source), command, undefined)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Reauthenticate on a machine workflow just grabs the token again since the server
     * has said the current access token is invalid or expired.
     */
    MachineWorkflow.prototype.reauthenticate = function (connection, credentials) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.cache.hasAccessToken) {
                            // Reauthentication implies the token has expired.
                            if (connection.accessToken === this.cache.getAccessToken()) {
                                // If connection's access token is the same as the cache's, remove
                                // the token from the cache and connection.
                                this.cache.removeAccessToken();
                                delete connection.accessToken;
                            }
                            else {
                                // If the connection's access token is different from the cache's, set
                                // the cache's token on the connection and do not remove from the
                                // cache.
                                connection.accessToken = this.cache.getAccessToken();
                            }
                        }
                        return [4 /*yield*/, this.execute(connection, credentials)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the document to add for speculative authentication.
     */
    MachineWorkflow.prototype.speculativeAuth = function (connection, credentials) {
        return __awaiter(this, void 0, Promise, function () {
            var token, document;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // The spec states only cached access tokens can use speculative auth.
                        if (!this.cache.hasAccessToken) {
                            return [2 /*return*/, {}];
                        }
                        return [4 /*yield*/, this.getTokenFromCacheOrEnv(connection, credentials)];
                    case 1:
                        token = _a.sent();
                        document = command_builders_1.finishCommandDocument(token);
                        document.db = credentials.source;
                        return [2 /*return*/, { speculativeAuthenticate: document }];
                }
            });
        });
    };
    /**
     * Get the token from the cache or environment.
     */
    MachineWorkflow.prototype.getTokenFromCacheOrEnv = function (connection, credentials) {
        return __awaiter(this, void 0, Promise, function () {
            var token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.cache.hasAccessToken) return [3 /*break*/, 1];
                        return [2 /*return*/, this.cache.getAccessToken()];
                    case 1: return [4 /*yield*/, this.callback(credentials)];
                    case 2:
                        token = _a.sent();
                        this.cache.put({ accessToken: token.access_token, expiresInSeconds: token.expires_in });
                        // Put the access token on the connection as well.
                        connection.accessToken = token.access_token;
                        return [2 /*return*/, token.access_token];
                }
            });
        });
    };
    /**
     * Ensure the callback is only executed one at a time, and throttled to
     * only once per 100ms.
     */
    MachineWorkflow.prototype.withLock = function (callback) {
        var _this = this;
        var lock = Promise.resolve();
        return function (credentials) { return __awaiter(_this, void 0, Promise, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // We do this to ensure that we would never return the result of the
                    // previous lock, only the current callback's value would get returned.
                    return [4 /*yield*/, lock];
                    case 1:
                        // We do this to ensure that we would never return the result of the
                        // previous lock, only the current callback's value would get returned.
                        _a.sent();
                        lock = lock["catch"](function () { return null; })
                            .then(function () { return __awaiter(_this, void 0, void 0, function () {
                            var difference;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        difference = Date.now() - this.lastExecutionTime;
                                        if (!(difference <= THROTTLE_MS)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, promises_1.setTimeout(THROTTLE_MS - difference)];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        this.lastExecutionTime = Date.now();
                                        return [4 /*yield*/, callback(credentials)];
                                    case 3: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); });
                        return [4 /*yield*/, lock];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
    };
    return MachineWorkflow;
}());
exports.MachineWorkflow = MachineWorkflow;

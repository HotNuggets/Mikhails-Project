'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var castFilterPath = require('../query/castFilterPath');

var cleanPositionalOperators = require('../schema/cleanPositionalOperators');

var getPath = require('../schema/getPath');

var updatedPathsByArrayFilter = require('./updatedPathsByArrayFilter');

module.exports = function castArrayFilters(query) {
  var arrayFilters = query.options.arrayFilters;
  var update = query.getUpdate();
  var schema = query.schema;
  var updatedPathsByFilter = updatedPathsByArrayFilter(update);
  var strictQuery = schema.options.strict;

  if (query._mongooseOptions.strict != null) {
    strictQuery = query._mongooseOptions.strict;
  }

  if (query.model && query.model.base.options.strictQuery != null) {
    strictQuery = query.model.base.options.strictQuery;
  }

  if (schema._userProvidedOptions.strictQuery != null) {
    strictQuery = schema._userProvidedOptions.strictQuery;
  }

  if (query._mongooseOptions.strictQuery != null) {
    strictQuery = query._mongooseOptions.strictQuery;
  }

  _castArrayFilters(arrayFilters, schema, strictQuery, updatedPathsByFilter, query);
};

function _castArrayFilters(arrayFilters, schema, strictQuery, updatedPathsByFilter, query) {
  if (!Array.isArray(arrayFilters)) {
    return;
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var filter = _step.value;

      if (filter == null) {
        throw new Error("Got null array filter in ".concat(arrayFilters));
      }

      var keys = Object.keys(filter).filter(function (key) {
        return filter[key] != null;
      });

      if (keys.length === 0) {
        return "continue";
      }

      var firstKey = keys[0];

      if (firstKey === '$and' || firstKey === '$or') {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            _castArrayFilters(filter[key], schema, strictQuery, updatedPathsByFilter, query);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return "continue";
      }

      var dot = firstKey.indexOf('.');
      var filterWildcardPath = dot === -1 ? firstKey : firstKey.substring(0, dot);

      if (updatedPathsByFilter[filterWildcardPath] == null) {
        return "continue";
      }

      var baseFilterPath = cleanPositionalOperators(updatedPathsByFilter[filterWildcardPath]);
      var baseSchematype = getPath(schema, baseFilterPath);
      var filterBaseSchema = baseSchematype != null ? baseSchematype.schema : null;

      if (filterBaseSchema != null && filterBaseSchema.discriminators != null && filter[filterWildcardPath + '.' + filterBaseSchema.options.discriminatorKey]) {
        filterBaseSchema = filterBaseSchema.discriminators[filter[filterWildcardPath + '.' + filterBaseSchema.options.discriminatorKey]] || filterBaseSchema;
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _key = _step3.value;

          if (updatedPathsByFilter[_key] === null) {
            continue;
          }

          if (Object.keys(updatedPathsByFilter).length === 0) {
            continue;
          }

          var _dot = _key.indexOf('.');

          var filterPathRelativeToBase = _dot === -1 ? null : _key.substring(_dot);
          var schematype = void 0;

          if (filterPathRelativeToBase == null || filterBaseSchema == null) {
            schematype = baseSchematype;
          } else {
            // If there are multiple array filters in the path being updated, make sure
            // to replace them so we can get the schema path.
            filterPathRelativeToBase = cleanPositionalOperators(filterPathRelativeToBase);
            schematype = getPath(filterBaseSchema, filterPathRelativeToBase);
          }

          if (schematype == null) {
            if (!strictQuery) {
              return {
                v: void 0
              };
            }

            var filterPath = filterPathRelativeToBase == null ? baseFilterPath + '.0' : baseFilterPath + '.0' + filterPathRelativeToBase; // For now, treat `strictQuery = true` and `strictQuery = 'throw'` as
            // equivalent for casting array filters. `strictQuery = true` doesn't
            // quite work in this context because we never want to silently strip out
            // array filters, even if the path isn't in the schema.

            throw new Error("Could not find path \"".concat(filterPath, "\" in schema"));
          }

          if (_typeof(filter[_key]) === 'object') {
            filter[_key] = castFilterPath(query, schematype, filter[_key]);
          } else {
            filter[_key] = schematype.castForQuery(null, filter[_key]);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    };

    for (var _iterator = arrayFilters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ret = _loop();

      switch (_ret) {
        case "continue":
          continue;

        default:
          if (_typeof(_ret) === "object") return _ret.v;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.HumanCallbackWorkflow = void 0;
var bson_1 = require("../../../bson");
var error_1 = require("../../../error");
var timeout_1 = require("../../../timeout");
var mongodb_oidc_1 = require("../mongodb_oidc");
var callback_workflow_1 = require("./callback_workflow");
/**
 * Class implementing behaviour for the non human callback workflow.
 * @internal
 */
var HumanCallbackWorkflow = /** @class */ (function (_super) {
    __extends(HumanCallbackWorkflow, _super);
    /**
     * Instantiate the human callback workflow.
     */
    function HumanCallbackWorkflow(cache, callback) {
        return _super.call(this, cache, callback) || this;
    }
    /**
     * Execute the OIDC human callback workflow.
     */
    HumanCallbackWorkflow.prototype.execute = function (connection, credentials) {
        return __awaiter(this, void 0, Promise, function () {
            var token, error_2, refreshToken, result, error_3, startResponse, conversationId, idpInfo, callbackResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.cache.hasAccessToken) return [3 /*break*/, 7];
                        token = this.cache.getAccessToken();
                        connection.accessToken = token;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 7]);
                        return [4 /*yield*/, this.finishAuthentication(connection, credentials, token)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        error_2 = _a.sent();
                        if (!(error_2 instanceof error_1.MongoError &&
                            error_2.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed)) return [3 /*break*/, 5];
                        this.cache.removeAccessToken();
                        delete connection.accessToken;
                        return [4 /*yield*/, this.execute(connection, credentials)];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5: throw error_2;
                    case 6: return [3 /*break*/, 7];
                    case 7:
                        if (!this.cache.hasRefreshToken) return [3 /*break*/, 15];
                        refreshToken = this.cache.getRefreshToken();
                        return [4 /*yield*/, this.fetchAccessToken(this.cache.getIdpInfo(), credentials, refreshToken)];
                    case 8:
                        result = _a.sent();
                        this.cache.put(result);
                        connection.accessToken = result.accessToken;
                        _a.label = 9;
                    case 9:
                        _a.trys.push([9, 11, , 15]);
                        return [4 /*yield*/, this.finishAuthentication(connection, credentials, result.accessToken)];
                    case 10: return [2 /*return*/, _a.sent()];
                    case 11:
                        error_3 = _a.sent();
                        if (!(error_3 instanceof error_1.MongoError &&
                            error_3.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed)) return [3 /*break*/, 13];
                        this.cache.removeRefreshToken();
                        delete connection.accessToken;
                        return [4 /*yield*/, this.execute(connection, credentials)];
                    case 12: return [2 /*return*/, _a.sent()];
                    case 13: throw error_3;
                    case 14: return [3 /*break*/, 15];
                    case 15: return [4 /*yield*/, this.startAuthentication(connection, credentials)];
                    case 16:
                        startResponse = _a.sent();
                        conversationId = startResponse.conversationId;
                        idpInfo = bson_1.BSON.deserialize(startResponse.payload.buffer);
                        return [4 /*yield*/, this.fetchAccessToken(idpInfo, credentials)];
                    case 17:
                        callbackResponse = _a.sent();
                        this.cache.put(callbackResponse, idpInfo);
                        connection.accessToken = callbackResponse.accessToken;
                        return [4 /*yield*/, this.finishAuthentication(connection, credentials, callbackResponse.accessToken, conversationId)];
                    case 18: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Fetches an access token using the callback.
     */
    HumanCallbackWorkflow.prototype.fetchAccessToken = function (idpInfo, credentials, refreshToken) {
        return __awaiter(this, void 0, Promise, function () {
            var controller, params, timeout, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        controller = new AbortController();
                        params = {
                            timeoutContext: controller.signal,
                            version: mongodb_oidc_1.OIDC_VERSION,
                            idpInfo: idpInfo
                        };
                        if (credentials.username) {
                            params.username = credentials.username;
                        }
                        if (refreshToken) {
                            params.refreshToken = refreshToken;
                        }
                        timeout = timeout_1.Timeout.expires(callback_workflow_1.HUMAN_TIMEOUT_MS);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, Promise.race([this.executeAndValidateCallback(params), timeout])];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        error_4 = _a.sent();
                        if (timeout_1.TimeoutError.is(error_4)) {
                            controller.abort();
                            throw new error_1.MongoOIDCError("OIDC callback timed out after " + callback_workflow_1.HUMAN_TIMEOUT_MS + "ms.");
                        }
                        throw error_4;
                    case 4:
                        timeout.clear();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return HumanCallbackWorkflow;
}(callback_workflow_1.CallbackWorkflow));
exports.HumanCallbackWorkflow = HumanCallbackWorkflow;

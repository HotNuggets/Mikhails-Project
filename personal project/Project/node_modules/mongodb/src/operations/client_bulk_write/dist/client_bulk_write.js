"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.ClientBulkWriteOperation = void 0;
var beta_1 = require("../../beta");
var responses_1 = require("../../cmap/wire_protocol/responses");
var utils_1 = require("../../utils");
var command_1 = require("../command");
var operation_1 = require("../operation");
/**
 * Executes a single client bulk write operation within a potential batch.
 * @internal
 */
var ClientBulkWriteOperation = /** @class */ (function (_super) {
    __extends(ClientBulkWriteOperation, _super);
    function ClientBulkWriteOperation(commandBuilder, options) {
        var _this = _super.call(this, undefined, options) || this;
        _this.commandBuilder = commandBuilder;
        _this.options = options;
        _this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');
        return _this;
    }
    Object.defineProperty(ClientBulkWriteOperation.prototype, "commandName", {
        get: function () {
            return 'bulkWrite';
        },
        enumerable: false,
        configurable: true
    });
    ClientBulkWriteOperation.prototype.resetBatch = function () {
        return this.commandBuilder.resetBatch();
    };
    Object.defineProperty(ClientBulkWriteOperation.prototype, "canRetryWrite", {
        get: function () {
            return this.commandBuilder.isBatchRetryable;
        },
        enumerable: false,
        configurable: true
    });
    ClientBulkWriteOperation.prototype.execute = function (server, session) {
        var _a, _b, _c;
        return __awaiter(this, void 0, Promise, function () {
            var command, connection;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!(server.description.type === beta_1.ServerType.LoadBalancer)) return [3 /*break*/, 6];
                        if (!session) return [3 /*break*/, 4];
                        connection = void 0;
                        if (!!session.pinnedConnection) return [3 /*break*/, 2];
                        return [4 /*yield*/, server.pool.checkOut()];
                    case 1:
                        // Checkout a connection to build the command.
                        connection = _d.sent();
                        // Pin the connection to the session so it get used to execute the command and we do not
                        // perform a double check-in/check-out.
                        session.pin(connection);
                        return [3 /*break*/, 3];
                    case 2:
                        connection = session.pinnedConnection;
                        _d.label = 3;
                    case 3:
                        command = this.commandBuilder.buildBatch((_a = connection.hello) === null || _a === void 0 ? void 0 : _a.maxMessageSizeBytes, (_b = connection.hello) === null || _b === void 0 ? void 0 : _b.maxWriteBatchSize, (_c = connection.hello) === null || _c === void 0 ? void 0 : _c.maxBsonObjectSize);
                        return [3 /*break*/, 5];
                    case 4: throw new beta_1.MongoClientBulkWriteExecutionError('Session provided to the client bulk write operation must be present.');
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        // At this point we have a server and the auto connect code has already
                        // run in executeOperation, so the server description will be populated.
                        // We can use that to build the command.
                        if (!server.description.maxWriteBatchSize ||
                            !server.description.maxMessageSizeBytes ||
                            !server.description.maxBsonObjectSize) {
                            throw new beta_1.MongoClientBulkWriteExecutionError('In order to execute a client bulk write, both maxWriteBatchSize, maxMessageSizeBytes and maxBsonObjectSize must be provided by the servers hello response.');
                        }
                        command = this.commandBuilder.buildBatch(server.description.maxMessageSizeBytes, server.description.maxWriteBatchSize, server.description.maxBsonObjectSize);
                        _d.label = 7;
                    case 7:
                        // Check after the batch is built if we cannot retry it and override the option.
                        if (!this.canRetryWrite) {
                            this.options.willRetryWrite = false;
                        }
                        return [4 /*yield*/, _super.prototype.executeCommand.call(this, server, session, command, responses_1.ClientBulkWriteCursorResponse)];
                    case 8: return [2 /*return*/, _d.sent()];
                }
            });
        });
    };
    return ClientBulkWriteOperation;
}(command_1.CommandOperation));
exports.ClientBulkWriteOperation = ClientBulkWriteOperation;
// Skipping the collation as it goes on the individual ops.
operation_1.defineAspects(ClientBulkWriteOperation, [
    operation_1.Aspect.WRITE_OPERATION,
    operation_1.Aspect.SKIP_COLLATION,
    operation_1.Aspect.CURSOR_CREATING,
    operation_1.Aspect.RETRYABLE,
    operation_1.Aspect.COMMAND_BATCHING
]);

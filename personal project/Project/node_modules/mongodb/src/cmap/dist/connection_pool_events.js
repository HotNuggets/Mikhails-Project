"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;
var constants_1 = require("../constants");
var utils_1 = require("../utils");
/**
 * The base export class for all monitoring events published from the connection pool
 * @public
 * @category Event
 */
var ConnectionPoolMonitoringEvent = /** @class */ (function () {
    /** @internal */
    function ConnectionPoolMonitoringEvent(pool) {
        this.time = new Date();
        this.address = pool.address;
    }
    return ConnectionPoolMonitoringEvent;
}());
exports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;
/**
 * An event published when a connection pool is created
 * @public
 * @category Event
 */
var ConnectionPoolCreatedEvent = /** @class */ (function (_super) {
    __extends(ConnectionPoolCreatedEvent, _super);
    /** @internal */
    function ConnectionPoolCreatedEvent(pool) {
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_POOL_CREATED;
        var _a = pool.options, maxConnecting = _a.maxConnecting, maxPoolSize = _a.maxPoolSize, minPoolSize = _a.minPoolSize, maxIdleTimeMS = _a.maxIdleTimeMS, waitQueueTimeoutMS = _a.waitQueueTimeoutMS;
        _this.options = { maxConnecting: maxConnecting, maxPoolSize: maxPoolSize, minPoolSize: minPoolSize, maxIdleTimeMS: maxIdleTimeMS, waitQueueTimeoutMS: waitQueueTimeoutMS };
        return _this;
    }
    return ConnectionPoolCreatedEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;
/**
 * An event published when a connection pool is ready
 * @public
 * @category Event
 */
var ConnectionPoolReadyEvent = /** @class */ (function (_super) {
    __extends(ConnectionPoolReadyEvent, _super);
    /** @internal */
    function ConnectionPoolReadyEvent(pool) {
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_POOL_READY;
        return _this;
    }
    return ConnectionPoolReadyEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;
/**
 * An event published when a connection pool is closed
 * @public
 * @category Event
 */
var ConnectionPoolClosedEvent = /** @class */ (function (_super) {
    __extends(ConnectionPoolClosedEvent, _super);
    /** @internal */
    function ConnectionPoolClosedEvent(pool) {
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_POOL_CLOSED;
        return _this;
    }
    return ConnectionPoolClosedEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;
/**
 * An event published when a connection pool creates a new connection
 * @public
 * @category Event
 */
var ConnectionCreatedEvent = /** @class */ (function (_super) {
    __extends(ConnectionCreatedEvent, _super);
    /** @internal */
    function ConnectionCreatedEvent(pool, connection) {
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_CREATED;
        _this.connectionId = connection.id;
        return _this;
    }
    return ConnectionCreatedEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionCreatedEvent = ConnectionCreatedEvent;
/**
 * An event published when a connection is ready for use
 * @public
 * @category Event
 */
var ConnectionReadyEvent = /** @class */ (function (_super) {
    __extends(ConnectionReadyEvent, _super);
    /** @internal */
    function ConnectionReadyEvent(pool, connection, connectionCreatedEventTime) {
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_READY;
        _this.durationMS = utils_1.now() - connectionCreatedEventTime;
        _this.connectionId = connection.id;
        return _this;
    }
    return ConnectionReadyEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionReadyEvent = ConnectionReadyEvent;
/**
 * An event published when a connection is closed
 * @public
 * @category Event
 */
var ConnectionClosedEvent = /** @class */ (function (_super) {
    __extends(ConnectionClosedEvent, _super);
    /** @internal */
    function ConnectionClosedEvent(pool, connection, reason, error) {
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_CLOSED;
        _this.connectionId = connection.id;
        _this.reason = reason;
        _this.serviceId = connection.serviceId;
        _this.error = error !== null && error !== void 0 ? error : null;
        return _this;
    }
    return ConnectionClosedEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionClosedEvent = ConnectionClosedEvent;
/**
 * An event published when a request to check a connection out begins
 * @public
 * @category Event
 */
var ConnectionCheckOutStartedEvent = /** @class */ (function (_super) {
    __extends(ConnectionCheckOutStartedEvent, _super);
    /** @internal */
    function ConnectionCheckOutStartedEvent(pool) {
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;
        return _this;
    }
    return ConnectionCheckOutStartedEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;
/**
 * An event published when a request to check a connection out fails
 * @public
 * @category Event
 */
var ConnectionCheckOutFailedEvent = /** @class */ (function (_super) {
    __extends(ConnectionCheckOutFailedEvent, _super);
    /** @internal */
    function ConnectionCheckOutFailedEvent(pool, reason, checkoutTime, error) {
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;
        _this.durationMS = utils_1.now() - checkoutTime;
        _this.reason = reason;
        _this.error = error;
        return _this;
    }
    return ConnectionCheckOutFailedEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;
/**
 * An event published when a connection is checked out of the connection pool
 * @public
 * @category Event
 */
var ConnectionCheckedOutEvent = /** @class */ (function (_super) {
    __extends(ConnectionCheckedOutEvent, _super);
    /** @internal */
    function ConnectionCheckedOutEvent(pool, connection, checkoutTime) {
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_CHECKED_OUT;
        _this.durationMS = utils_1.now() - checkoutTime;
        _this.connectionId = connection.id;
        return _this;
    }
    return ConnectionCheckedOutEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;
/**
 * An event published when a connection is checked into the connection pool
 * @public
 * @category Event
 */
var ConnectionCheckedInEvent = /** @class */ (function (_super) {
    __extends(ConnectionCheckedInEvent, _super);
    /** @internal */
    function ConnectionCheckedInEvent(pool, connection) {
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_CHECKED_IN;
        _this.connectionId = connection.id;
        return _this;
    }
    return ConnectionCheckedInEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;
/**
 * An event published when a connection pool is cleared
 * @public
 * @category Event
 */
var ConnectionPoolClearedEvent = /** @class */ (function (_super) {
    __extends(ConnectionPoolClearedEvent, _super);
    /** @internal */
    function ConnectionPoolClearedEvent(pool, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, pool) || this;
        /** @internal */
        _this.name = constants_1.CONNECTION_POOL_CLEARED;
        _this.serviceId = options.serviceId;
        _this.interruptInUseConnections = options.interruptInUseConnections;
        return _this;
    }
    return ConnectionPoolClearedEvent;
}(ConnectionPoolMonitoringEvent));
exports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;

"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetMoreOperation = void 0;

var responses_1 = require("../cmap/wire_protocol/responses");

var error_1 = require("../error");

var utils_1 = require("../utils");

var operation_1 = require("./operation");
/** @internal */


var GetMoreOperation =
/*#__PURE__*/
function (_operation_1$Abstract) {
  _inherits(GetMoreOperation, _operation_1$Abstract);

  function GetMoreOperation(ns, cursorId, server, options) {
    var _this;

    _classCallCheck(this, GetMoreOperation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GetMoreOperation).call(this, options));
    _this.options = options;
    _this.ns = ns;
    _this.cursorId = cursorId;
    _this.server = server;
    return _this;
  }

  _createClass(GetMoreOperation, [{
    key: "execute",

    /**
     * Although there is a server already associated with the get more operation, the signature
     * for execute passes a server so we will just use that one.
     */
    value: function execute(server, _session) {
      var collection, getMoreCmd, commandOptions;
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(server !== this.server)) {
                _context.next = 2;
                break;
              }

              throw new error_1.MongoRuntimeError('Getmore must run on the same server operation began on');

            case 2:
              if (!(this.cursorId == null || this.cursorId.isZero())) {
                _context.next = 4;
                break;
              }

              throw new error_1.MongoRuntimeError('Unable to iterate cursor with no id');

            case 4:
              collection = this.ns.collection;

              if (!(collection == null)) {
                _context.next = 7;
                break;
              }

              throw new error_1.MongoRuntimeError('A collection name must be determined before getMore');

            case 7:
              getMoreCmd = {
                getMore: this.cursorId,
                collection: collection
              };

              if (typeof this.options.batchSize === 'number') {
                getMoreCmd.batchSize = Math.abs(this.options.batchSize);
              }

              if (typeof this.options.maxAwaitTimeMS === 'number') {
                getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;
              } // we check for undefined specifically here to allow falsy values
              // eslint-disable-next-line no-restricted-syntax


              if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {
                getMoreCmd.comment = this.options.comment;
              }

              commandOptions = _objectSpread({
                returnFieldSelector: null,
                documentsReturnedIn: 'nextBatch'
              }, this.options);
              _context.next = 14;
              return regeneratorRuntime.awrap(server.command(this.ns, getMoreCmd, commandOptions, responses_1.CursorResponse));

            case 14:
              return _context.abrupt("return", _context.sent);

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "commandName",
    get: function get() {
      return 'getMore';
    }
  }]);

  return GetMoreOperation;
}(operation_1.AbstractOperation);

exports.GetMoreOperation = GetMoreOperation;
(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);
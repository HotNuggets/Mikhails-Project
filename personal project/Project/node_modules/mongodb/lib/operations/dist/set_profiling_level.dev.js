"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;

var error_1 = require("../error");

var utils_1 = require("../utils");

var command_1 = require("./command");

var levelValues = new Set(['off', 'slow_only', 'all']);
/** @public */

exports.ProfilingLevel = Object.freeze({
  off: 'off',
  slowOnly: 'slow_only',
  all: 'all'
});
/** @internal */

var SetProfilingLevelOperation =
/*#__PURE__*/
function (_command_1$CommandOpe) {
  _inherits(SetProfilingLevelOperation, _command_1$CommandOpe);

  function SetProfilingLevelOperation(db, level, options) {
    var _this;

    _classCallCheck(this, SetProfilingLevelOperation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SetProfilingLevelOperation).call(this, db, options));
    _this.options = options;

    switch (level) {
      case exports.ProfilingLevel.off:
        _this.profile = 0;
        break;

      case exports.ProfilingLevel.slowOnly:
        _this.profile = 1;
        break;

      case exports.ProfilingLevel.all:
        _this.profile = 2;
        break;

      default:
        _this.profile = 0;
        break;
    }

    _this.level = level;
    return _this;
  }

  _createClass(SetProfilingLevelOperation, [{
    key: "execute",
    value: function execute(server, session) {
      var level;
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              level = this.level;

              if (levelValues.has(level)) {
                _context.next = 3;
                break;
              }

              throw new error_1.MongoInvalidArgumentError("Profiling level must be one of \"".concat((0, utils_1.enumToString)(exports.ProfilingLevel), "\""));

            case 3:
              _context.next = 5;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(SetProfilingLevelOperation.prototype), "executeCommand", this).call(this, server, session, {
                profile: this.profile
              }));

            case 5:
              return _context.abrupt("return", level);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "commandName",
    get: function get() {
      return 'profile';
    }
  }]);

  return SetProfilingLevelOperation;
}(command_1.CommandOperation);

exports.SetProfilingLevelOperation = SetProfilingLevelOperation;
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.MongocryptdManager = void 0;
var error_1 = require("../error");
/**
 * @internal
 * An internal class that handles spawning a mongocryptd.
 */
var MongocryptdManager = /** @class */ (function () {
    function MongocryptdManager(extraOptions) {
        if (extraOptions === void 0) { extraOptions = {}; }
        this.spawnPath = '';
        this.spawnArgs = [];
        this.uri =
            typeof extraOptions.mongocryptdURI === 'string' && extraOptions.mongocryptdURI.length > 0
                ? extraOptions.mongocryptdURI
                : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;
        this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;
        if (Object.hasOwn(extraOptions, 'mongocryptdSpawnPath') && extraOptions.mongocryptdSpawnPath) {
            this.spawnPath = extraOptions.mongocryptdSpawnPath;
        }
        if (Object.hasOwn(extraOptions, 'mongocryptdSpawnArgs') &&
            Array.isArray(extraOptions.mongocryptdSpawnArgs)) {
            this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);
        }
        if (this.spawnArgs
            .filter(function (arg) { return typeof arg === 'string'; })
            .every(function (arg) { return arg.indexOf('--idleShutdownTimeoutSecs') < 0; })) {
            this.spawnArgs.push('--idleShutdownTimeoutSecs', '60');
        }
    }
    /**
     * Will check to see if a mongocryptd is up. If it is not up, it will attempt
     * to spawn a mongocryptd in a detached process, and then wait for it to be up.
     */
    MongocryptdManager.prototype.spawn = function () {
        return __awaiter(this, void 0, Promise, function () {
            var cmdName, spawn;
            return __generator(this, function (_a) {
                cmdName = this.spawnPath || 'mongocryptd';
                spawn = require('child_process').spawn;
                // Spawned with stdio: ignore and detached: true
                // to ensure child can outlive parent.
                this._child = spawn(cmdName, this.spawnArgs, {
                    stdio: 'ignore',
                    detached: true
                });
                this._child.on('error', function () {
                    // From the FLE spec:
                    // "The stdout and stderr of the spawned process MUST not be exposed in the driver
                    // (e.g. redirect to /dev/null). Users can pass the argument --logpath to
                    // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.
                    // If spawning is necessary, the driver MUST spawn mongocryptd whenever server
                    // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to
                    // connect after spawning, the server selection error is propagated to the user."
                    // The AutoEncrypter and MongoCryptdManager should work together to spawn
                    // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally
                    // shuts down after 60s and gets respawned when necessary.  We rely on server
                    // selection timeouts when connecting to the `mongocryptd` to inform users that something
                    // has been configured incorrectly.  For those reasons, we suppress stderr from
                    // the `mongocryptd` process and immediately unref the process.
                });
                // unref child to remove handle from event loop
                this._child.unref();
                return [2 /*return*/];
            });
        });
    };
    /**
     * @returns the result of `fn` or rejects with an error.
     */
    MongocryptdManager.prototype.withRespawn = function (fn) {
        return __awaiter(this, void 0, ReturnType, function () {
            var result_1, err_1, shouldSpawn, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fn()];
                    case 1:
                        result_1 = _a.sent();
                        return [2 /*return*/, result_1];
                    case 2:
                        err_1 = _a.sent();
                        shouldSpawn = err_1 instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;
                        if (!shouldSpawn) {
                            throw err_1;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [4 /*yield*/, this.spawn()];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, fn()];
                    case 5:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    MongocryptdManager.DEFAULT_MONGOCRYPTD_URI = 'mongodb://localhost:27020';
    return MongocryptdManager;
}());
exports.MongocryptdManager = MongocryptdManager;

"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutomatedCallbackWorkflow = void 0;

var error_1 = require("../../../error");

var timeout_1 = require("../../../timeout");

var mongodb_oidc_1 = require("../mongodb_oidc");

var callback_workflow_1 = require("./callback_workflow");
/**
 * Class implementing behaviour for the non human callback workflow.
 * @internal
 */


var AutomatedCallbackWorkflow =
/*#__PURE__*/
function (_callback_workflow_1$) {
  _inherits(AutomatedCallbackWorkflow, _callback_workflow_1$);

  /**
   * Instantiate the human callback workflow.
   */
  function AutomatedCallbackWorkflow(cache, callback) {
    _classCallCheck(this, AutomatedCallbackWorkflow);

    return _possibleConstructorReturn(this, _getPrototypeOf(AutomatedCallbackWorkflow).call(this, cache, callback));
  }
  /**
   * Execute the OIDC callback workflow.
   */


  _createClass(AutomatedCallbackWorkflow, [{
    key: "execute",
    value: function execute(connection, credentials) {
      var token, response;
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.cache.hasAccessToken) {
                _context.next = 18;
                break;
              }

              token = this.cache.getAccessToken();
              _context.prev = 2;
              _context.next = 5;
              return regeneratorRuntime.awrap(this.finishAuthentication(connection, credentials, token));

            case 5:
              return _context.abrupt("return", _context.sent);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](2);

              if (!(_context.t0 instanceof error_1.MongoError && _context.t0.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed)) {
                _context.next = 17;
                break;
              }

              this.cache.removeAccessToken();
              _context.next = 14;
              return regeneratorRuntime.awrap(this.execute(connection, credentials));

            case 14:
              return _context.abrupt("return", _context.sent);

            case 17:
              throw _context.t0;

            case 18:
              _context.next = 20;
              return regeneratorRuntime.awrap(this.fetchAccessToken(credentials));

            case 20:
              response = _context.sent;
              this.cache.put(response);
              connection.accessToken = response.accessToken;
              _context.next = 25;
              return regeneratorRuntime.awrap(this.finishAuthentication(connection, credentials, response.accessToken));

            case 25:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[2, 8]]);
    }
    /**
     * Fetches the access token using the callback.
     */

  }, {
    key: "fetchAccessToken",
    value: function fetchAccessToken(credentials) {
      var controller, params, timeout;
      return regeneratorRuntime.async(function fetchAccessToken$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              controller = new AbortController();
              params = {
                timeoutContext: controller.signal,
                version: mongodb_oidc_1.OIDC_VERSION
              };

              if (credentials.username) {
                params.username = credentials.username;
              }

              timeout = timeout_1.Timeout.expires(callback_workflow_1.AUTOMATED_TIMEOUT_MS);
              _context2.prev = 4;
              _context2.next = 7;
              return regeneratorRuntime.awrap(Promise.race([this.executeAndValidateCallback(params), timeout]));

            case 7:
              return _context2.abrupt("return", _context2.sent);

            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](4);

              if (!timeout_1.TimeoutError.is(_context2.t0)) {
                _context2.next = 15;
                break;
              }

              controller.abort();
              throw new error_1.MongoOIDCError("OIDC callback timed out after ".concat(callback_workflow_1.AUTOMATED_TIMEOUT_MS, "ms."));

            case 15:
              throw _context2.t0;

            case 16:
              _context2.prev = 16;
              timeout.clear();
              return _context2.finish(16);

            case 19:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[4, 10, 16, 19]]);
    }
  }]);

  return AutomatedCallbackWorkflow;
}(callback_workflow_1.CallbackWorkflow);

exports.AutomatedCallbackWorkflow = AutomatedCallbackWorkflow;
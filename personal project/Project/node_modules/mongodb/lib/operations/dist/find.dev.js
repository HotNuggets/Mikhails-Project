"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FindOperation = void 0;

var responses_1 = require("../cmap/wire_protocol/responses");

var error_1 = require("../error");

var read_concern_1 = require("../read_concern");

var sort_1 = require("../sort");

var utils_1 = require("../utils");

var command_1 = require("./command");

var operation_1 = require("./operation");
/** @internal */


var FindOperation =
/*#__PURE__*/
function (_command_1$CommandOpe) {
  _inherits(FindOperation, _command_1$CommandOpe);

  function FindOperation(ns) {
    var _this;

    var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, FindOperation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FindOperation).call(this, undefined, options));
    _this.options = _objectSpread({}, options);
    delete _this.options.writeConcern;
    _this.ns = ns;

    if (_typeof(filter) !== 'object' || Array.isArray(filter)) {
      throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');
    } // special case passing in an ObjectId as a filter


    _this.filter = filter != null && filter._bsontype === 'ObjectId' ? {
      _id: filter
    } : filter;
    return _this;
  }

  _createClass(FindOperation, [{
    key: "execute",
    value: function execute(server, session) {
      var options, findCommand;
      return regeneratorRuntime.async(function execute$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server = server;
              options = this.options;
              findCommand = makeFindCommand(this.ns, this.filter, options);

              if (this.explain) {
                findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);
              }

              _context.next = 6;
              return regeneratorRuntime.awrap(server.command(this.ns, findCommand, _objectSpread({}, this.options, {}, this.bsonOptions, {
                documentsReturnedIn: 'firstBatch',
                session: session
              }), this.explain ? responses_1.ExplainedCursorResponse : responses_1.CursorResponse));

            case 6:
              return _context.abrupt("return", _context.sent);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "commandName",
    get: function get() {
      return 'find';
    }
  }]);

  return FindOperation;
}(command_1.CommandOperation);

exports.FindOperation = FindOperation;

function makeFindCommand(ns, filter, options) {
  var findCommand = {
    find: ns.collection,
    filter: filter
  };

  if (options.sort) {
    findCommand.sort = (0, sort_1.formatSort)(options.sort);
  }

  if (options.projection) {
    var projection = options.projection;

    if (projection && Array.isArray(projection)) {
      projection = projection.length ? projection.reduce(function (result, field) {
        result[field] = 1;
        return result;
      }, {}) : {
        _id: 1
      };
    }

    findCommand.projection = projection;
  }

  if (options.hint) {
    findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);
  }

  if (typeof options.skip === 'number') {
    findCommand.skip = options.skip;
  }

  if (typeof options.limit === 'number') {
    if (options.limit < 0) {
      findCommand.limit = -options.limit;
      findCommand.singleBatch = true;
    } else {
      findCommand.limit = options.limit;
    }
  }

  if (typeof options.batchSize === 'number') {
    if (options.batchSize < 0) {
      if (options.limit && options.limit !== 0 && Math.abs(options.batchSize) < Math.abs(options.limit)) {
        findCommand.limit = -options.batchSize;
      }

      findCommand.singleBatch = true;
    } else {
      findCommand.batchSize = options.batchSize;
    }
  }

  if (typeof options.singleBatch === 'boolean') {
    findCommand.singleBatch = options.singleBatch;
  } // we check for undefined specifically here to allow falsy values
  // eslint-disable-next-line no-restricted-syntax


  if (options.comment !== undefined) {
    findCommand.comment = options.comment;
  }

  if (typeof options.maxTimeMS === 'number') {
    findCommand.maxTimeMS = options.maxTimeMS;
  }

  var readConcern = read_concern_1.ReadConcern.fromOptions(options);

  if (readConcern) {
    findCommand.readConcern = readConcern.toJSON();
  }

  if (options.max) {
    findCommand.max = options.max;
  }

  if (options.min) {
    findCommand.min = options.min;
  }

  if (typeof options.returnKey === 'boolean') {
    findCommand.returnKey = options.returnKey;
  }

  if (typeof options.showRecordId === 'boolean') {
    findCommand.showRecordId = options.showRecordId;
  }

  if (typeof options.tailable === 'boolean') {
    findCommand.tailable = options.tailable;
  }

  if (typeof options.oplogReplay === 'boolean') {
    findCommand.oplogReplay = options.oplogReplay;
  }

  if (typeof options.timeout === 'boolean') {
    findCommand.noCursorTimeout = !options.timeout;
  } else if (typeof options.noCursorTimeout === 'boolean') {
    findCommand.noCursorTimeout = options.noCursorTimeout;
  }

  if (typeof options.awaitData === 'boolean') {
    findCommand.awaitData = options.awaitData;
  }

  if (typeof options.allowPartialResults === 'boolean') {
    findCommand.allowPartialResults = options.allowPartialResults;
  }

  if (options.collation) {
    findCommand.collation = options.collation;
  }

  if (typeof options.allowDiskUse === 'boolean') {
    findCommand.allowDiskUse = options.allowDiskUse;
  }

  if (options["let"]) {
    findCommand["let"] = options["let"];
  }

  return findCommand;
}

(0, operation_1.defineAspects)(FindOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.CURSOR_CREATING]);
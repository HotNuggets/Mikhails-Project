'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var applyTimestampsToChildren = require('../update/applyTimestampsToChildren');

var applyTimestampsToUpdate = require('../update/applyTimestampsToUpdate');

var get = require('../get');

var handleTimestampOption = require('../schema/handleTimestampOption');

var setDocumentTimestamps = require('./setDocumentTimestamps');

var symbols = require('../../schema/symbols');

var replaceOps = new Set(['replaceOne', 'findOneAndReplace']);

module.exports = function setupTimestamps(schema, timestamps) {
  var childHasTimestamp = schema.childSchemas.find(withTimestamp);

  function withTimestamp(s) {
    var ts = s.schema.options.timestamps;
    return !!ts;
  }

  if (!timestamps && !childHasTimestamp) {
    return;
  }

  var createdAt = handleTimestampOption(timestamps, 'createdAt');
  var updatedAt = handleTimestampOption(timestamps, 'updatedAt');
  var currentTime = timestamps != null && timestamps.hasOwnProperty('currentTime') ? timestamps.currentTime : null;
  var schemaAdditions = {};
  schema.$timestamps = {
    createdAt: createdAt,
    updatedAt: updatedAt
  };

  if (createdAt && !schema.paths[createdAt]) {
    var _schemaAdditions$crea;

    var baseImmutableCreatedAt = schema.base != null ? schema.base.get('timestamps.createdAt.immutable') : null;
    var immutable = baseImmutableCreatedAt != null ? baseImmutableCreatedAt : true;
    schemaAdditions[createdAt] = (_schemaAdditions$crea = {}, _defineProperty(_schemaAdditions$crea, schema.options.typeKey || 'type', Date), _defineProperty(_schemaAdditions$crea, "immutable", immutable), _schemaAdditions$crea);
  }

  if (updatedAt && !schema.paths[updatedAt]) {
    schemaAdditions[updatedAt] = Date;
  }

  schema.add(schemaAdditions);
  schema.pre('save', function timestampsPreSave(next) {
    var timestampOption = get(this, '$__.saveOptions.timestamps');

    if (timestampOption === false) {
      return next();
    }

    setDocumentTimestamps(this, timestampOption, currentTime, createdAt, updatedAt);
    next();
  });

  schema.methods.initializeTimestamps = function () {
    var ts = currentTime != null ? currentTime() : this.constructor.base.now();

    if (createdAt && !this.get(createdAt)) {
      this.$set(createdAt, ts);
    }

    if (updatedAt && !this.get(updatedAt)) {
      this.$set(updatedAt, ts);
    }

    if (this.$isSubdocument) {
      return this;
    }

    var subdocs = this.$getAllSubdocs();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = subdocs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var subdoc = _step.value;

        if (subdoc.initializeTimestamps) {
          subdoc.initializeTimestamps();
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return this;
  };

  _setTimestampsOnUpdate[symbols.builtInMiddleware] = true;
  var opts = {
    query: true,
    model: false
  };
  schema.pre('findOneAndReplace', opts, _setTimestampsOnUpdate);
  schema.pre('findOneAndUpdate', opts, _setTimestampsOnUpdate);
  schema.pre('replaceOne', opts, _setTimestampsOnUpdate);
  schema.pre('update', opts, _setTimestampsOnUpdate);
  schema.pre('updateOne', opts, _setTimestampsOnUpdate);
  schema.pre('updateMany', opts, _setTimestampsOnUpdate);

  function _setTimestampsOnUpdate(next) {
    var now = currentTime != null ? currentTime() : this.model.base.now(); // Replacing with null update should still trigger timestamps

    if (replaceOps.has(this.op) && this.getUpdate() == null) {
      this.setUpdate({});
    }

    applyTimestampsToUpdate(now, createdAt, updatedAt, this.getUpdate(), this._mongooseOptions, replaceOps.has(this.op));
    applyTimestampsToChildren(now, this.getUpdate(), this.model.schema);
    next();
  }
};
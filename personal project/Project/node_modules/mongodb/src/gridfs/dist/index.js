"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.GridFSBucket = void 0;
var error_1 = require("../error");
var mongo_types_1 = require("../mongo_types");
var write_concern_1 = require("../write_concern");
var download_1 = require("./download");
var upload_1 = require("./upload");
var DEFAULT_GRIDFS_BUCKET_OPTIONS = {
    bucketName: 'fs',
    chunkSizeBytes: 255 * 1024
};
/**
 * Constructor for a streaming GridFS interface
 * @public
 */
var GridFSBucket = /** @class */ (function (_super) {
    __extends(GridFSBucket, _super);
    function GridFSBucket(db, options) {
        var _this = _super.call(this) || this;
        _this.setMaxListeners(0);
        var privateOptions = __assign(__assign(__assign({}, DEFAULT_GRIDFS_BUCKET_OPTIONS), options), { writeConcern: write_concern_1.WriteConcern.fromOptions(options) });
        _this.s = {
            db: db,
            options: privateOptions,
            _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),
            _filesCollection: db.collection(privateOptions.bucketName + '.files'),
            checkedIndexes: false,
            calledOpenUploadStream: false
        };
        return _this;
    }
    /**
     * Returns a writable stream (GridFSBucketWriteStream) for writing
     * buffers to GridFS. The stream's 'id' property contains the resulting
     * file's id.
     *
     * @param filename - The value of the 'filename' key in the files doc
     * @param options - Optional settings.
     */
    GridFSBucket.prototype.openUploadStream = function (filename, options) {
        return new upload_1.GridFSBucketWriteStream(this, filename, options);
    };
    /**
     * Returns a writable stream (GridFSBucketWriteStream) for writing
     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting
     * file's id.
     */
    GridFSBucket.prototype.openUploadStreamWithId = function (id, filename, options) {
        return new upload_1.GridFSBucketWriteStream(this, filename, __assign(__assign({}, options), { id: id }));
    };
    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */
    GridFSBucket.prototype.openDownloadStream = function (id, options) {
        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { _id: id }, options);
    };
    /**
     * Deletes a file with the given id
     *
     * @param id - The id of the file doc
     */
    GridFSBucket.prototype["delete"] = function (id) {
        return __awaiter(this, void 0, Promise, function () {
            var deletedCount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.s._filesCollection.deleteOne({ _id: id })];
                    case 1:
                        deletedCount = (_a.sent()).deletedCount;
                        // Delete orphaned chunks before returning FileNotFound
                        return [4 /*yield*/, this.s._chunksCollection.deleteMany({ files_id: id })];
                    case 2:
                        // Delete orphaned chunks before returning FileNotFound
                        _a.sent();
                        if (deletedCount === 0) {
                            // TODO(NODE-3483): Replace with more appropriate error
                            // Consider creating new error MongoGridFSFileNotFoundError
                            throw new error_1.MongoRuntimeError("File not found for id " + id);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /** Convenience wrapper around find on the files collection */
    GridFSBucket.prototype.find = function (filter, options) {
        if (filter === void 0) { filter = {}; }
        if (options === void 0) { options = {}; }
        return this.s._filesCollection.find(filter, options);
    };
    /**
     * Returns a readable stream (GridFSBucketReadStream) for streaming the
     * file with the given name from GridFS. If there are multiple files with
     * the same name, this will stream the most recent file with the given name
     * (as determined by the `uploadDate` field). You can set the `revision`
     * option to change this behavior.
     */
    GridFSBucket.prototype.openDownloadStreamByName = function (filename, options) {
        var sort = { uploadDate: -1 };
        var skip = undefined;
        if (options && options.revision != null) {
            if (options.revision >= 0) {
                sort = { uploadDate: 1 };
                skip = options.revision;
            }
            else {
                skip = -options.revision - 1;
            }
        }
        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { filename: filename }, __assign(__assign({}, options), { sort: sort, skip: skip }));
    };
    /**
     * Renames the file with the given _id to the given string
     *
     * @param id - the id of the file to rename
     * @param filename - new name for the file
     */
    GridFSBucket.prototype.rename = function (id, filename) {
        return __awaiter(this, void 0, Promise, function () {
            var filter, update, matchedCount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = { _id: id };
                        update = { $set: { filename: filename } };
                        return [4 /*yield*/, this.s._filesCollection.updateOne(filter, update)];
                    case 1:
                        matchedCount = (_a.sent()).matchedCount;
                        if (matchedCount === 0) {
                            throw new error_1.MongoRuntimeError("File with id " + id + " not found");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /** Removes this bucket's files collection, followed by its chunks collection. */
    GridFSBucket.prototype.drop = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.s._filesCollection.drop()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.s._chunksCollection.drop()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * When the first call to openUploadStream is made, the upload stream will
     * check to see if it needs to create the proper indexes on the chunks and
     * files collections. This event is fired either when 1) it determines that
     * no index creation is necessary, 2) when it successfully creates the
     * necessary indexes.
     * @event
     */
    GridFSBucket.INDEX = 'index';
    return GridFSBucket;
}(mongo_types_1.TypedEventEmitter));
exports.GridFSBucket = GridFSBucket;
